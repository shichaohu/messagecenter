<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HS.VIP.Management.Service</name>
    </assembly>
    <members>
        <member name="T:HS.VIP.Management.Service.AccountBaseService">
            <summary>
            Account相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.AccountBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.AccountBaseService.accountRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountBaseService.#ctor(HS.VIP.Management.Repository.AccountRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountBaseService.CheckInfo(HS.VIP.Management.Model.MAccount,HS.VIP.Management.Model.MAccount)">
            <summary>
            检查Account数据有效性
            </summary>
            <param name="model">待检查Account数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountBaseService.GetTotalCount(HS.VIP.Management.Model.MAccountCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MAccount@,HS.VIP.Management.Model.MAccount@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="F:HS.VIP.Management.Service.BaseService`2._mediator">
            <summary>
            _mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.BaseService`2._repositoryOpert">
            <summary>
            id仓储操作类
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.BaseService`2._accessor">
            <summary>
            请求上下文
            </summary>
        </member>
        <member name="P:HS.VIP.Management.Service.BaseService`2._mSystemLog">
            <summary>
            审计日志对象
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.BaseService`2.#ctor(HS.VIP.Management.Repository.repository.IRepository{`0,`1},HS.VIP.Management.Service.Common.IInjectedObjects)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.BaseService`2.AddOneSystemLog">
            <summary>
            记录日志 在具体实现上，可以根据自己项目实际情况做自定义实现
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.BaseService`2.CheckInfoBase(`0,`0)">
            <summary>
            检查TModel数据有效性
            </summary>
            <param name="model">待检查数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BaseService`2.CheckInfo(`0,`0)">
            <summary>
            检查TModel数据有效性
            </summary>
            <param name="model">待检查数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BaseService`2.GetTotalCount(`1)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BaseService`2.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},`0@,`0@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BaseService`2.AddOne(`0)">
            <summary>
            新增一条Test记录
            </summary>
            <param name="model">Test数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BaseService`2.BactchAdd(System.Collections.Generic.List{`0})">
            <summary>
            批量新增Test数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BaseService`2.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BaseService`2.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BaseService`2.UpdateById(`0)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BaseService`2.BactchUpdateById(System.Collections.Generic.List{`0})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BaseService`2.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 test 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BaseService`2.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BaseService`2.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BaseService`2.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BaseService`2.GetOneModel(`1)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BaseService`2.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BaseService`2.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{`1})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BaseService`2.GetAllList(`1)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BaseService`2.Export(`1,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.CardManagementBaseService">
            <summary>
            CardManagement相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.CardManagementBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.CardManagementBaseService.cardManagementRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementBaseService.#ctor(HS.VIP.Management.Repository.CardManagementRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementBaseService.CheckInfo(HS.VIP.Management.Model.MCardManagement,HS.VIP.Management.Model.MCardManagement)">
            <summary>
            检查CardManagement数据有效性
            </summary>
            <param name="model">待检查CardManagement数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementBaseService.GetTotalCount(HS.VIP.Management.Model.MCardManagementCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MCardManagement@,HS.VIP.Management.Model.MCardManagement@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.CorporationBaseService">
            <summary>
            Corporation相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.CorporationBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.CorporationBaseService.corporationRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationBaseService.#ctor(HS.VIP.Management.Repository.CorporationRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationBaseService.CheckInfo(HS.VIP.Management.Model.MCorporation,HS.VIP.Management.Model.MCorporation)">
            <summary>
            检查Corporation数据有效性
            </summary>
            <param name="model">待检查Corporation数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationBaseService.GetTotalCount(HS.VIP.Management.Model.MCorporationCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MCorporation@,HS.VIP.Management.Model.MCorporation@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.CustomerContractManagementBaseService">
            <summary>
            CustomerContractManagement相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.CustomerContractManagementBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.CustomerContractManagementBaseService.customerContractManagementRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementBaseService.#ctor(HS.VIP.Management.Repository.CustomerContractManagementRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementBaseService.CheckInfo(HS.VIP.Management.Model.MCustomerContractManagement,HS.VIP.Management.Model.MCustomerContractManagement)">
            <summary>
            检查CustomerContractManagement数据有效性
            </summary>
            <param name="model">待检查CustomerContractManagement数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementBaseService.GetTotalCount(HS.VIP.Management.Model.MCustomerContractManagementCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MCustomerContractManagement@,HS.VIP.Management.Model.MCustomerContractManagement@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.CustomerInformationRegistrationBaseService">
            <summary>
            CustomerInformationRegistration相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.CustomerInformationRegistrationBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.CustomerInformationRegistrationBaseService.customerInformationRegistrationRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationBaseService.#ctor(HS.VIP.Management.Repository.CustomerInformationRegistrationRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationBaseService.CheckInfo(HS.VIP.Management.Model.MCustomerInformationRegistration,HS.VIP.Management.Model.MCustomerInformationRegistration)">
            <summary>
            检查CustomerInformationRegistration数据有效性
            </summary>
            <param name="model">待检查CustomerInformationRegistration数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationBaseService.GetTotalCount(HS.VIP.Management.Model.MCustomerInformationRegistrationCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MCustomerInformationRegistration@,HS.VIP.Management.Model.MCustomerInformationRegistration@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.DictionaryBaseService">
            <summary>
            Dictionary相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.DictionaryBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.DictionaryBaseService.dictionaryRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryBaseService.#ctor(HS.VIP.Management.Repository.DictionaryRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryBaseService.CheckInfo(HS.VIP.Management.Model.MDictionary,HS.VIP.Management.Model.MDictionary)">
            <summary>
            检查Dictionary数据有效性
            </summary>
            <param name="model">待检查Dictionary数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryBaseService.GetTotalCount(HS.VIP.Management.Model.MDictionaryCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MDictionary@,HS.VIP.Management.Model.MDictionary@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="P:HS.VIP.Management.Service.IBaseService`2._mSystemLog">
            <summary>
            审计日志对象
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.IBaseService`2.GetTotalCount(`1)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.IBaseService`2.AddOne(`0)">
            <summary>
            新增一条Test记录
            </summary>
            <param name="model">Test数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.IBaseService`2.BactchAdd(System.Collections.Generic.List{`0})">
            <summary>
            批量新增Test数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.IBaseService`2.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.IBaseService`2.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.IBaseService`2.UpdateById(`0)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.IBaseService`2.BactchUpdateById(System.Collections.Generic.List{`0})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.IBaseService`2.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 test 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.IBaseService`2.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.IBaseService`2.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.IBaseService`2.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.IBaseService`2.GetOneModel(`1)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.IBaseService`2.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.IBaseService`2.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{`1})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.IBaseService`2.GetAllList(`1)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.IBaseService`2.Export(`1,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.TestBaseService_old">
            <summary>
            test相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.TestBaseService_old.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.TestBaseService_old.testRepositoryOpert">
            <summary>
            id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.TestBaseService_old.#ctor(HS.VIP.Management.Repository.repository.CustomerManagerment.ITestRepository{HS.VIP.Management.Model.MTest,HS.VIP.Management.Model.MTestCondition})">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.TestBaseService_old.CheckInfo(HS.VIP.Management.Model.MTest,HS.VIP.Management.Model.MTest)">
            <summary>
            检查Test数据有效性
            </summary>
            <param name="model">待检查Test数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.TestBaseService_old.GetTotalCount(HS.VIP.Management.Model.MTestCondition)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.TestBaseService_old.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MTest@,HS.VIP.Management.Model.MTest@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="P:HS.VIP.Management.Service.Common.IInjectedObjects.Mediator">
            <summary>
            _mediator 领域事件操作对象
            </summary>
        </member>
        <member name="P:HS.VIP.Management.Service.Common.IInjectedObjects.Accessor">
            <summary>
            请求上下文
            </summary>
        </member>
        <member name="P:HS.VIP.Management.Service.Common.InjectedObjects.Mediator">
            <summary>
            _mediator 领域事件操作对象
            </summary>
        </member>
        <member name="P:HS.VIP.Management.Service.Common.InjectedObjects.Accessor">
            <summary>
            请求上下文
            </summary>
        </member>
        <member name="T:HS.VIP.Management.Service.OpertLogHander">
            <summary>
            日志记录事件消费者
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.OpertLogHander.Handle(XYH.Public.Tools.Logs.MSystemLog)">
            <summary>
            事件处理
            </summary>
            <param name="logNotification">日志消息</param>
        </member>
        <member name="T:HS.VIP.Management.Service.OpertLogTools">
            <summary>
            操作日志公共帮助类（对MSystemLog进行扩展）
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.OpertLogTools.AddLog``1(XYH.Public.Tools.Logs.MSystemLog,``0,MediatR.IMediator,Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            新增日志
            </summary>
            <typeparam name="T">数据实体模型</typeparam>
            <param name="systemLog">日志对象</param>
            <param name="model">数据模型</param>
            <param name="mediator">领域驱动事件</param>
            <param name="httpContext">请求上下文</param>
            <param name="requestLocationLin">请求代码行号</param>
        </member>
        <member name="M:HS.VIP.Management.Service.OpertLogTools.BactchAddLog``1(XYH.Public.Tools.Logs.MSystemLog,System.Collections.Generic.List{``0},MediatR.IMediator,Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            批量新增操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mSystemLog"></param>
            <param name="modelList"></param>
            <param name="mediator">领域驱动事件</param>
            <param name="httpContext">请求上下文</param>
            <param name="requestLocationLin">请求代码行号</param>
        </member>
        <member name="M:HS.VIP.Management.Service.OpertLogTools.Delete``1(XYH.Public.Tools.Logs.MSystemLog,``0,System.String,MediatR.IMediator,Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            删除日志
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mSystemLog"></param>
            <param name="modelList">modelList</param>
            <param name="mediator">领域驱动事件</param>
            <param name="httpContext">请求上下文</param>
            <param name="requestLocationLin">请求代码行号</param>
        </member>
        <member name="M:HS.VIP.Management.Service.OpertLogTools.BactchDeleteByIdListLog``1(XYH.Public.Tools.Logs.MSystemLog,System.Collections.Generic.List{``0},MediatR.IMediator,Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            新增编码日志
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mSystemLog"></param>
            <param name="modelList">modelList</param>
            <param name="mediator">领域驱动事件</param>
            <param name="httpContext">请求上下文</param>
            <param name="requestLocationLin">请求代码行号</param>
        </member>
        <member name="M:HS.VIP.Management.Service.OpertLogTools.EditLog``1(XYH.Public.Tools.Logs.MSystemLog,``0,``0,System.String,MediatR.IMediator,Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            编辑日志
            </summary>
            <typeparam name="T">数据实体模型</typeparam>
            <param name="systemLog">日志对象</param>
            <param name="modelOld">旧数据模型</param>
            <param name="modelNew">新数据模型</param>
            <param name="dataKey">数据key</param>
            <param name="mediator">领域驱动事件</param>
            <param name="httpContext">请求上下文</param>
            <param name="requestLocationLin">请求代码行号</param>
        </member>
        <member name="M:HS.VIP.Management.Service.OpertLogTools.BactchUpdateSpecifyFieldsByIdLog``2(XYH.Public.Tools.Logs.MSystemLog,``0,HS.Public.Tools.Model.MBactchUpdateSpecifyFields{``1},MediatR.IMediator,Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            批量更新指定字段的值(根据主键集合) 日志
            </summary>
            <typeparam name="T">数据实体模型</typeparam>
            <param name="systemLog">日志对象</param>
            <param name="model">数据模型</param>
            <param name="bactchUpdateSpecifyFields">数据更新模型</param>
            <param name="mediator">领域驱动事件</param>
            <param name="httpContext">请求上下文</param>
            <param name="requestLocationLin">请求代码行号</param>
        </member>
        <member name="M:HS.VIP.Management.Service.OpertLogTools.CommonLog(XYH.Public.Tools.Logs.MSystemLog,MediatR.IMediator,Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            通用日志
            </summary>
            <typeparam name="T">数据实体模型</typeparam>
            <param name="systemLog">日志对象</param>
            <param name="mediator">领域驱动事件</param>
            <param name="httpContext">请求上下文</param>
            <param name="requestLocationLin">请求代码行号</param>
        </member>
        <member name="T:HS.VIP.Management.Service.AccountService">
            <summary>
            Account相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.#ctor(HS.VIP.Management.Repository.AccountRepository)">
            <summary>
            构造函数，通过依赖注入 Account 仓储操作类
            </summary>
            <param name="accountRepository">Account仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.AddOne(HS.VIP.Management.Model.MAccount)">
            <summary>
            新增一条Account记录
            </summary>
            <param name="model">Account数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MAccount})">
            <summary>
            批量新增Account数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.UpdateById(HS.VIP.Management.Model.MAccount)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MAccount})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 Account 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.GetOneModel(HS.VIP.Management.Model.MAccountCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MAccountCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.GetAllList(HS.VIP.Management.Model.MAccountCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.Export(HS.VIP.Management.Model.MAccountCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.CheckInfo(HS.VIP.Management.Model.MAccount,HS.VIP.Management.Model.MAccount)">
            <summary>
            检查Account数据有效性
            </summary>
            <param name="model">待检查Account数据模型</param>
            <param name="model">待检查Account已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.CardManagementService">
            <summary>
            CardManagement相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.#ctor(HS.VIP.Management.Repository.CardManagementRepository)">
            <summary>
            构造函数，通过依赖注入 CardManagement 仓储操作类
            </summary>
            <param name="cardManagementRepository">CardManagement仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.AddOne(HS.VIP.Management.Model.MCardManagement)">
            <summary>
            新增一条CardManagement记录
            </summary>
            <param name="model">CardManagement数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MCardManagement})">
            <summary>
            批量新增CardManagement数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.UpdateById(HS.VIP.Management.Model.MCardManagement)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MCardManagement})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 CardManagement 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.GetOneModel(HS.VIP.Management.Model.MCardManagementCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MCardManagementCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.GetAllList(HS.VIP.Management.Model.MCardManagementCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.Export(HS.VIP.Management.Model.MCardManagementCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.CheckInfo(HS.VIP.Management.Model.MCardManagement,HS.VIP.Management.Model.MCardManagement)">
            <summary>
            检查CardManagement数据有效性
            </summary>
            <param name="model">待检查CardManagement数据模型</param>
            <param name="model">待检查CardManagement已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.CorporationService">
            <summary>
            Corporation相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.#ctor(HS.VIP.Management.Repository.CorporationRepository)">
            <summary>
            构造函数，通过依赖注入 Corporation 仓储操作类
            </summary>
            <param name="corporationRepository">Corporation仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.AddOne(HS.VIP.Management.Model.MCorporation)">
            <summary>
            新增一条Corporation记录
            </summary>
            <param name="model">Corporation数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MCorporation})">
            <summary>
            批量新增Corporation数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.UpdateById(HS.VIP.Management.Model.MCorporation)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MCorporation})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 Corporation 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.GetOneModel(HS.VIP.Management.Model.MCorporationCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MCorporationCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.GetAllList(HS.VIP.Management.Model.MCorporationCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.Export(HS.VIP.Management.Model.MCorporationCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.CheckInfo(HS.VIP.Management.Model.MCorporation,HS.VIP.Management.Model.MCorporation)">
            <summary>
            检查Corporation数据有效性
            </summary>
            <param name="model">待检查Corporation数据模型</param>
            <param name="model">待检查Corporation已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.CustomerContractManagementService">
            <summary>
            CustomerContractManagement相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.#ctor(HS.VIP.Management.Repository.CustomerContractManagementRepository)">
            <summary>
            构造函数，通过依赖注入 CustomerContractManagement 仓储操作类
            </summary>
            <param name="customerContractManagementRepository">CustomerContractManagement仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.AddOne(HS.VIP.Management.Model.MCustomerContractManagement)">
            <summary>
            新增一条CustomerContractManagement记录
            </summary>
            <param name="model">CustomerContractManagement数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MCustomerContractManagement})">
            <summary>
            批量新增CustomerContractManagement数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.UpdateById(HS.VIP.Management.Model.MCustomerContractManagement)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MCustomerContractManagement})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 CustomerContractManagement 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.GetOneModel(HS.VIP.Management.Model.MCustomerContractManagementCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MCustomerContractManagementCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.GetAllList(HS.VIP.Management.Model.MCustomerContractManagementCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.Export(HS.VIP.Management.Model.MCustomerContractManagementCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.CheckInfo(HS.VIP.Management.Model.MCustomerContractManagement,HS.VIP.Management.Model.MCustomerContractManagement)">
            <summary>
            检查CustomerContractManagement数据有效性
            </summary>
            <param name="model">待检查CustomerContractManagement数据模型</param>
            <param name="model">待检查CustomerContractManagement已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.CustomerInformationRegistrationService">
            <summary>
            CustomerInformationRegistration相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.#ctor(HS.VIP.Management.Repository.CustomerInformationRegistrationRepository)">
            <summary>
            构造函数，通过依赖注入 CustomerInformationRegistration 仓储操作类
            </summary>
            <param name="customerInformationRegistrationRepository">CustomerInformationRegistration仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.AddOne(HS.VIP.Management.Model.MCustomerInformationRegistration)">
            <summary>
            新增一条CustomerInformationRegistration记录
            </summary>
            <param name="model">CustomerInformationRegistration数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MCustomerInformationRegistration})">
            <summary>
            批量新增CustomerInformationRegistration数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.UpdateById(HS.VIP.Management.Model.MCustomerInformationRegistration)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MCustomerInformationRegistration})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 CustomerInformationRegistration 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.GetOneModel(HS.VIP.Management.Model.MCustomerInformationRegistrationCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MCustomerInformationRegistrationCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.GetAllList(HS.VIP.Management.Model.MCustomerInformationRegistrationCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.Export(HS.VIP.Management.Model.MCustomerInformationRegistrationCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.CheckInfo(HS.VIP.Management.Model.MCustomerInformationRegistration,HS.VIP.Management.Model.MCustomerInformationRegistration)">
            <summary>
            检查CustomerInformationRegistration数据有效性
            </summary>
            <param name="model">待检查CustomerInformationRegistration数据模型</param>
            <param name="model">待检查CustomerInformationRegistration已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.service.CustomerManagerment.imp.OrderService">
            <summary>
            test相关服务
            </summary>
        </member>
        <member name="T:HS.VIP.Management.Service.service.CustomerManagerment.imp.TestService2">
            <summary>
            test相关服务
            </summary>
        </member>
        <member name="T:HS.VIP.Management.Service.DictionaryService">
            <summary>
            Dictionary相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.#ctor(HS.VIP.Management.Repository.DictionaryRepository)">
            <summary>
            构造函数，通过依赖注入 Dictionary 仓储操作类
            </summary>
            <param name="dictionaryRepository">Dictionary仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.AddOne(HS.VIP.Management.Model.MDictionary)">
            <summary>
            新增一条Dictionary记录
            </summary>
            <param name="model">Dictionary数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MDictionary})">
            <summary>
            批量新增Dictionary数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.UpdateById(HS.VIP.Management.Model.MDictionary)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MDictionary})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 Dictionary 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.GetOneModel(HS.VIP.Management.Model.MDictionaryCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MDictionaryCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.GetAllList(HS.VIP.Management.Model.MDictionaryCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.Export(HS.VIP.Management.Model.MDictionaryCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.CheckInfo(HS.VIP.Management.Model.MDictionary,HS.VIP.Management.Model.MDictionary)">
            <summary>
            检查Dictionary数据有效性
            </summary>
            <param name="model">待检查Dictionary数据模型</param>
            <param name="model">待检查Dictionary已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.API.Service.OpertService">
            <summary>
            帮助类
            </summary>
        </member>
        <member name="M:HS.API.Service.OpertService.TypeAllAutoFillFieldDataSource">
            <summary>
            初始化自动填充字段数据源
            </summary>
        </member>
        <member name="T:HS.API.Service.ServiceBase">
            <summary>
            业务服务基类
            </summary>
        </member>
        <member name="F:HS.API.Service.ServiceBase.accessor">
            <summary>
            请求上下文
            </summary>
        </member>
        <member name="F:HS.API.Service.ServiceBase.mSystemLog">
            <summary>
            审计日志对象
            </summary>
        </member>
        <member name="M:HS.API.Service.ServiceBase.#ctor">
            <summary>
            构造函数，通过依赖注入 Flight仓储操作类
            </summary>
        </member>
        <member name="M:HS.API.Service.ServiceBase.AddOneSystemLog">
            <summary>
            记录日志 在具体实现上，可以根据自己项目实际情况做自定义实现
            </summary>
        </member>
    </members>
</doc>
