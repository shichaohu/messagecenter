<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HS.Message.Service</name>
    </assembly>
    <members>
        <member name="T:HS.Message.Service.base.BaseService`2">
            <summary>
            业务服务base接口
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TCondition"></typeparam>
        </member>
        <member name="F:HS.Message.Service.base.BaseService`2._moduleName">
            <summary>
            操作表
            </summary>
        </member>
        <member name="P:HS.Message.Service.base.BaseService`2._baseRepository">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.Message.Service.base.BaseService`2.#ctor(HS.Message.Repository.repository.base.core.IRepository{`0,`1},HS.Message.Service.base.IInjectedObjects,System.String)">
            <summary>
            
            </summary>
            <param name="repository"></param>
            <param name="injectedObjects"></param>
            <param name="moduleName">模块名称</param>
        </member>
        <member name="M:HS.Message.Service.base.BaseService`2.CheckInfoBase(`0,`0)">
            <summary>
            检查TModel数据有效性
            </summary>
            <param name="model">待检查数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.Message.Service.base.BaseService`2.CheckInfo(`0,`0)">
            <summary>
            检查TModel数据有效性
            </summary>
            <param name="model">待检查数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.Message.Service.base.BaseService`2.GetTotalCountAsync(`1)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Service.base.BaseService`2.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},`0@,`0@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="M:HS.Message.Service.base.BaseService`2.GetAllFields(System.String[])">
            <summary>
            获取表全部字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Service.base.BaseService`2.AddOneAsync(`0)">
            <summary>
            新增一条Test记录
            </summary>
            <param name="model">Test数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.Message.Service.base.BaseService`2.BactchAddAsync(System.Collections.Generic.List{`0})">
            <summary>
            批量新增数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.Message.Service.base.BaseService`2.DeleteByIdAsync(System.String)">
            <summary>
            根据logical_id删除数据
            </summary>
            <param name="logical_id">logical_id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Service.base.BaseService`2.BactchDeleteByIdListAsync(System.Collections.Generic.List{System.String})">
            <summary>
            根据logical_id集合批量删除数据
            </summary>
            <param name="idList">logical_id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Service.base.BaseService`2.UpdateByIdAsync(`0)">
            <summary>
            根据logical_id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Service.base.BaseService`2.BactchUpdateByIdAsync(System.Collections.Generic.List{`0})">
            <summary>
            根据logical_id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Service.base.BaseService`2.UpdateDynamicAsync(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 test 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Service.base.BaseService`2.BactchUpdateDynamicAsync(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Service.base.BaseService`2.BactchUpdateSpecifyFieldsByIdAsync(HS.Message.Share.BaseModel.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">logical_id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Service.base.BaseService`2.GetModelByIdAsync(System.String,System.String)">
            <summary>
            根据logical_id获取一个模型数据
            </summary>
            <param name="logical_id">logical_id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Service.base.BaseService`2.GetOneModelAsync(`1)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Service.base.BaseService`2.GetAllListByIdListAsync(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Service.base.BaseService`2.GetPageListAsync(HS.Message.Share.BaseModel.MPageQueryCondition{`1})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.Message.Service.base.BaseService`2.GetAllListAsync(`1)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="T:HS.Message.Service.base.IBaseService`2">
            <summary>
            业务服务base接口
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TCondition"></typeparam>
        </member>
        <member name="M:HS.Message.Service.base.IBaseService`2.GetTotalCountAsync(`1)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Service.base.IBaseService`2.AddOneAsync(`0)">
            <summary>
            新增一条Test记录
            </summary>
            <param name="model">Test数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.Message.Service.base.IBaseService`2.BactchAddAsync(System.Collections.Generic.List{`0})">
            <summary>
            批量新增Test数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.Message.Service.base.IBaseService`2.DeleteByIdAsync(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Service.base.IBaseService`2.BactchDeleteByIdListAsync(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Service.base.IBaseService`2.UpdateByIdAsync(`0)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Service.base.IBaseService`2.BactchUpdateByIdAsync(System.Collections.Generic.List{`0})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Service.base.IBaseService`2.UpdateDynamicAsync(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 test 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Service.base.IBaseService`2.BactchUpdateDynamicAsync(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Service.base.IBaseService`2.BactchUpdateSpecifyFieldsByIdAsync(HS.Message.Share.BaseModel.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Service.base.IBaseService`2.GetModelByIdAsync(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Service.base.IBaseService`2.GetOneModelAsync(`1)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Service.base.IBaseService`2.GetAllListByIdListAsync(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Service.base.IBaseService`2.GetPageListAsync(HS.Message.Share.BaseModel.MPageQueryCondition{`1})">
            <summary>
            分页获取数据
            </summary>
            <param name="pageQueryCondition"></param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.Message.Service.base.IBaseService`2.GetAllListAsync(`1)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="T:HS.Message.Service.base.IInjectedObjects">
            <summary>
            公告注入对象包
            </summary>
        </member>
        <member name="P:HS.Message.Service.base.IInjectedObjects.Accessor">
            <summary>
            请求上下文
            </summary>
        </member>
        <member name="P:HS.Message.Service.base.IInjectedObjects.HttpContextInfo">
            <summary>
            请求上下文信息（用户信息）
            </summary>
        </member>
        <member name="T:HS.Message.Service.base.ServiceInjectedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="P:HS.Message.Service.base.ServiceInjectedObjects.Accessor">
            <summary>
            请求上下文
            </summary>
        </member>
        <member name="P:HS.Message.Service.base.ServiceInjectedObjects.HttpContextInfo">
            <summary>
            请求上下文信息（用户信息）
            </summary>
        </member>
        <member name="M:HS.Message.Service.base.ServiceInjectedObjects.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,HS.Message.Share.Http.HttpContextInfo)">
            <summary>
            
            </summary>
            <param name="mediator"></param>
            <param name="accessor"></param>
            <param name="httpContextInfo"></param>
        </member>
        <member name="T:HS.Message.Service.core.IMailConfigureService">
            <summary>
            邮件配置服务
            </summary>
        </member>
        <member name="T:HS.Message.Service.core.IMailMessageService">
            <summary>
            邮件服务
            </summary>
        </member>
        <member name="T:HS.Message.Service.core.IMailSendLogsService">
            <summary>
            邮件发送日志服务
            </summary>
        </member>
        <member name="T:HS.Message.Service.core.IMailTemplateService">
            <summary>
            邮件模板服务
            </summary>
        </member>
        <member name="T:HS.Message.Service.core.IMessageReceiverService">
            <summary>
            消息接收人服务
            </summary>
        </member>
        <member name="T:HS.Message.Service.core.IMessageSendService">
            <summary>
            消息发送服务
            </summary>
        </member>
        <member name="M:HS.Message.Service.core.IMessageSendService.RunAsync">
            <summary>
            发送消息
            </summary>
            <returns></returns>
        </member>
        <member name="T:HS.Message.Service.core.IMessageService">
            <summary>
            消息服务
            </summary>
        </member>
        <member name="M:HS.Message.Service.core.IMessageService.SendMessageAsync(System.Collections.Generic.List{HS.Message.Model.Requests.MessageRequest})">
            <summary>
            发送消息
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:HS.Message.Service.core.imp.MailConfigureService">
            <summary>
            邮件配置相关服务
            </summary>
        </member>
        <member name="M:HS.Message.Service.core.imp.MailConfigureService.#ctor(HS.Message.Repository.repository.core.IMailConfigureRepository{HS.Message.Model.MMailConfigure,HS.Message.Model.MMailConfigureCondtion},HS.Message.Service.base.IInjectedObjects,HS.Message.Share.Redis.IDistributedCache)">
            <summary>
            字典相关服务
            </summary>
            <param name="mailConfigureRepository"></param>
            <param name="injectedObjects"></param>
            <param name="cache"></param>
        </member>
        <member name="T:HS.Message.Service.core.imp.MailMessageService">
            <summary>
            邮件消息相关服务
            </summary>
        </member>
        <member name="M:HS.Message.Service.core.imp.MailMessageService.#ctor(HS.Message.Repository.repository.core.IMailMessageRepository{HS.Message.Model.MMailMessage,HS.Message.Model.MMailMessageCondtion},HS.Message.Service.base.IInjectedObjects,HS.Message.Share.Redis.IDistributedCache)">
            <summary>
            字典相关服务
            </summary>
            <param name="mailMessageRepository"></param>
            <param name="injectedObjects"></param>
            <param name="cache"></param>
        </member>
        <member name="T:HS.Message.Service.core.imp.MailSendLogsService">
            <summary>
            邮件发送日志服务
            </summary>
        </member>
        <member name="M:HS.Message.Service.core.imp.MailSendLogsService.#ctor(HS.Message.Repository.repository.core.IMailSendLogsRepository{HS.Message.Model.MMailSendLogs,HS.Message.Model.MMailSendLogsCondtion},HS.Message.Service.base.IInjectedObjects,HS.Message.Share.Redis.IDistributedCache)">
            <summary>
            字典相关服务
            </summary>
            <param name="mailSendLogsRepository"></param>
            <param name="injectedObjects"></param>
            <param name="cache"></param>
        </member>
        <member name="T:HS.Message.Service.core.imp.MailTemplateService">
            <summary>
            邮件模板服务
            </summary>
        </member>
        <member name="M:HS.Message.Service.core.imp.MailTemplateService.#ctor(HS.Message.Repository.repository.core.IMailTemplateRepository{HS.Message.Model.MMailTemplate,HS.Message.Model.MMailTemplateCondtion},HS.Message.Service.base.IInjectedObjects,HS.Message.Share.Redis.IDistributedCache)">
            <summary>
            字典相关服务
            </summary>
            <param name="mailTemplateRepository"></param>
            <param name="injectedObjects"></param>
            <param name="cache"></param>
        </member>
        <member name="T:HS.Message.Service.core.imp.MessageReceiverService">
            <summary>
            消息接收人服务
            </summary>
        </member>
        <member name="M:HS.Message.Service.core.imp.MessageReceiverService.#ctor(HS.Message.Repository.repository.core.IMessageReceiverRepository{HS.Message.Model.MMessageReceiver,HS.Message.Model.MMessageReceiverCondtion},HS.Message.Service.base.IInjectedObjects,HS.Message.Share.Redis.IDistributedCache)">
            <summary>
            字典相关服务
            </summary>
            <param name="messageReceiverRepository"></param>
            <param name="injectedObjects"></param>
            <param name="cache"></param>
        </member>
        <member name="T:HS.Message.Service.core.imp.MessageSendService">
            <summary>
            消息发送服务
            </summary>
        </member>
        <member name="M:HS.Message.Service.core.imp.MessageSendService.#ctor(HS.Message.Repository.repository.core.IMessageRepository{HS.Message.Model.MMessage,HS.Message.Model.MMessageCondtion},HS.Message.Service.core.IMessageReceiverService,HS.Message.Service.core.IMailConfigureService,HS.Message.Service.core.IMailMessageService,HS.Message.Service.core.IMailTemplateService,HS.Message.Service.core.ISmsConfigureService,HS.Message.Service.core.ISmsMessageService,HS.Message.Service.core.ISmsTemplateService,HS.Message.Service.base.IInjectedObjects,HS.Message.Share.Redis.IDistributedCache)">
            <summary>
            
            </summary>
            <param name="messageRepository"></param>
            <param name="messageReceiverService"></param>
            <param name="mailConfigureService"></param>
            <param name="mailMessageService"></param>
            <param name="mailTemplateService"></param>
            <param name="smsConfigureService"></param>
            <param name="smsTemplateService"></param>
            <param name="smsMessageService"></param>
            <param name="injectedObjects"></param>
            <param name="cache"></param>
        </member>
        <member name="M:HS.Message.Service.core.imp.MessageSendService.RunAsync">
            <summary>
            发送消息
            </summary>
            <returns></returns>
        </member>
        <member name="T:HS.Message.Service.core.imp.MessageService">
            <summary>
            消息服务
            </summary>
        </member>
        <member name="M:HS.Message.Service.core.imp.MessageService.#ctor(HS.Message.Repository.repository.core.IMessageRepository{HS.Message.Model.MMessage,HS.Message.Model.MMessageCondtion},HS.Message.Service.core.IMessageReceiverService,HS.Message.Service.core.IMailConfigureService,HS.Message.Service.core.IMailMessageService,HS.Message.Service.core.IMailTemplateService,HS.Message.Service.core.ISmsConfigureService,HS.Message.Service.core.ISmsMessageService,HS.Message.Service.core.ISmsTemplateService,HS.Message.Service.base.IInjectedObjects,HS.Message.Share.Redis.IDistributedCache)">
            <summary>
            
            </summary>
            <param name="messageRepository"></param>
            <param name="messageReceiverService"></param>
            <param name="mailConfigureService"></param>
            <param name="mailMessageService"></param>
            <param name="mailTemplateService"></param>
            <param name="smsConfigureService"></param>
            <param name="smsTemplateService"></param>
            <param name="smsMessageService"></param>
            <param name="injectedObjects"></param>
            <param name="cache"></param>
        </member>
        <member name="M:HS.Message.Service.core.imp.MessageService.SendMessageAsync(System.Collections.Generic.List{HS.Message.Model.Requests.MessageRequest})">
            <summary>
            发送消息
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:HS.Message.Service.core.imp.SmsConfigureService">
            <summary>
            短信配置服务
            </summary>
        </member>
        <member name="M:HS.Message.Service.core.imp.SmsConfigureService.#ctor(HS.Message.Repository.repository.core.ISmsConfigureRepository{HS.Message.Model.MSmsConfigure,HS.Message.Model.MSmsConfigureCondtion},HS.Message.Service.base.IInjectedObjects,HS.Message.Share.Redis.IDistributedCache)">
            <summary>
            
            </summary>
            <param name="smsConfigureRepository"></param>
            <param name="injectedObjects"></param>
            <param name="cache"></param>
        </member>
        <member name="T:HS.Message.Service.core.imp.SmsMessageDetailsService">
            <summary>
            短信消息详情服务
            </summary>
        </member>
        <member name="M:HS.Message.Service.core.imp.SmsMessageDetailsService.#ctor(HS.Message.Repository.repository.core.ISmsMessageDetailsRepository{HS.Message.Model.MSmsMessageDetails,HS.Message.Model.MSmsMessageDetailsCondtion},HS.Message.Service.base.IInjectedObjects,HS.Message.Share.Redis.IDistributedCache)">
            <summary>
            
            </summary>
            <param name="smsMessageDetailsRepository"></param>
            <param name="injectedObjects"></param>
            <param name="cache"></param>
        </member>
        <member name="T:HS.Message.Service.core.imp.SmsMessageService">
            <summary>
            短息服务
            </summary>
        </member>
        <member name="M:HS.Message.Service.core.imp.SmsMessageService.#ctor(HS.Message.Repository.repository.core.ISmsMessageRepository{HS.Message.Model.MSmsMessage,HS.Message.Model.MSmsMessageCondtion},HS.Message.Service.base.IInjectedObjects,HS.Message.Share.Redis.IDistributedCache)">
            <summary>
            
            </summary>
            <param name="smsMessageRepository"></param>
            <param name="injectedObjects"></param>
            <param name="cache"></param>
        </member>
        <member name="T:HS.Message.Service.core.imp.SmsTemplateService">
            <summary>
            短息模板服务
            </summary>
        </member>
        <member name="M:HS.Message.Service.core.imp.SmsTemplateService.#ctor(HS.Message.Repository.repository.core.ISmsTemplateRepository{HS.Message.Model.MSmsTemplate,HS.Message.Model.MSmsTemplateCondtion},HS.Message.Service.base.IInjectedObjects,HS.Message.Share.Redis.IDistributedCache)">
            <summary>
            
            </summary>
            <param name="smsTemplateRepository"></param>
            <param name="injectedObjects"></param>
            <param name="cache"></param>
        </member>
        <member name="T:HS.Message.Service.core.ISmsConfigureService">
            <summary>
            短息配置服务
            </summary>
        </member>
        <member name="T:HS.Message.Service.core.ISmsMessageDetailsService">
            <summary>
            短息详情
            </summary>
        </member>
        <member name="T:HS.Message.Service.core.ISmsMessageService">
            <summary>
            短息服务
            </summary>
        </member>
        <member name="T:HS.Message.Service.core.ISmsTemplateService">
            <summary>
            短息模板服务
            </summary>
        </member>
        <member name="T:HS.Message.Service.tools.AliyunSMSTool">
            <summary>
            阿里云短信
            </summary>
        </member>
        <member name="M:HS.Message.Service.tools.AliyunSMSTool.MsmSend(HS.Message.Model.MSmsMessage)">
            <summary>
            短信发送
            </summary>
            <param name="smsInfo"></param>
        </member>
        <member name="M:HS.Message.Service.tools.AliyunSMSTool.QuerySendDetails(HS.Message.Model.MSmsMessage)">
            <summary>
            查询短信发送结果
            </summary>
            <param name="smsInfo"></param>
            <returns></returns>
        </member>
        <member name="T:HS.Message.Service.tools.SendingMailTool">
            <summary>
            发送邮件工具
            </summary>
        </member>
        <member name="M:HS.Message.Service.tools.SendingMailTool.#ctor(HS.Message.Repository.repository.core.IMessageRepository{HS.Message.Model.MMessage,HS.Message.Model.MMessageCondtion},HS.Message.Service.core.IMailMessageService,HS.Message.Service.core.IMailSendLogsService,Microsoft.Extensions.Logging.ILogger{HS.Message.Service.tools.SendingMailTool})">
            <summary>
            
            </summary>
            <param name="messageRepository"></param>
            <param name="mailMessageService"></param>
            <param name="mailSendLogsService"></param>
            <param name="logger"></param>
        </member>
        <member name="M:HS.Message.Service.tools.SendingMailTool.SendMailBySmtpClient(HS.Message.Model.MMailMessage)">
            <summary>
            使用SmtpClient发送邮件，单发
            （部分平台弃用）
            </summary>
            <param name="sendInfo">发送的邮件内容</param>
            <Codeurns>发送结果</Codeurns>
        </member>
        <member name="M:HS.Message.Service.tools.SendingMailTool.SendMailBySmtpClientMassed(HS.Message.Model.MMailMessage)">
            <summary>
            使用SmtpClient发送邮件，群发
            （部分平台弃用）
            </summary>
            <param name="sendInfo">发送的邮件内容</param>
            <Codeurns>发送结果</Codeurns>
        </member>
        <member name="M:HS.Message.Service.tools.SendingMailTool.SendMailByMailKit(HS.Message.Model.MMailMessage)">
            <summary>
            使用MailKit发送邮件
            </summary>
            <param name="sendInfo">发送的邮件内容</param>
            <Codeurns>发送结果</Codeurns>
        </member>
        <member name="M:HS.Message.Service.tools.SendingMailTool.DoSendMailResult(HS.Message.Model.MMailMessage,System.String,System.String,HS.Message.Share.BaseModel.BaseResponse)">
            <summary>
            邮件发送成功后，需要更新对应的消息表数据+落地一条发送日志信息
            </summary>
            <param name="sendInfo">发送邮件主体信息</param>
            <param name="receiveAddress">消息接受者地址</param>
            <param name="receiveCCAddress">抄送地址</param>
            <param name="result">发送结果</param>
        </member>
        <member name="T:HS.Message.Service.tools.SMSParameter">
            <summary>
            SMS公共参数
            </summary>
        </member>
        <member name="M:HS.Message.Service.tools.SMSParameter.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:HS.Message.Service.tools.SMSParameter.AliyunSmsAccessKeyId">
            <summary>
            阿里云短信配置 AccessKey
            </summary>
        </member>
        <member name="P:HS.Message.Service.tools.SMSParameter.AliyunSmsAccessKeySecret">
            <summary>
            阿里云短信配置 AccessKey Secret	
            </summary>
        </member>
        <member name="P:HS.Message.Service.tools.SMSParameter.AliyunSmsSignName">
            <summary>
            阿里云短信签名名称
            </summary>
        </member>
        <member name="P:HS.Message.Service.tools.SMSParameter.AliyunSmsTemplateCode">
            <summary>
            阿里云短信模板id
            </summary>
        </member>
        <member name="T:XYH.Message.Server.Service.JobExectBase">
            <summary>
            定时任务执行基类
            </summary>
        </member>
        <member name="F:XYH.Message.Server.Service.JobExectBase.headerKeyValue">
            <summary>
            听取头 token
            </summary>
        </member>
        <member name="F:XYH.Message.Server.Service.JobExectBase.job_id">
            <summary>
            执行的任务id
            </summary>
        </member>
        <member name="M:XYH.Message.Server.Service.JobExectBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XYH.Message.Server.Service.JobExectBase.Execute(Quartz.IJobExecutionContext)">
            <summary>
            具体执行方法
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:XYH.Message.Server.Service.JobExectBase.Start">
            <summary>
            开始执行方法体
            </summary>
        </member>
        <member name="M:XYH.Message.Server.Service.JobExectBase.Execute">
            <summary>
            异步调度具体执行业务逻辑
            </summary>
        </member>
        <member name="T:XYH.Message.Server.Service.JobMain">
            <summary>
            job入口
            </summary>
        </member>
        <member name="F:XYH.Message.Server.Service.JobMain.scheduler">
            <summary>
             调度器
            </summary>
        </member>
        <member name="M:XYH.Message.Server.Service.JobMain.Start">
            <summary>
            启动
            </summary>
            <returns></returns>
        </member>
        <member name="M:XYH.Message.Server.Service.JobMain.StartJob">
            <summary>
            创建调度任务的公共调用中心
            </summary>
            <returns></returns>
        </member>
        <member name="M:XYH.Message.Server.Service.JobMain.CreateJob``1(System.String,System.String,System.String,System.Int32)">
            <summary>
            创建运行的调度器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="group"></param>
            <param name="cronTime"></param>
            <returns></returns>
        </member>
        <member name="M:XYH.Message.Server.Service.JobMain.Stop">
            <summary>
            停止调度器            
            </summary>
        </member>
        <member name="T:XYH.Message.Server.Service.SmsQueryTaskJob">
            <summary>
             CheckTaskJob
            </summary>
        </member>
        <member name="M:XYH.Message.Server.Service.SmsQueryTaskJob.#ctor(HS.Message.Service.tools.AliyunSMSTool,HS.Message.Service.core.ISmsMessageService,Microsoft.Extensions.Logging.Logger{XYH.Message.Server.Service.SmsQueryTaskJob})">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XYH.Message.Server.Service.SmsQueryTaskJob.Execute">
            <summary>
            开始执行方法体
            </summary>
        </member>
        <member name="T:XYH.Message.Server.Service.SmsQueryUnLockTaskJob">
            <summary>
             短信查询锁定解锁任务
            </summary>
        </member>
        <member name="M:XYH.Message.Server.Service.SmsQueryUnLockTaskJob.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XYH.Message.Server.Service.SmsQueryUnLockTaskJob.Execute">
            <summary>
            开始执行方法体
            </summary>
        </member>
        <member name="T:XYH.Message.Server.Service.SmsSendFailTaskJob">
            <summary>
             短信查询锁定解锁任务
            </summary>
        </member>
        <member name="M:XYH.Message.Server.Service.SmsSendFailTaskJob.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XYH.Message.Server.Service.SmsSendFailTaskJob.Execute">
            <summary>
            开始执行方法体
            </summary>
        </member>
    </members>
</doc>
