<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HS.VIP.Management.Service</name>
    </assembly>
    <members>
        <member name="T:HS.VIP.Management.Service.AccompanyingPersonInformationBaseService">
            <summary>
            AccompanyingPersonInformation相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.AccompanyingPersonInformationBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.AccompanyingPersonInformationBaseService.accompanyingPersonInformationRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationBaseService.#ctor(HS.VIP.Management.Repository.AccompanyingPersonInformationRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationBaseService.CheckInfo(HS.VIP.Management.Model.MAccompanyingPersonInformation,HS.VIP.Management.Model.MAccompanyingPersonInformation)">
            <summary>
            检查AccompanyingPersonInformation数据有效性
            </summary>
            <param name="model">待检查AccompanyingPersonInformation数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationBaseService.GetTotalCount(HS.VIP.Management.Model.MAccompanyingPersonInformationCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MAccompanyingPersonInformation@,HS.VIP.Management.Model.MAccompanyingPersonInformation@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.AccountBaseService">
            <summary>
            Account相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.AccountBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.AccountBaseService.accountRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountBaseService.#ctor(HS.VIP.Management.Repository.AccountRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountBaseService.CheckInfo(HS.VIP.Management.Model.MAccount,HS.VIP.Management.Model.MAccount)">
            <summary>
            检查Account数据有效性
            </summary>
            <param name="model">待检查Account数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountBaseService.GetTotalCount(HS.VIP.Management.Model.MAccountCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MAccount@,HS.VIP.Management.Model.MAccount@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.AirlinecompanyInfoBaseService">
            <summary>
            AirlinecompanyInfo相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.AirlinecompanyInfoBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.AirlinecompanyInfoBaseService.airlinecompanyInfoRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.AirlinecompanyInfoBaseService.#ctor(HS.VIP.Management.Repository.AirlinecompanyInfoRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.AirlinecompanyInfoBaseService.CheckInfo(HS.VIP.Management.Model.MAirlinecompanyInfo,HS.VIP.Management.Model.MAirlinecompanyInfo)">
            <summary>
            检查AirlinecompanyInfo数据有效性
            </summary>
            <param name="model">待检查AirlinecompanyInfo数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirlinecompanyInfoBaseService.GetTotalCount(HS.VIP.Management.Model.MAirlinecompanyInfoCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirlinecompanyInfoBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MAirlinecompanyInfo@,HS.VIP.Management.Model.MAirlinecompanyInfo@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.AirportInformationManagementBaseService">
            <summary>
            AirportInformationManagement相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.AirportInformationManagementBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.AirportInformationManagementBaseService.airportInformationManagementRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.AirportInformationManagementBaseService.#ctor(HS.VIP.Management.Repository.AirportInformationManagementRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.AirportInformationManagementBaseService.CheckInfo(HS.VIP.Management.Model.MAirportInformationManagement,HS.VIP.Management.Model.MAirportInformationManagement)">
            <summary>
            检查AirportInformationManagement数据有效性
            </summary>
            <param name="model">待检查AirportInformationManagement数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirportInformationManagementBaseService.GetTotalCount(HS.VIP.Management.Model.MAirportInformationManagementCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirportInformationManagementBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MAirportInformationManagement@,HS.VIP.Management.Model.MAirportInformationManagement@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.AreaConsumableStocksBaseService">
            <summary>
            AreaConsumableStocks相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.AreaConsumableStocksBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.AreaConsumableStocksBaseService.areaConsumableStocksRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.AreaConsumableStocksBaseService.#ctor(HS.VIP.Management.Repository.AreaConsumableStocksRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.AreaConsumableStocksBaseService.CheckInfo(HS.VIP.Management.Model.MAreaConsumableStocks,HS.VIP.Management.Model.MAreaConsumableStocks)">
            <summary>
            检查AreaConsumableStocks数据有效性
            </summary>
            <param name="model">待检查AreaConsumableStocks数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AreaConsumableStocksBaseService.GetTotalCount(HS.VIP.Management.Model.MAreaConsumableStocksCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AreaConsumableStocksBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MAreaConsumableStocks@,HS.VIP.Management.Model.MAreaConsumableStocks@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.BusinessJetFlightInformationManagementBaseService">
            <summary>
            BusinessJetFlightInformationManagement相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.BusinessJetFlightInformationManagementBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.BusinessJetFlightInformationManagementBaseService.businessJetFlightInformationManagementRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementBaseService.#ctor(HS.VIP.Management.Repository.BusinessJetFlightInformationManagementRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementBaseService.CheckInfo(HS.VIP.Management.Model.MBusinessJetFlightInformationManagement,HS.VIP.Management.Model.MBusinessJetFlightInformationManagement)">
            <summary>
            检查BusinessJetFlightInformationManagement数据有效性
            </summary>
            <param name="model">待检查BusinessJetFlightInformationManagement数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementBaseService.GetTotalCount(HS.VIP.Management.Model.MBusinessJetFlightInformationManagementCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MBusinessJetFlightInformationManagement@,HS.VIP.Management.Model.MBusinessJetFlightInformationManagement@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.BusinessJetOrderManagementBaseService">
            <summary>
            BusinessJetOrderManagement相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.BusinessJetOrderManagementBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.BusinessJetOrderManagementBaseService.businessJetOrderManagementRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementBaseService.#ctor(HS.VIP.Management.Repository.BusinessJetOrderManagementRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementBaseService.CheckInfo(HS.VIP.Management.Model.MBusinessJetOrderManagement,HS.VIP.Management.Model.MBusinessJetOrderManagement)">
            <summary>
            检查BusinessJetOrderManagement数据有效性
            </summary>
            <param name="model">待检查BusinessJetOrderManagement数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementBaseService.GetTotalCount(HS.VIP.Management.Model.MBusinessJetOrderManagementCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MBusinessJetOrderManagement@,HS.VIP.Management.Model.MBusinessJetOrderManagement@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsBaseService">
            <summary>
            BusinessJetOrderManagementDetails相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsBaseService.businessJetOrderManagementDetailsRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsBaseService.#ctor(HS.VIP.Management.Repository.BusinessJetOrderManagementDetailsRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsBaseService.CheckInfo(HS.VIP.Management.Model.MBusinessJetOrderManagementDetails,HS.VIP.Management.Model.MBusinessJetOrderManagementDetails)">
            <summary>
            检查BusinessJetOrderManagementDetails数据有效性
            </summary>
            <param name="model">待检查BusinessJetOrderManagementDetails数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsBaseService.GetTotalCount(HS.VIP.Management.Model.MBusinessJetOrderManagementDetailsCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MBusinessJetOrderManagementDetails@,HS.VIP.Management.Model.MBusinessJetOrderManagementDetails@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.CardManagementBaseService">
            <summary>
            CardManagement相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.CardManagementBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.CardManagementBaseService.cardManagementRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementBaseService.#ctor(HS.VIP.Management.Repository.CardManagementRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementBaseService.CheckInfo(HS.VIP.Management.Model.MCardManagement,HS.VIP.Management.Model.MCardManagement)">
            <summary>
            检查CardManagement数据有效性
            </summary>
            <param name="model">待检查CardManagement数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementBaseService.GetTotalCount(HS.VIP.Management.Model.MCardManagementCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MCardManagement@,HS.VIP.Management.Model.MCardManagement@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.CardSalesRecordBaseService">
            <summary>
            CardSalesRecord相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.CardSalesRecordBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.CardSalesRecordBaseService.cardSalesRecordRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CardSalesRecordBaseService.#ctor(HS.VIP.Management.Repository.CardSalesRecordRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CardSalesRecordBaseService.CheckInfo(HS.VIP.Management.Model.MCardSalesRecord,HS.VIP.Management.Model.MCardSalesRecord)">
            <summary>
            检查CardSalesRecord数据有效性
            </summary>
            <param name="model">待检查CardSalesRecord数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardSalesRecordBaseService.GetTotalCount(HS.VIP.Management.Model.MCardSalesRecordCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardSalesRecordBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MCardSalesRecord@,HS.VIP.Management.Model.MCardSalesRecord@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.CardTransactionBaseService">
            <summary>
            CardTransaction相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.CardTransactionBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.CardTransactionBaseService.cardTransactionRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CardTransactionBaseService.#ctor(HS.VIP.Management.Repository.CardTransactionRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CardTransactionBaseService.CheckInfo(HS.VIP.Management.Model.MCardTransaction,HS.VIP.Management.Model.MCardTransaction)">
            <summary>
            检查CardTransaction数据有效性
            </summary>
            <param name="model">待检查CardTransaction数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardTransactionBaseService.GetTotalCount(HS.VIP.Management.Model.MCardTransactionCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardTransactionBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MCardTransaction@,HS.VIP.Management.Model.MCardTransaction@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.ConsumableInformationBaseService">
            <summary>
            ConsumableInformation相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.ConsumableInformationBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.ConsumableInformationBaseService.consumableInformationRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationBaseService.#ctor(HS.VIP.Management.Repository.ConsumableInformationRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationBaseService.CheckInfo(HS.VIP.Management.Model.MConsumableInformation,HS.VIP.Management.Model.MConsumableInformation)">
            <summary>
            检查ConsumableInformation数据有效性
            </summary>
            <param name="model">待检查ConsumableInformation数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationBaseService.GetTotalCount(HS.VIP.Management.Model.MConsumableInformationCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MConsumableInformation@,HS.VIP.Management.Model.MConsumableInformation@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.ConsumableInformationTypeBaseService">
            <summary>
            ConsumableInformationType相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.ConsumableInformationTypeBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.ConsumableInformationTypeBaseService.consumableInformationTypeRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationTypeBaseService.#ctor(HS.VIP.Management.Repository.ConsumableInformationTypeRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationTypeBaseService.CheckInfo(HS.VIP.Management.Model.MConsumableInformationType,HS.VIP.Management.Model.MConsumableInformationType)">
            <summary>
            检查ConsumableInformationType数据有效性
            </summary>
            <param name="model">待检查ConsumableInformationType数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationTypeBaseService.GetTotalCount(HS.VIP.Management.Model.MConsumableInformationTypeCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationTypeBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MConsumableInformationType@,HS.VIP.Management.Model.MConsumableInformationType@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.ContractBaseService">
            <summary>
            Contract相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.ContractBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.ContractBaseService.contractRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractBaseService.#ctor(HS.VIP.Management.Repository.ContractRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractBaseService.CheckInfo(HS.VIP.Management.Model.MContract,HS.VIP.Management.Model.MContract)">
            <summary>
            检查Contract数据有效性
            </summary>
            <param name="model">待检查Contract数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractBaseService.GetTotalCount(HS.VIP.Management.Model.MContractCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MContract@,HS.VIP.Management.Model.MContract@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.ContractDetailsBaseService">
            <summary>
            ContractDetails相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.ContractDetailsBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.ContractDetailsBaseService.contractDetailsRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractDetailsBaseService.#ctor(HS.VIP.Management.Repository.ContractDetailsRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractDetailsBaseService.CheckInfo(HS.VIP.Management.Model.MContractDetails,HS.VIP.Management.Model.MContractDetails)">
            <summary>
            检查ContractDetails数据有效性
            </summary>
            <param name="model">待检查ContractDetails数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractDetailsBaseService.GetTotalCount(HS.VIP.Management.Model.MContractDetailsCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractDetailsBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MContractDetails@,HS.VIP.Management.Model.MContractDetails@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.CorporationBaseService">
            <summary>
            Corporation相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.CorporationBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.CorporationBaseService.corporationRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationBaseService.#ctor(HS.VIP.Management.Repository.CorporationRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationBaseService.CheckInfo(HS.VIP.Management.Model.MCorporation,HS.VIP.Management.Model.MCorporation)">
            <summary>
            检查Corporation数据有效性
            </summary>
            <param name="model">待检查Corporation数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationBaseService.GetTotalCount(HS.VIP.Management.Model.MCorporationCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MCorporation@,HS.VIP.Management.Model.MCorporation@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.CustomerContractManagementBaseService">
            <summary>
            CustomerContractManagement相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.CustomerContractManagementBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.CustomerContractManagementBaseService.customerContractManagementRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementBaseService.#ctor(HS.VIP.Management.Repository.CustomerContractManagementRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementBaseService.CheckInfo(HS.VIP.Management.Model.MCustomerContractManagement,HS.VIP.Management.Model.MCustomerContractManagement)">
            <summary>
            检查CustomerContractManagement数据有效性
            </summary>
            <param name="model">待检查CustomerContractManagement数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementBaseService.GetTotalCount(HS.VIP.Management.Model.MCustomerContractManagementCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MCustomerContractManagement@,HS.VIP.Management.Model.MCustomerContractManagement@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.CustomerContractStepDiscountBaseService">
            <summary>
            CustomerContractStepDiscount相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.CustomerContractStepDiscountBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.CustomerContractStepDiscountBaseService.customerContractStepDiscountRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractStepDiscountBaseService.#ctor(HS.VIP.Management.Repository.CustomerContractStepDiscountRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractStepDiscountBaseService.CheckInfo(HS.VIP.Management.Model.MCustomerContractStepDiscount,HS.VIP.Management.Model.MCustomerContractStepDiscount)">
            <summary>
            检查CustomerContractStepDiscount数据有效性
            </summary>
            <param name="model">待检查CustomerContractStepDiscount数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractStepDiscountBaseService.GetTotalCount(HS.VIP.Management.Model.MCustomerContractStepDiscountCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractStepDiscountBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MCustomerContractStepDiscount@,HS.VIP.Management.Model.MCustomerContractStepDiscount@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.CustomerInformationRegistrationBaseService">
            <summary>
            CustomerInformationRegistration相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.CustomerInformationRegistrationBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.CustomerInformationRegistrationBaseService.customerInformationRegistrationRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationBaseService.#ctor(HS.VIP.Management.Repository.CustomerInformationRegistrationRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationBaseService.CheckInfo(HS.VIP.Management.Model.MCustomerInformationRegistration,HS.VIP.Management.Model.MCustomerInformationRegistration)">
            <summary>
            检查CustomerInformationRegistration数据有效性
            </summary>
            <param name="model">待检查CustomerInformationRegistration数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationBaseService.GetTotalCount(HS.VIP.Management.Model.MCustomerInformationRegistrationCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MCustomerInformationRegistration@,HS.VIP.Management.Model.MCustomerInformationRegistration@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.DictionaryBaseService">
            <summary>
            Dictionary相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.DictionaryBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.DictionaryBaseService.dictionaryRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryBaseService.#ctor(HS.VIP.Management.Repository.DictionaryRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryBaseService.CheckInfo(HS.VIP.Management.Model.MDictionary,HS.VIP.Management.Model.MDictionary)">
            <summary>
            检查Dictionary数据有效性
            </summary>
            <param name="model">待检查Dictionary数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryBaseService.GetTotalCount(HS.VIP.Management.Model.MDictionaryCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MDictionary@,HS.VIP.Management.Model.MDictionary@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.FilesManagementBaseService">
            <summary>
            FilesManagement相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.FilesManagementBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.FilesManagementBaseService.filesManagementRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.FilesManagementBaseService.#ctor(HS.VIP.Management.Repository.FilesManagementRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.FilesManagementBaseService.CheckInfo(HS.VIP.Management.Model.MFilesManagement,HS.VIP.Management.Model.MFilesManagement)">
            <summary>
            检查FilesManagement数据有效性
            </summary>
            <param name="model">待检查FilesManagement数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FilesManagementBaseService.GetTotalCount(HS.VIP.Management.Model.MFilesManagementCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FilesManagementBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MFilesManagement@,HS.VIP.Management.Model.MFilesManagement@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.FlightInquiryAndTrackingBaseService">
            <summary>
            FlightInquiryAndTracking相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.FlightInquiryAndTrackingBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.FlightInquiryAndTrackingBaseService.flightInquiryAndTrackingRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightInquiryAndTrackingBaseService.#ctor(HS.VIP.Management.Repository.FlightInquiryAndTrackingRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightInquiryAndTrackingBaseService.CheckInfo(HS.VIP.Management.Model.MFlightInquiryAndTracking,HS.VIP.Management.Model.MFlightInquiryAndTracking)">
            <summary>
            检查FlightInquiryAndTracking数据有效性
            </summary>
            <param name="model">待检查FlightInquiryAndTracking数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightInquiryAndTrackingBaseService.GetTotalCount(HS.VIP.Management.Model.MFlightInquiryAndTrackingCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightInquiryAndTrackingBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MFlightInquiryAndTracking@,HS.VIP.Management.Model.MFlightInquiryAndTracking@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.FlightScheduleInquiryBaseService">
            <summary>
            FlightScheduleInquiry相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.FlightScheduleInquiryBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.FlightScheduleInquiryBaseService.flightScheduleInquiryRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightScheduleInquiryBaseService.#ctor(HS.VIP.Management.Repository.FlightScheduleInquiryRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightScheduleInquiryBaseService.CheckInfo(HS.VIP.Management.Model.MFlightScheduleInquiry,HS.VIP.Management.Model.MFlightScheduleInquiry)">
            <summary>
            检查FlightScheduleInquiry数据有效性
            </summary>
            <param name="model">待检查FlightScheduleInquiry数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightScheduleInquiryBaseService.GetTotalCount(HS.VIP.Management.Model.MFlightScheduleInquiryCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightScheduleInquiryBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MFlightScheduleInquiry@,HS.VIP.Management.Model.MFlightScheduleInquiry@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.FrequentFlyerRecordBaseService">
            <summary>
            FrequentFlyerRecord相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.FrequentFlyerRecordBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.FrequentFlyerRecordBaseService.frequentFlyerRecordRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.FrequentFlyerRecordBaseService.#ctor(HS.VIP.Management.Repository.FrequentFlyerRecordRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.FrequentFlyerRecordBaseService.CheckInfo(HS.VIP.Management.Model.MFrequentFlyerRecord,HS.VIP.Management.Model.MFrequentFlyerRecord)">
            <summary>
            检查FrequentFlyerRecord数据有效性
            </summary>
            <param name="model">待检查FrequentFlyerRecord数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FrequentFlyerRecordBaseService.GetTotalCount(HS.VIP.Management.Model.MFrequentFlyerRecordCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FrequentFlyerRecordBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MFrequentFlyerRecord@,HS.VIP.Management.Model.MFrequentFlyerRecord@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.GuestPreferenceTipsBaseService">
            <summary>
            GuestPreferenceTips相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.GuestPreferenceTipsBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.GuestPreferenceTipsBaseService.guestPreferenceTipsRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.GuestPreferenceTipsBaseService.#ctor(HS.VIP.Management.Repository.GuestPreferenceTipsRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.GuestPreferenceTipsBaseService.CheckInfo(HS.VIP.Management.Model.MGuestPreferenceTips,HS.VIP.Management.Model.MGuestPreferenceTips)">
            <summary>
            检查GuestPreferenceTips数据有效性
            </summary>
            <param name="model">待检查GuestPreferenceTips数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.GuestPreferenceTipsBaseService.GetTotalCount(HS.VIP.Management.Model.MGuestPreferenceTipsCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.GuestPreferenceTipsBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MGuestPreferenceTips@,HS.VIP.Management.Model.MGuestPreferenceTips@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationBaseService">
            <summary>
            HallAndRoomInspectionManagementConfiguration相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationBaseService.hallAndRoomInspectionManagementConfigurationRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationBaseService.#ctor(HS.VIP.Management.Repository.HallAndRoomInspectionManagementConfigurationRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationBaseService.CheckInfo(HS.VIP.Management.Model.MHallAndRoomInspectionManagementConfiguration,HS.VIP.Management.Model.MHallAndRoomInspectionManagementConfiguration)">
            <summary>
            检查HallAndRoomInspectionManagementConfiguration数据有效性
            </summary>
            <param name="model">待检查HallAndRoomInspectionManagementConfiguration数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationBaseService.GetTotalCount(HS.VIP.Management.Model.MHallAndRoomInspectionManagementConfigurationCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MHallAndRoomInspectionManagementConfiguration@,HS.VIP.Management.Model.MHallAndRoomInspectionManagementConfiguration@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.HistoricalReservationInquiryBaseService">
            <summary>
            HistoricalReservationInquiry相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.HistoricalReservationInquiryBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.HistoricalReservationInquiryBaseService.historicalReservationInquiryRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.HistoricalReservationInquiryBaseService.#ctor(HS.VIP.Management.Repository.HistoricalReservationInquiryRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.HistoricalReservationInquiryBaseService.CheckInfo(HS.VIP.Management.Model.MHistoricalReservationInquiry,HS.VIP.Management.Model.MHistoricalReservationInquiry)">
            <summary>
            检查HistoricalReservationInquiry数据有效性
            </summary>
            <param name="model">待检查HistoricalReservationInquiry数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HistoricalReservationInquiryBaseService.GetTotalCount(HS.VIP.Management.Model.MHistoricalReservationInquiryCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HistoricalReservationInquiryBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MHistoricalReservationInquiry@,HS.VIP.Management.Model.MHistoricalReservationInquiry@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.InventoryOrderBaseService">
            <summary>
            InventoryOrder相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.InventoryOrderBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.InventoryOrderBaseService.inventoryOrderRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderBaseService.#ctor(HS.VIP.Management.Repository.InventoryOrderRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderBaseService.CheckInfo(HS.VIP.Management.Model.MInventoryOrder,HS.VIP.Management.Model.MInventoryOrder)">
            <summary>
            检查InventoryOrder数据有效性
            </summary>
            <param name="model">待检查InventoryOrder数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderBaseService.GetTotalCount(HS.VIP.Management.Model.MInventoryOrderCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MInventoryOrder@,HS.VIP.Management.Model.MInventoryOrder@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.InventoryOrderDetailsBaseService">
            <summary>
            InventoryOrderDetails相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.InventoryOrderDetailsBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.InventoryOrderDetailsBaseService.inventoryOrderDetailsRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderDetailsBaseService.#ctor(HS.VIP.Management.Repository.InventoryOrderDetailsRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderDetailsBaseService.CheckInfo(HS.VIP.Management.Model.MInventoryOrderDetails,HS.VIP.Management.Model.MInventoryOrderDetails)">
            <summary>
            检查InventoryOrderDetails数据有效性
            </summary>
            <param name="model">待检查InventoryOrderDetails数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderDetailsBaseService.GetTotalCount(HS.VIP.Management.Model.MInventoryOrderDetailsCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderDetailsBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MInventoryOrderDetails@,HS.VIP.Management.Model.MInventoryOrderDetails@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.MaterialsRequisitionBaseService">
            <summary>
            MaterialsRequisition相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.MaterialsRequisitionBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.MaterialsRequisitionBaseService.materialsRequisitionRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionBaseService.#ctor(HS.VIP.Management.Repository.MaterialsRequisitionRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionBaseService.CheckInfo(HS.VIP.Management.Model.MMaterialsRequisition,HS.VIP.Management.Model.MMaterialsRequisition)">
            <summary>
            检查MaterialsRequisition数据有效性
            </summary>
            <param name="model">待检查MaterialsRequisition数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionBaseService.GetTotalCount(HS.VIP.Management.Model.MMaterialsRequisitionCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MMaterialsRequisition@,HS.VIP.Management.Model.MMaterialsRequisition@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.MaterialsRequisitionDetailsBaseService">
            <summary>
            MaterialsRequisitionDetails相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.MaterialsRequisitionDetailsBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.MaterialsRequisitionDetailsBaseService.materialsRequisitionDetailsRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionDetailsBaseService.#ctor(HS.VIP.Management.Repository.MaterialsRequisitionDetailsRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionDetailsBaseService.CheckInfo(HS.VIP.Management.Model.MMaterialsRequisitionDetails,HS.VIP.Management.Model.MMaterialsRequisitionDetails)">
            <summary>
            检查MaterialsRequisitionDetails数据有效性
            </summary>
            <param name="model">待检查MaterialsRequisitionDetails数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionDetailsBaseService.GetTotalCount(HS.VIP.Management.Model.MMaterialsRequisitionDetailsCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionDetailsBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MMaterialsRequisitionDetails@,HS.VIP.Management.Model.MMaterialsRequisitionDetails@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.OfficeInspectionManagementBaseService">
            <summary>
            OfficeInspectionManagement相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.OfficeInspectionManagementBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.OfficeInspectionManagementBaseService.officeInspectionManagementRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementBaseService.#ctor(HS.VIP.Management.Repository.OfficeInspectionManagementRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementBaseService.CheckInfo(HS.VIP.Management.Model.MOfficeInspectionManagement,HS.VIP.Management.Model.MOfficeInspectionManagement)">
            <summary>
            检查OfficeInspectionManagement数据有效性
            </summary>
            <param name="model">待检查OfficeInspectionManagement数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementBaseService.GetTotalCount(HS.VIP.Management.Model.MOfficeInspectionManagementCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MOfficeInspectionManagement@,HS.VIP.Management.Model.MOfficeInspectionManagement@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.OfficeInspectionManagementDetailsBaseService">
            <summary>
            OfficeInspectionManagementDetails相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.OfficeInspectionManagementDetailsBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.OfficeInspectionManagementDetailsBaseService.officeInspectionManagementDetailsRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementDetailsBaseService.#ctor(HS.VIP.Management.Repository.OfficeInspectionManagementDetailsRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementDetailsBaseService.CheckInfo(HS.VIP.Management.Model.MOfficeInspectionManagementDetails,HS.VIP.Management.Model.MOfficeInspectionManagementDetails)">
            <summary>
            检查OfficeInspectionManagementDetails数据有效性
            </summary>
            <param name="model">待检查OfficeInspectionManagementDetails数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementDetailsBaseService.GetTotalCount(HS.VIP.Management.Model.MOfficeInspectionManagementDetailsCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementDetailsBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MOfficeInspectionManagementDetails@,HS.VIP.Management.Model.MOfficeInspectionManagementDetails@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.OrderingManagementBaseService">
            <summary>
            OrderingManagement相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.OrderingManagementBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.OrderingManagementBaseService.orderingManagementRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementBaseService.#ctor(HS.VIP.Management.Repository.OrderingManagementRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementBaseService.CheckInfo(HS.VIP.Management.Model.MOrderingManagement,HS.VIP.Management.Model.MOrderingManagement)">
            <summary>
            检查OrderingManagement数据有效性
            </summary>
            <param name="model">待检查OrderingManagement数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementBaseService.GetTotalCount(HS.VIP.Management.Model.MOrderingManagementCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MOrderingManagement@,HS.VIP.Management.Model.MOrderingManagement@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.OrderingManagementDetailsBaseService">
            <summary>
            OrderingManagementDetails相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.OrderingManagementDetailsBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.OrderingManagementDetailsBaseService.orderingManagementDetailsRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementDetailsBaseService.#ctor(HS.VIP.Management.Repository.OrderingManagementDetailsRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementDetailsBaseService.CheckInfo(HS.VIP.Management.Model.MOrderingManagementDetails,HS.VIP.Management.Model.MOrderingManagementDetails)">
            <summary>
            检查OrderingManagementDetails数据有效性
            </summary>
            <param name="model">待检查OrderingManagementDetails数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementDetailsBaseService.GetTotalCount(HS.VIP.Management.Model.MOrderingManagementDetailsCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementDetailsBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MOrderingManagementDetails@,HS.VIP.Management.Model.MOrderingManagementDetails@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.OrdersBaseService">
            <summary>
            Orders相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.OrdersBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.OrdersBaseService.ordersRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.OrdersBaseService.#ctor(HS.VIP.Management.Repository.OrdersRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.OrdersBaseService.CheckInfo(HS.VIP.Management.Model.MOrders,HS.VIP.Management.Model.MOrders)">
            <summary>
            检查Orders数据有效性
            </summary>
            <param name="model">待检查Orders数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrdersBaseService.GetTotalCount(HS.VIP.Management.Model.MOrdersCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrdersBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MOrders@,HS.VIP.Management.Model.MOrders@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.ParkingPositionRecommendationRulesBaseService">
            <summary>
            ParkingPositionRecommendationRules相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.ParkingPositionRecommendationRulesBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.ParkingPositionRecommendationRulesBaseService.parkingPositionRecommendationRulesRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ParkingPositionRecommendationRulesBaseService.#ctor(HS.VIP.Management.Repository.ParkingPositionRecommendationRulesRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ParkingPositionRecommendationRulesBaseService.CheckInfo(HS.VIP.Management.Model.MParkingPositionRecommendationRules,HS.VIP.Management.Model.MParkingPositionRecommendationRules)">
            <summary>
            检查ParkingPositionRecommendationRules数据有效性
            </summary>
            <param name="model">待检查ParkingPositionRecommendationRules数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ParkingPositionRecommendationRulesBaseService.GetTotalCount(HS.VIP.Management.Model.MParkingPositionRecommendationRulesCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ParkingPositionRecommendationRulesBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MParkingPositionRecommendationRules@,HS.VIP.Management.Model.MParkingPositionRecommendationRules@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.PersonnelAndCarAllocationBaseService">
            <summary>
            PersonnelAndCarAllocation相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.PersonnelAndCarAllocationBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.PersonnelAndCarAllocationBaseService.personnelAndCarAllocationRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationBaseService.#ctor(HS.VIP.Management.Repository.PersonnelAndCarAllocationRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationBaseService.CheckInfo(HS.VIP.Management.Model.MPersonnelAndCarAllocation,HS.VIP.Management.Model.MPersonnelAndCarAllocation)">
            <summary>
            检查PersonnelAndCarAllocation数据有效性
            </summary>
            <param name="model">待检查PersonnelAndCarAllocation数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationBaseService.GetTotalCount(HS.VIP.Management.Model.MPersonnelAndCarAllocationCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MPersonnelAndCarAllocation@,HS.VIP.Management.Model.MPersonnelAndCarAllocation@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.PurchaseSettlementBaseService">
            <summary>
            PurchaseSettlement相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.PurchaseSettlementBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.PurchaseSettlementBaseService.purchaseSettlementRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchaseSettlementBaseService.#ctor(HS.VIP.Management.Repository.PurchaseSettlementRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchaseSettlementBaseService.CheckInfo(HS.VIP.Management.Model.MPurchaseSettlement,HS.VIP.Management.Model.MPurchaseSettlement)">
            <summary>
            检查PurchaseSettlement数据有效性
            </summary>
            <param name="model">待检查PurchaseSettlement数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchaseSettlementBaseService.GetTotalCount(HS.VIP.Management.Model.MPurchaseSettlementCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchaseSettlementBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MPurchaseSettlement@,HS.VIP.Management.Model.MPurchaseSettlement@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.PurchasingPlanBaseService">
            <summary>
            PurchasingPlan相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.PurchasingPlanBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.PurchasingPlanBaseService.purchasingPlanRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanBaseService.#ctor(HS.VIP.Management.Repository.PurchasingPlanRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanBaseService.CheckInfo(HS.VIP.Management.Model.MPurchasingPlan,HS.VIP.Management.Model.MPurchasingPlan)">
            <summary>
            检查PurchasingPlan数据有效性
            </summary>
            <param name="model">待检查PurchasingPlan数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanBaseService.GetTotalCount(HS.VIP.Management.Model.MPurchasingPlanCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MPurchasingPlan@,HS.VIP.Management.Model.MPurchasingPlan@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.PurchasingPlanDetailsBaseService">
            <summary>
            PurchasingPlanDetails相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.PurchasingPlanDetailsBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.PurchasingPlanDetailsBaseService.purchasingPlanDetailsRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanDetailsBaseService.#ctor(HS.VIP.Management.Repository.PurchasingPlanDetailsRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanDetailsBaseService.CheckInfo(HS.VIP.Management.Model.MPurchasingPlanDetails,HS.VIP.Management.Model.MPurchasingPlanDetails)">
            <summary>
            检查PurchasingPlanDetails数据有效性
            </summary>
            <param name="model">待检查PurchasingPlanDetails数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanDetailsBaseService.GetTotalCount(HS.VIP.Management.Model.MPurchasingPlanDetailsCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanDetailsBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MPurchasingPlanDetails@,HS.VIP.Management.Model.MPurchasingPlanDetails@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.ReminderListOfPersonnelBaseService">
            <summary>
            ReminderListOfPersonnel相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.ReminderListOfPersonnelBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.ReminderListOfPersonnelBaseService.reminderListOfPersonnelRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ReminderListOfPersonnelBaseService.#ctor(HS.VIP.Management.Repository.ReminderListOfPersonnelRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ReminderListOfPersonnelBaseService.CheckInfo(HS.VIP.Management.Model.MReminderListOfPersonnel,HS.VIP.Management.Model.MReminderListOfPersonnel)">
            <summary>
            检查ReminderListOfPersonnel数据有效性
            </summary>
            <param name="model">待检查ReminderListOfPersonnel数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReminderListOfPersonnelBaseService.GetTotalCount(HS.VIP.Management.Model.MReminderListOfPersonnelCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReminderListOfPersonnelBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MReminderListOfPersonnel@,HS.VIP.Management.Model.MReminderListOfPersonnel@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.ReturnOrderBaseService">
            <summary>
            ReturnOrder相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.ReturnOrderBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.ReturnOrderBaseService.returnOrderRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderBaseService.#ctor(HS.VIP.Management.Repository.ReturnOrderRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderBaseService.CheckInfo(HS.VIP.Management.Model.MReturnOrder,HS.VIP.Management.Model.MReturnOrder)">
            <summary>
            检查ReturnOrder数据有效性
            </summary>
            <param name="model">待检查ReturnOrder数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderBaseService.GetTotalCount(HS.VIP.Management.Model.MReturnOrderCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MReturnOrder@,HS.VIP.Management.Model.MReturnOrder@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.ReturnOrderDetailsBaseService">
            <summary>
            ReturnOrderDetails相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.ReturnOrderDetailsBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.ReturnOrderDetailsBaseService.returnOrderDetailsRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderDetailsBaseService.#ctor(HS.VIP.Management.Repository.ReturnOrderDetailsRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderDetailsBaseService.CheckInfo(HS.VIP.Management.Model.MReturnOrderDetails,HS.VIP.Management.Model.MReturnOrderDetails)">
            <summary>
            检查ReturnOrderDetails数据有效性
            </summary>
            <param name="model">待检查ReturnOrderDetails数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderDetailsBaseService.GetTotalCount(HS.VIP.Management.Model.MReturnOrderDetailsCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderDetailsBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MReturnOrderDetails@,HS.VIP.Management.Model.MReturnOrderDetails@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.RoomMaintRecordsBaseService">
            <summary>
            RoomMaintRecords相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.RoomMaintRecordsBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.RoomMaintRecordsBaseService.roomMaintRecordsRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomMaintRecordsBaseService.#ctor(HS.VIP.Management.Repository.RoomMaintRecordsRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomMaintRecordsBaseService.CheckInfo(HS.VIP.Management.Model.MRoomMaintRecords,HS.VIP.Management.Model.MRoomMaintRecords)">
            <summary>
            检查RoomMaintRecords数据有效性
            </summary>
            <param name="model">待检查RoomMaintRecords数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomMaintRecordsBaseService.GetTotalCount(HS.VIP.Management.Model.MRoomMaintRecordsCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomMaintRecordsBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MRoomMaintRecords@,HS.VIP.Management.Model.MRoomMaintRecords@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.RoomSchedulingManagementBaseService">
            <summary>
            RoomSchedulingManagement相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.RoomSchedulingManagementBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.RoomSchedulingManagementBaseService.roomSchedulingManagementRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementBaseService.#ctor(HS.VIP.Management.Repository.RoomSchedulingManagementRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementBaseService.CheckInfo(HS.VIP.Management.Model.MRoomSchedulingManagement,HS.VIP.Management.Model.MRoomSchedulingManagement)">
            <summary>
            检查RoomSchedulingManagement数据有效性
            </summary>
            <param name="model">待检查RoomSchedulingManagement数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementBaseService.GetTotalCount(HS.VIP.Management.Model.MRoomSchedulingManagementCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MRoomSchedulingManagement@,HS.VIP.Management.Model.MRoomSchedulingManagement@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.SalesOrderBaseService">
            <summary>
            SalesOrder相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.SalesOrderBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.SalesOrderBaseService.salesOrderRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderBaseService.#ctor(HS.VIP.Management.Repository.SalesOrderRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderBaseService.CheckInfo(HS.VIP.Management.Model.MSalesOrder,HS.VIP.Management.Model.MSalesOrder)">
            <summary>
            检查SalesOrder数据有效性
            </summary>
            <param name="model">待检查SalesOrder数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderBaseService.GetTotalCount(HS.VIP.Management.Model.MSalesOrderCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MSalesOrder@,HS.VIP.Management.Model.MSalesOrder@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.SalesOrderDetailsBaseService">
            <summary>
            SalesOrderDetails相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.SalesOrderDetailsBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.SalesOrderDetailsBaseService.salesOrderDetailsRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderDetailsBaseService.#ctor(HS.VIP.Management.Repository.SalesOrderDetailsRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderDetailsBaseService.CheckInfo(HS.VIP.Management.Model.MSalesOrderDetails,HS.VIP.Management.Model.MSalesOrderDetails)">
            <summary>
            检查SalesOrderDetails数据有效性
            </summary>
            <param name="model">待检查SalesOrderDetails数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderDetailsBaseService.GetTotalCount(HS.VIP.Management.Model.MSalesOrderDetailsCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderDetailsBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MSalesOrderDetails@,HS.VIP.Management.Model.MSalesOrderDetails@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.SchedulingPlanBaseService">
            <summary>
            SchedulingPlan相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.SchedulingPlanBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.SchedulingPlanBaseService.schedulingPlanRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.SchedulingPlanBaseService.#ctor(HS.VIP.Management.Repository.SchedulingPlanRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.SchedulingPlanBaseService.CheckInfo(HS.VIP.Management.Model.MSchedulingPlan,HS.VIP.Management.Model.MSchedulingPlan)">
            <summary>
            检查SchedulingPlan数据有效性
            </summary>
            <param name="model">待检查SchedulingPlan数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SchedulingPlanBaseService.GetTotalCount(HS.VIP.Management.Model.MSchedulingPlanCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SchedulingPlanBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MSchedulingPlan@,HS.VIP.Management.Model.MSchedulingPlan@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.ServiceContentManagementBaseService">
            <summary>
            ServiceContentManagement相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.ServiceContentManagementBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.ServiceContentManagementBaseService.serviceContentManagementRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceContentManagementBaseService.#ctor(HS.VIP.Management.Repository.ServiceContentManagementRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceContentManagementBaseService.CheckInfo(HS.VIP.Management.Model.MServiceContentManagement,HS.VIP.Management.Model.MServiceContentManagement)">
            <summary>
            检查ServiceContentManagement数据有效性
            </summary>
            <param name="model">待检查ServiceContentManagement数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceContentManagementBaseService.GetTotalCount(HS.VIP.Management.Model.MServiceContentManagementCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceContentManagementBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MServiceContentManagement@,HS.VIP.Management.Model.MServiceContentManagement@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.ServiceSchedulingManagementBaseService">
            <summary>
            ServiceSchedulingManagement相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.ServiceSchedulingManagementBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.ServiceSchedulingManagementBaseService.serviceSchedulingManagementRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceSchedulingManagementBaseService.#ctor(HS.VIP.Management.Repository.ServiceSchedulingManagementRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceSchedulingManagementBaseService.CheckInfo(HS.VIP.Management.Model.MServiceSchedulingManagement,HS.VIP.Management.Model.MServiceSchedulingManagement)">
            <summary>
            检查ServiceSchedulingManagement数据有效性
            </summary>
            <param name="model">待检查ServiceSchedulingManagement数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceSchedulingManagementBaseService.GetTotalCount(HS.VIP.Management.Model.MServiceSchedulingManagementCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceSchedulingManagementBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MServiceSchedulingManagement@,HS.VIP.Management.Model.MServiceSchedulingManagement@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.SlotReservationBaseService">
            <summary>
            SlotReservation相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.SlotReservationBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.SlotReservationBaseService.slotReservationRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationBaseService.#ctor(HS.VIP.Management.Repository.SlotReservationRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationBaseService.CheckInfo(HS.VIP.Management.Model.MSlotReservation,HS.VIP.Management.Model.MSlotReservation)">
            <summary>
            检查SlotReservation数据有效性
            </summary>
            <param name="model">待检查SlotReservation数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationBaseService.GetTotalCount(HS.VIP.Management.Model.MSlotReservationCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MSlotReservation@,HS.VIP.Management.Model.MSlotReservation@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.SlotResourceManagementBaseService">
            <summary>
            SlotResourceManagement相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.SlotResourceManagementBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.SlotResourceManagementBaseService.slotResourceManagementRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotResourceManagementBaseService.#ctor(HS.VIP.Management.Repository.SlotResourceManagementRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotResourceManagementBaseService.CheckInfo(HS.VIP.Management.Model.MSlotResourceManagement,HS.VIP.Management.Model.MSlotResourceManagement)">
            <summary>
            检查SlotResourceManagement数据有效性
            </summary>
            <param name="model">待检查SlotResourceManagement数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotResourceManagementBaseService.GetTotalCount(HS.VIP.Management.Model.MSlotResourceManagementCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotResourceManagementBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MSlotResourceManagement@,HS.VIP.Management.Model.MSlotResourceManagement@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.StorageRacksBaseService">
            <summary>
            StorageRacks相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.StorageRacksBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.StorageRacksBaseService.storageRacksRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.StorageRacksBaseService.#ctor(HS.VIP.Management.Repository.StorageRacksRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.StorageRacksBaseService.CheckInfo(HS.VIP.Management.Model.MStorageRacks,HS.VIP.Management.Model.MStorageRacks)">
            <summary>
            检查StorageRacks数据有效性
            </summary>
            <param name="model">待检查StorageRacks数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.StorageRacksBaseService.GetTotalCount(HS.VIP.Management.Model.MStorageRacksCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.StorageRacksBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MStorageRacks@,HS.VIP.Management.Model.MStorageRacks@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.SupplierBaseService">
            <summary>
            Supplier相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.SupplierBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.SupplierBaseService.supplierRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.SupplierBaseService.#ctor(HS.VIP.Management.Repository.SupplierRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.SupplierBaseService.CheckInfo(HS.VIP.Management.Model.MSupplier,HS.VIP.Management.Model.MSupplier)">
            <summary>
            检查Supplier数据有效性
            </summary>
            <param name="model">待检查Supplier数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SupplierBaseService.GetTotalCount(HS.VIP.Management.Model.MSupplierCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SupplierBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MSupplier@,HS.VIP.Management.Model.MSupplier@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.TrafficRecordBaseService">
            <summary>
            TrafficRecord相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.TrafficRecordBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.TrafficRecordBaseService.trafficRecordRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.TrafficRecordBaseService.#ctor(HS.VIP.Management.Repository.TrafficRecordRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.TrafficRecordBaseService.CheckInfo(HS.VIP.Management.Model.MTrafficRecord,HS.VIP.Management.Model.MTrafficRecord)">
            <summary>
            检查TrafficRecord数据有效性
            </summary>
            <param name="model">待检查TrafficRecord数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.TrafficRecordBaseService.GetTotalCount(HS.VIP.Management.Model.MTrafficRecordCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.TrafficRecordBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MTrafficRecord@,HS.VIP.Management.Model.MTrafficRecord@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.VehicleArrivalReminderBaseService">
            <summary>
            VehicleArrivalReminder相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.VehicleArrivalReminderBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.VehicleArrivalReminderBaseService.vehicleArrivalReminderRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleArrivalReminderBaseService.#ctor(HS.VIP.Management.Repository.VehicleArrivalReminderRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleArrivalReminderBaseService.CheckInfo(HS.VIP.Management.Model.MVehicleArrivalReminder,HS.VIP.Management.Model.MVehicleArrivalReminder)">
            <summary>
            检查VehicleArrivalReminder数据有效性
            </summary>
            <param name="model">待检查VehicleArrivalReminder数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleArrivalReminderBaseService.GetTotalCount(HS.VIP.Management.Model.MVehicleArrivalReminderCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleArrivalReminderBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MVehicleArrivalReminder@,HS.VIP.Management.Model.MVehicleArrivalReminder@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.VehicleInformationManagementBaseService">
            <summary>
            VehicleInformationManagement相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.VehicleInformationManagementBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.VehicleInformationManagementBaseService.vehicleInformationManagementRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleInformationManagementBaseService.#ctor(HS.VIP.Management.Repository.VehicleInformationManagementRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleInformationManagementBaseService.CheckInfo(HS.VIP.Management.Model.MVehicleInformationManagement,HS.VIP.Management.Model.MVehicleInformationManagement)">
            <summary>
            检查VehicleInformationManagement数据有效性
            </summary>
            <param name="model">待检查VehicleInformationManagement数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleInformationManagementBaseService.GetTotalCount(HS.VIP.Management.Model.MVehicleInformationManagementCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleInformationManagementBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MVehicleInformationManagement@,HS.VIP.Management.Model.MVehicleInformationManagement@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.VehicleSchedulingManagementBaseService">
            <summary>
            VehicleSchedulingManagement相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.VehicleSchedulingManagementBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.VehicleSchedulingManagementBaseService.vehicleSchedulingManagementRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleSchedulingManagementBaseService.#ctor(HS.VIP.Management.Repository.VehicleSchedulingManagementRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleSchedulingManagementBaseService.CheckInfo(HS.VIP.Management.Model.MVehicleSchedulingManagement,HS.VIP.Management.Model.MVehicleSchedulingManagement)">
            <summary>
            检查VehicleSchedulingManagement数据有效性
            </summary>
            <param name="model">待检查VehicleSchedulingManagement数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleSchedulingManagementBaseService.GetTotalCount(HS.VIP.Management.Model.MVehicleSchedulingManagementCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleSchedulingManagementBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MVehicleSchedulingManagement@,HS.VIP.Management.Model.MVehicleSchedulingManagement@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.VIPCheckInBaseService">
            <summary>
            VIPCheckIn相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.VIPCheckInBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.VIPCheckInBaseService.vIPCheckInRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPCheckInBaseService.#ctor(HS.VIP.Management.Repository.VIPCheckInRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPCheckInBaseService.CheckInfo(HS.VIP.Management.Model.MVIPCheckIn,HS.VIP.Management.Model.MVIPCheckIn)">
            <summary>
            检查VIPCheckIn数据有效性
            </summary>
            <param name="model">待检查VIPCheckIn数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPCheckInBaseService.GetTotalCount(HS.VIP.Management.Model.MVIPCheckInCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPCheckInBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MVIPCheckIn@,HS.VIP.Management.Model.MVIPCheckIn@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.VIPReservationRegistrationBaseService">
            <summary>
            VIPReservationRegistration相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.VIPReservationRegistrationBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.VIPReservationRegistrationBaseService.vIPReservationRegistrationRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationBaseService.#ctor(HS.VIP.Management.Repository.VIPReservationRegistrationRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationBaseService.CheckInfo(HS.VIP.Management.Model.MVIPReservationRegistration,HS.VIP.Management.Model.MVIPReservationRegistration)">
            <summary>
            检查VIPReservationRegistration数据有效性
            </summary>
            <param name="model">待检查VIPReservationRegistration数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationBaseService.GetTotalCount(HS.VIP.Management.Model.MVIPReservationRegistrationCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MVIPReservationRegistration@,HS.VIP.Management.Model.MVIPReservationRegistration@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.WarehousingBaseService">
            <summary>
            Warehousing相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.WarehousingBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.WarehousingBaseService.warehousingRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingBaseService.#ctor(HS.VIP.Management.Repository.WarehousingRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingBaseService.CheckInfo(HS.VIP.Management.Model.MWarehousing,HS.VIP.Management.Model.MWarehousing)">
            <summary>
            检查Warehousing数据有效性
            </summary>
            <param name="model">待检查Warehousing数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingBaseService.GetTotalCount(HS.VIP.Management.Model.MWarehousingCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MWarehousing@,HS.VIP.Management.Model.MWarehousing@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.WarehousingDetailsBaseService">
            <summary>
            WarehousingDetails相关服务
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.WarehousingDetailsBaseService.mediator">
            <summary>
            Mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.WarehousingDetailsBaseService.warehousingDetailsRepositoryOpert">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingDetailsBaseService.#ctor(HS.VIP.Management.Repository.WarehousingDetailsRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingDetailsBaseService.CheckInfo(HS.VIP.Management.Model.MWarehousingDetails,HS.VIP.Management.Model.MWarehousingDetails)">
            <summary>
            检查WarehousingDetails数据有效性
            </summary>
            <param name="model">待检查WarehousingDetails数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingDetailsBaseService.GetTotalCount(HS.VIP.Management.Model.MWarehousingDetailsCondtion)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingDetailsBaseService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MWarehousingDetails@,HS.VIP.Management.Model.MWarehousingDetails@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.OpertLogHander">
            <summary>
            日志记录事件消费者
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.OpertLogHander.Handle(XYH.Public.Tools.Logs.MSystemLog)">
            <summary>
            事件处理
            </summary>
            <param name="logNotification">日志消息</param>
        </member>
        <member name="T:HS.VIP.Management.Service.OpertLogTools">
            <summary>
            操作日志公共帮助类（对MSystemLog进行扩展）
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.OpertLogTools.AddLog``1(XYH.Public.Tools.Logs.MSystemLog,``0,MediatR.IMediator,Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            新增日志
            </summary>
            <typeparam name="T">数据实体模型</typeparam>
            <param name="systemLog">日志对象</param>
            <param name="model">数据模型</param>
            <param name="mediator">领域驱动事件</param>
            <param name="httpContext">请求上下文</param>
            <param name="requestLocationLin">请求代码行号</param>
        </member>
        <member name="M:HS.VIP.Management.Service.OpertLogTools.BactchAddLog``1(XYH.Public.Tools.Logs.MSystemLog,System.Collections.Generic.List{``0},MediatR.IMediator,Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            批量新增操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mSystemLog"></param>
            <param name="modelList"></param>
            <param name="mediator">领域驱动事件</param>
            <param name="httpContext">请求上下文</param>
            <param name="requestLocationLin">请求代码行号</param>
        </member>
        <member name="M:HS.VIP.Management.Service.OpertLogTools.Delete``1(XYH.Public.Tools.Logs.MSystemLog,``0,System.String,MediatR.IMediator,Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            删除日志
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mSystemLog"></param>
            <param name="modelList">modelList</param>
            <param name="mediator">领域驱动事件</param>
            <param name="httpContext">请求上下文</param>
            <param name="requestLocationLin">请求代码行号</param>
        </member>
        <member name="M:HS.VIP.Management.Service.OpertLogTools.BactchDeleteByIdListLog``1(XYH.Public.Tools.Logs.MSystemLog,System.Collections.Generic.List{``0},MediatR.IMediator,Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            新增编码日志
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mSystemLog"></param>
            <param name="modelList">modelList</param>
            <param name="mediator">领域驱动事件</param>
            <param name="httpContext">请求上下文</param>
            <param name="requestLocationLin">请求代码行号</param>
        </member>
        <member name="M:HS.VIP.Management.Service.OpertLogTools.EditLog``1(XYH.Public.Tools.Logs.MSystemLog,``0,``0,System.String,MediatR.IMediator,Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            编辑日志
            </summary>
            <typeparam name="T">数据实体模型</typeparam>
            <param name="systemLog">日志对象</param>
            <param name="modelOld">旧数据模型</param>
            <param name="modelNew">新数据模型</param>
            <param name="dataKey">数据key</param>
            <param name="mediator">领域驱动事件</param>
            <param name="httpContext">请求上下文</param>
            <param name="requestLocationLin">请求代码行号</param>
        </member>
        <member name="M:HS.VIP.Management.Service.OpertLogTools.BactchUpdateSpecifyFieldsByIdLog``2(XYH.Public.Tools.Logs.MSystemLog,``0,HS.Public.Tools.Model.MBactchUpdateSpecifyFields{``1},MediatR.IMediator,Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            批量更新指定字段的值(根据主键集合) 日志
            </summary>
            <typeparam name="T">数据实体模型</typeparam>
            <param name="systemLog">日志对象</param>
            <param name="model">数据模型</param>
            <param name="bactchUpdateSpecifyFields">数据更新模型</param>
            <param name="mediator">领域驱动事件</param>
            <param name="httpContext">请求上下文</param>
            <param name="requestLocationLin">请求代码行号</param>
        </member>
        <member name="M:HS.VIP.Management.Service.OpertLogTools.CommonLog(XYH.Public.Tools.Logs.MSystemLog,MediatR.IMediator,Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            通用日志
            </summary>
            <typeparam name="T">数据实体模型</typeparam>
            <param name="systemLog">日志对象</param>
            <param name="mediator">领域驱动事件</param>
            <param name="httpContext">请求上下文</param>
            <param name="requestLocationLin">请求代码行号</param>
        </member>
        <member name="T:HS.VIP.Management.Service.AccompanyingPersonInformationService">
            <summary>
            AccompanyingPersonInformation相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationService.#ctor(HS.VIP.Management.Repository.AccompanyingPersonInformationRepository)">
            <summary>
            构造函数，通过依赖注入 AccompanyingPersonInformation 仓储操作类
            </summary>
            <param name="accompanyingPersonInformationRepositoryOpert"></param>
            <param name="accompanyingPersonInformationRepository">AccompanyingPersonInformation仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationService.AddOne(HS.VIP.Management.Model.MAccompanyingPersonInformation)">
            <summary>
            新增一条AccompanyingPersonInformation记录
            </summary>
            <param name="model">AccompanyingPersonInformation数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MAccompanyingPersonInformation})">
            <summary>
            批量新增AccompanyingPersonInformation数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationService.UpdateById(HS.VIP.Management.Model.MAccompanyingPersonInformation)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MAccompanyingPersonInformation})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 AccompanyingPersonInformation 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationService.GetOneModel(HS.VIP.Management.Model.MAccompanyingPersonInformationCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MAccompanyingPersonInformationCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationService.GetAllList(HS.VIP.Management.Model.MAccompanyingPersonInformationCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationService.Export(HS.VIP.Management.Model.MAccompanyingPersonInformationCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationService.CheckIn(System.String,System.String)">
            <summary>
            随行人员签到
            </summary>
            <param name="reservationNumber">预约单号</param>
            <param name="persionId">预约随行人员记录的logic_id</param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationService.CheckInfo(HS.VIP.Management.Model.MAccompanyingPersonInformation,HS.VIP.Management.Model.MAccompanyingPersonInformation)">
            <summary>
            检查AccompanyingPersonInformation数据有效性
            </summary>
            <param name="model">待检查AccompanyingPersonInformation数据模型</param>
            <param name="model">待检查AccompanyingPersonInformation已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccompanyingPersonInformationService.GetHistoryList(HS.VIP.Management.Model.MAccompanyingPersonInformationQuery)">
            <summary>
            根据主宾编号获取常旅客
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.AccountService">
            <summary>
            Account相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.#ctor(HS.VIP.Management.Repository.AccountRepository)">
            <summary>
            构造函数，通过依赖注入 Account 仓储操作类
            </summary>
            <param name="accountRepository">Account仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.AddOne(HS.VIP.Management.Model.MAccount)">
            <summary>
            新增一条Account记录
            </summary>
            <param name="model">Account数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MAccount})">
            <summary>
            批量新增Account数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.UpdateById(HS.VIP.Management.Model.MAccount)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MAccount})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 Account 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.GetOneModel(HS.VIP.Management.Model.MAccountCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MAccountCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.GetAllList(HS.VIP.Management.Model.MAccountCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.Export(HS.VIP.Management.Model.MAccountCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AccountService.CheckInfo(HS.VIP.Management.Model.MAccount,HS.VIP.Management.Model.MAccount)">
            <summary>
            检查Account数据有效性
            </summary>
            <param name="model">待检查Account数据模型</param>
            <param name="model">待检查Account已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.AirlinecompanyInfoService">
            <summary>
            AirlinecompanyInfo相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.AirlinecompanyInfoService.#ctor(HS.VIP.Management.Repository.AirlinecompanyInfoRepository)">
            <summary>
            构造函数，通过依赖注入 AirlinecompanyInfo 仓储操作类
            </summary>
            <param name="airlinecompanyInfoRepository">AirlinecompanyInfo仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.AirlinecompanyInfoService.AddOne(HS.VIP.Management.Model.MAirlinecompanyInfo)">
            <summary>
            新增一条AirlinecompanyInfo记录
            </summary>
            <param name="model">AirlinecompanyInfo数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirlinecompanyInfoService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MAirlinecompanyInfo})">
            <summary>
            批量新增AirlinecompanyInfo数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirlinecompanyInfoService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirlinecompanyInfoService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirlinecompanyInfoService.UpdateById(HS.VIP.Management.Model.MAirlinecompanyInfo)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirlinecompanyInfoService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MAirlinecompanyInfo})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirlinecompanyInfoService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 AirlinecompanyInfo 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirlinecompanyInfoService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirlinecompanyInfoService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirlinecompanyInfoService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirlinecompanyInfoService.GetOneModel(HS.VIP.Management.Model.MAirlinecompanyInfoCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirlinecompanyInfoService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirlinecompanyInfoService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MAirlinecompanyInfoCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirlinecompanyInfoService.GetAllList(HS.VIP.Management.Model.MAirlinecompanyInfoCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirlinecompanyInfoService.Export(HS.VIP.Management.Model.MAirlinecompanyInfoCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirlinecompanyInfoService.CheckInfo(HS.VIP.Management.Model.MAirlinecompanyInfo,HS.VIP.Management.Model.MAirlinecompanyInfo)">
            <summary>
            检查AirlinecompanyInfo数据有效性
            </summary>
            <param name="model">待检查AirlinecompanyInfo数据模型</param>
            <param name="model">待检查AirlinecompanyInfo已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.AirportInformationManagementService">
            <summary>
            AirportInformationManagement相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.AirportInformationManagementService.#ctor(HS.VIP.Management.Repository.AirportInformationManagementRepository)">
            <summary>
            构造函数，通过依赖注入 AirportInformationManagement 仓储操作类
            </summary>
            <param name="airportInformationManagementRepository">AirportInformationManagement仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.AirportInformationManagementService.AddOne(HS.VIP.Management.Model.MAirportInformationManagement)">
            <summary>
            新增一条AirportInformationManagement记录
            </summary>
            <param name="model">AirportInformationManagement数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirportInformationManagementService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MAirportInformationManagement})">
            <summary>
            批量新增AirportInformationManagement数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirportInformationManagementService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirportInformationManagementService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirportInformationManagementService.UpdateById(HS.VIP.Management.Model.MAirportInformationManagement)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirportInformationManagementService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MAirportInformationManagement})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirportInformationManagementService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 AirportInformationManagement 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirportInformationManagementService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirportInformationManagementService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirportInformationManagementService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirportInformationManagementService.GetOneModel(HS.VIP.Management.Model.MAirportInformationManagementCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirportInformationManagementService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirportInformationManagementService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MAirportInformationManagementCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirportInformationManagementService.GetAllList(HS.VIP.Management.Model.MAirportInformationManagementCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirportInformationManagementService.Export(HS.VIP.Management.Model.MAirportInformationManagementCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AirportInformationManagementService.CheckInfo(HS.VIP.Management.Model.MAirportInformationManagement,HS.VIP.Management.Model.MAirportInformationManagement)">
            <summary>
            检查AirportInformationManagement数据有效性
            </summary>
            <param name="model">待检查AirportInformationManagement数据模型</param>
            <param name="model">待检查AirportInformationManagement已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.AreaConsumableStocksService">
            <summary>
            AreaConsumableStocks相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.AreaConsumableStocksService.#ctor(HS.VIP.Management.Repository.AreaConsumableStocksRepository)">
            <summary>
            构造函数，通过依赖注入 AreaConsumableStocks 仓储操作类
            </summary>
            <param name="areaConsumableStocksRepository">AreaConsumableStocks仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.AreaConsumableStocksService.AddOne(HS.VIP.Management.Model.MAreaConsumableStocks)">
            <summary>
            新增一条AreaConsumableStocks记录
            </summary>
            <param name="model">AreaConsumableStocks数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AreaConsumableStocksService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MAreaConsumableStocks})">
            <summary>
            批量新增AreaConsumableStocks数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AreaConsumableStocksService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AreaConsumableStocksService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AreaConsumableStocksService.UpdateById(HS.VIP.Management.Model.MAreaConsumableStocks)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AreaConsumableStocksService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MAreaConsumableStocks})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AreaConsumableStocksService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 AreaConsumableStocks 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AreaConsumableStocksService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AreaConsumableStocksService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AreaConsumableStocksService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AreaConsumableStocksService.GetOneModel(HS.VIP.Management.Model.MAreaConsumableStocksCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AreaConsumableStocksService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AreaConsumableStocksService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MAreaConsumableStocksCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AreaConsumableStocksService.GetAllList(HS.VIP.Management.Model.MAreaConsumableStocksCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AreaConsumableStocksService.Export(HS.VIP.Management.Model.MAreaConsumableStocksCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.AreaConsumableStocksService.CheckInfo(HS.VIP.Management.Model.MAreaConsumableStocks,HS.VIP.Management.Model.MAreaConsumableStocks)">
            <summary>
            检查AreaConsumableStocks数据有效性
            </summary>
            <param name="model">待检查AreaConsumableStocks数据模型</param>
            <param name="model">待检查AreaConsumableStocks已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.service.base.BaseService`2">
            <summary>
            业务服务base接口
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TCondition"></typeparam>
        </member>
        <member name="F:HS.VIP.Management.Service.service.base.BaseService`2._mediator">
            <summary>
            _mediator 领域事件操作对象
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.service.base.BaseService`2._accessor">
            <summary>
            请求上下文
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Service.service.base.BaseService`2._moduleName">
            <summary>
            操作表
            </summary>
        </member>
        <member name="P:HS.VIP.Management.Service.service.base.BaseService`2._baseRepository">
            <summary>
            logical_id仓储操作类
            </summary>
        </member>
        <member name="P:HS.VIP.Management.Service.service.base.BaseService`2._mSystemLog">
            <summary>
            审计日志对象
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.BaseService`2.#ctor(HS.VIP.Management.Repository.repository.base.core.IRepository{`0,`1},HS.VIP.Management.Share.CommonObject.IInjectedObjects,System.String)">
            <summary>
            
            </summary>
            <param name="repository"></param>
            <param name="injectedObjects"></param>
            <param name="moduleName">模块名称</param>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.BaseService`2.AddOneSystemLog">
            <summary>
            记录日志 在具体实现上，可以根据自己项目实际情况做自定义实现
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.BaseService`2.CheckInfoBase(`0,`0)">
            <summary>
            检查TModel数据有效性
            </summary>
            <param name="model">待检查数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.BaseService`2.CheckInfo(`0,`0)">
            <summary>
            检查TModel数据有效性
            </summary>
            <param name="model">待检查数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.BaseService`2.GetTotalCountAsync(`1)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.BaseService`2.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},`0@,`0@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.BaseService`2.GetAllFields(System.String[])">
            <summary>
            获取表全部字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.BaseService`2.AddOneAsync(`0)">
            <summary>
            新增一条Test记录
            </summary>
            <param name="model">Test数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.BaseService`2.BactchAddAsync(System.Collections.Generic.List{`0})">
            <summary>
            批量新增Test数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.BaseService`2.DeleteByIdAsync(System.String)">
            <summary>
            根据logical_id删除数据
            </summary>
            <param name="logical_id">logical_id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.BaseService`2.BactchDeleteByIdListAsync(System.Collections.Generic.List{System.String})">
            <summary>
            根据logical_id集合批量删除数据
            </summary>
            <param name="idList">logical_id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.BaseService`2.UpdateByIdAsync(`0)">
            <summary>
            根据logical_id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.BaseService`2.BactchUpdateByIdAsync(System.Collections.Generic.List{`0})">
            <summary>
            根据logical_id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.BaseService`2.UpdateDynamicAsync(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 test 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.BaseService`2.BactchUpdateDynamicAsync(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.BaseService`2.BactchUpdateSpecifyFieldsByIdAsync(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">logical_id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.BaseService`2.GetModelByIdAsync(System.String,System.String)">
            <summary>
            根据logical_id获取一个模型数据
            </summary>
            <param name="logical_id">logical_id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.BaseService`2.GetOneModelAsync(`1)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.BaseService`2.GetAllListByIdListAsync(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.BaseService`2.GetPageListAsync(HS.Public.Tools.Model.MPageQueryCondition{`1})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.BaseService`2.GetAllListAsync(`1)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.BaseService`2.Export(`1,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.service.base.IBaseService`2">
            <summary>
            业务服务base接口
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TCondition"></typeparam>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.IBaseService`2.GetTotalCountAsync(`1)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.IBaseService`2.AddOneAsync(`0)">
            <summary>
            新增一条Test记录
            </summary>
            <param name="model">Test数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.IBaseService`2.BactchAddAsync(System.Collections.Generic.List{`0})">
            <summary>
            批量新增Test数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.IBaseService`2.DeleteByIdAsync(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.IBaseService`2.BactchDeleteByIdListAsync(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.IBaseService`2.UpdateByIdAsync(`0)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.IBaseService`2.BactchUpdateByIdAsync(System.Collections.Generic.List{`0})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.IBaseService`2.UpdateDynamicAsync(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 test 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.IBaseService`2.BactchUpdateDynamicAsync(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.IBaseService`2.BactchUpdateSpecifyFieldsByIdAsync(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.IBaseService`2.GetModelByIdAsync(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.IBaseService`2.GetOneModelAsync(`1)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.IBaseService`2.GetAllListByIdListAsync(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.IBaseService`2.GetPageListAsync(HS.Public.Tools.Model.MPageQueryCondition{`1})">
            <summary>
            分页获取数据
            </summary>
            <param name="pageQueryCondition"></param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.IBaseService`2.GetAllListAsync(`1)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.base.IBaseService`2.Export(`1,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.service.core.IDictionaryService">
            <summary>
            字典相关服务
            存放字典服务的自定义方法
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.IDictionaryService.GetDictItemsByTypeKeyAsync(System.Collections.Generic.List{System.String})">
            <summary>
            根据字典类型名获取字典子项
            </summary>
            <param name="typeKeys"></param>
            <returns></returns>
        </member>
        <member name="T:HS.VIP.Management.Service.service.core.imp.DictionaryService">
            <summary>
            字典相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.imp.DictionaryService.#ctor(HS.VIP.Management.Repository.repository.core.IDictionaryRepository{HS.VIP.Management.Model.MDictionary,HS.VIP.Management.Model.MDictionaryCondtion},HS.VIP.Management.Share.CommonObject.IInjectedObjects,HS.VIP.Management.Share.Redis.IDistributedCache)">
            <summary>
            字典相关服务
            </summary>
            <param name="dictionaryRepository"></param>
            <param name="injectedObjects"></param>
            <param name="cache"></param>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.imp.DictionaryService.GetDictItemsByTypeKeyAsync(System.Collections.Generic.List{System.String})">
            <summary>
            根据字典类型名获取字典子项
            </summary>
            <param name="typeKeys"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.imp.DictionaryService.CheckInfo(HS.VIP.Management.Model.MDictionary,HS.VIP.Management.Model.MDictionary)">
            <summary>
            检查Dictionary数据有效性
            </summary>
            <param name="model">待检查Dictionary数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.service.core.imp.OrderService">
            <summary>
            order相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.imp.OrderService.CheckInfo(HS.VIP.Management.Model.MOrders,HS.VIP.Management.Model.MOrders)">
            <summary>
            检查Orders数据有效性
            </summary>
            <param name="model">待检查Orders数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.imp.OrderService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MOrders@,HS.VIP.Management.Model.MOrders@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.service.core.imp.PurchaseSettlementService">
            <summary>
            采购结算相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.imp.PurchaseSettlementService.#ctor(HS.VIP.Management.Repository.repository.core.IPurchaseSettlementRepository{HS.VIP.Management.Model.MPurchaseSettlement,HS.VIP.Management.Model.MPurchaseSettlementCondtion},HS.VIP.Management.Repository.repository.core.IWarehousingRepository{HS.VIP.Management.Model.MWarehousing,HS.VIP.Management.Model.MWarehousingCondtion},HS.VIP.Management.Repository.repository.core.IReturnOrderDetailsRepository{HS.VIP.Management.Model.MReturnOrderDetails,HS.VIP.Management.Model.MReturnOrderDetailsCondtion},HS.VIP.Management.Share.CommonObject.IInjectedObjects)">
            <summary>
            采购结算相关服务
            </summary>
            <param name="purchaseSettlementRepository"></param>
            <param name="warehousingRepository"></param>
            <param name=""></param>
            <param name="injectedObjects"></param>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.imp.PurchaseSettlementService.CheckInfo(HS.VIP.Management.Model.MPurchaseSettlement,HS.VIP.Management.Model.MPurchaseSettlement)">
            <summary>
            检查PurchaseSettlement数据有效性
            </summary>
            <param name="model">待检查PurchaseSettlement数据模型</param>
            <param name="modelOld">待检查PurchaseSettlement已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.imp.PurchaseSettlementService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MPurchaseSettlement@,HS.VIP.Management.Model.MPurchaseSettlement@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.imp.PurchaseSettlementService.GenerateSettlementOrder(System.Collections.Generic.List{System.String})">
            <summary>
            生成结算单
            </summary>
            <param name="warehousingIds">如入库单logical_id</param>
            <returns></returns>
        </member>
        <member name="T:HS.VIP.Management.Service.service.core.imp.ReturnOrderDetailsService">
            <summary>
            字典相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.imp.ReturnOrderDetailsService.#ctor(HS.VIP.Management.Repository.repository.core.IReturnOrderDetailsRepository{HS.VIP.Management.Model.MReturnOrderDetails,HS.VIP.Management.Model.MReturnOrderDetailsCondtion},HS.VIP.Management.Share.CommonObject.IInjectedObjects,HS.VIP.Management.Share.Redis.IDistributedCache)">
            <summary>
            字典相关服务
            </summary>
            <param name="ReturnOrderDetailsRepository"></param>
            <param name="injectedObjects"></param>
            <param name="cache"></param>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.imp.ReturnOrderDetailsService.GetReturnOrderDetailsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            获取退货单的明细
            </summary>
            <param name="warehousing_ids">入库单id</param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.imp.ReturnOrderDetailsService.CheckInfo(HS.VIP.Management.Model.MReturnOrderDetails,HS.VIP.Management.Model.MReturnOrderDetails)">
            <summary>
            检查ReturnOrderDetails数据有效性
            </summary>
            <param name="model">待检查ReturnOrderDetails数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.imp.ReturnOrderDetailsService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MReturnOrderDetails@,HS.VIP.Management.Model.MReturnOrderDetails@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.service.core.imp.TestService">
            <summary>
            test相关服务
            </summary>
        </member>
        <member name="T:HS.VIP.Management.Service.service.core.imp.WarehousingService">
            <summary>
            字典相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.imp.WarehousingService.#ctor(HS.VIP.Management.Repository.repository.core.IWarehousingRepository{HS.VIP.Management.Model.MWarehousing,HS.VIP.Management.Model.MWarehousingCondtion},HS.VIP.Management.Share.CommonObject.IInjectedObjects)">
            <summary>
            字典相关服务
            </summary>
            <param name="warehousingRepository"></param>
            <param name="injectedObjects"></param>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.imp.WarehousingService.CheckInfo(HS.VIP.Management.Model.MWarehousing,HS.VIP.Management.Model.MWarehousing)">
            <summary>
            检查Warehousing数据有效性
            </summary>
            <param name="model">待检查Warehousing数据模型</param>
            <param name="modelOld"></param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.imp.WarehousingService.TransformatJobjToMode(System.Collections.Generic.Dictionary{System.String,System.Object},HS.VIP.Management.Model.MWarehousing@,HS.VIP.Management.Model.MWarehousing@)">
            <summary>
            根据动态模型转换为详细的数据模型
            </summary>
            <param name="modelJobj">动态编辑模型</param>
            <param name="modelOld">历史数据模型</param>
            <returns>转换后的实体模型</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.imp.WarehousingService.GetInventoryInAndOutAsync(System.DateTime,System.DateTime)">
            <summary>
            获取入库和出库总数
            </summary>
            <param name="beginTime"></param>
            <param name="endTime"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.imp.WarehousingService.GetInventoryInAndOutChainComparisonAsync(System.DateTime,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            获取入库和出库总数环比
            </summary>
            <param name="thisBeginTime"></param>
            <param name="thisEndTime"></param>
            <param name="lastBeginTime"></param>
            <param name="lastEndTime"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.imp.WarehousingService.GetInventoryOutProductAnalysisAsync(System.DateTime,System.DateTime)">
            <summary>
            获取出库商品分类统计
            </summary>
            <param name="beginTime"></param>
            <param name="endTime"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.imp.WarehousingService.GetInventoryInProductAnalysisAsync(System.DateTime,System.DateTime)">
            <summary>
            获取入库商品分类统计
            </summary>
            <param name="beginTime"></param>
            <param name="endTime"></param>
            <returns></returns>
        </member>
        <member name="T:HS.VIP.Management.Service.service.core.IPurchaseSettlementService">
            <summary>
            采购结算相关服务
            存放自定义方法
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.IPurchaseSettlementService.GenerateSettlementOrder(System.Collections.Generic.List{System.String})">
            <summary>
            生成结算单
            </summary>
            <param name="warehousingIds">如入库单logical_id</param>
            <returns></returns>
        </member>
        <member name="T:HS.VIP.Management.Service.service.core.IReturnOrderDetailsService">
            <summary>
            退货单相关服务
            存放的自定义方法
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.IReturnOrderDetailsService.GetReturnOrderDetailsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            获取退货单的明细
            </summary>
            <param name="warehousing_ids">入库单id</param>
            <returns></returns>
        </member>
        <member name="T:HS.VIP.Management.Service.service.core.IWarehousingService">
            <summary>
            
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.IWarehousingService.GetInventoryInAndOutAsync(System.DateTime,System.DateTime)">
            <summary>
            获取入库和出库总数
            </summary>
            <param name="beginTime"></param>
            <param name="endTime"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.IWarehousingService.GetInventoryInAndOutChainComparisonAsync(System.DateTime,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            获取入库和出库总数环比
            </summary>
            <param name="thisBeginTime"></param>
            <param name="thisEndTime"></param>
            <param name="lastBeginTime"></param>
            <param name="lastEndTime"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.IWarehousingService.GetInventoryOutProductAnalysisAsync(System.DateTime,System.DateTime)">
            <summary>
            获取出库商品分类统计
            </summary>
            <param name="beginTime"></param>
            <param name="endTime"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.service.core.IWarehousingService.GetInventoryInProductAnalysisAsync(System.DateTime,System.DateTime)">
            <summary>
            获取入库商品分类统计
            </summary>
            <param name="beginTime"></param>
            <param name="endTime"></param>
            <returns></returns>
        </member>
        <member name="T:HS.VIP.Management.Service.BusinessJetFlightInformationManagementService">
            <summary>
            BusinessJetFlightInformationManagement相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementService.#ctor(HS.VIP.Management.Repository.BusinessJetFlightInformationManagementRepository)">
            <summary>
            构造函数，通过依赖注入 BusinessJetFlightInformationManagement 仓储操作类
            </summary>
            <param name="businessJetFlightInformationManagementRepository">BusinessJetFlightInformationManagement仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementService.AddOne(HS.VIP.Management.Model.MBusinessJetFlightInformationManagement)">
            <summary>
            新增一条BusinessJetFlightInformationManagement记录
            </summary>
            <param name="model">BusinessJetFlightInformationManagement数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MBusinessJetFlightInformationManagement})">
            <summary>
            批量新增BusinessJetFlightInformationManagement数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementService.BusinessJetFlightPushById(System.String)">
            <summary>
            根据Id推送公务机预定
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementService.UpdateBusinessJetFlightInformation(HS.VIP.Management.Model.MBusinessJetFlightInformationManagement)">
            <summary>
            根据id更新公务机预定
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementService.UpdateById(HS.VIP.Management.Model.MBusinessJetFlightInformationManagement)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MBusinessJetFlightInformationManagement})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementService.ApprovalBusinessJetFlightInformation(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            审核公务机预定，通过，驳回
            </summary>
            <param name="modelJobj">需要更新的 BusinessJetFlightInformationManagement 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 BusinessJetFlightInformationManagement 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementService.GetOneModel(HS.VIP.Management.Model.MBusinessJetFlightInformationManagementCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MBusinessJetFlightInformationManagementCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementService.GetAllList(HS.VIP.Management.Model.MBusinessJetFlightInformationManagementCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementService.Export(HS.VIP.Management.Model.MBusinessJetFlightInformationManagementCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetFlightInformationManagementService.CheckInfo(HS.VIP.Management.Model.MBusinessJetFlightInformationManagement,HS.VIP.Management.Model.MBusinessJetFlightInformationManagement)">
            <summary>
            检查BusinessJetFlightInformationManagement数据有效性
            </summary>
            <param name="model">待检查BusinessJetFlightInformationManagement数据模型</param>
            <param name="model">待检查BusinessJetFlightInformationManagement已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsService">
            <summary>
            BusinessJetOrderManagementDetails相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsService.#ctor(HS.VIP.Management.Repository.BusinessJetOrderManagementDetailsRepository)">
            <summary>
            构造函数，通过依赖注入 BusinessJetOrderManagementDetails 仓储操作类
            </summary>
            <param name="businessJetOrderManagementDetailsRepository">BusinessJetOrderManagementDetails仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsService.AddOne(HS.VIP.Management.Model.MBusinessJetOrderManagementDetails)">
            <summary>
            新增一条BusinessJetOrderManagementDetails记录
            </summary>
            <param name="model">BusinessJetOrderManagementDetails数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MBusinessJetOrderManagementDetails})">
            <summary>
            批量新增BusinessJetOrderManagementDetails数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsService.UpdateById(HS.VIP.Management.Model.MBusinessJetOrderManagementDetails)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MBusinessJetOrderManagementDetails})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 BusinessJetOrderManagementDetails 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsService.GetOneModel(HS.VIP.Management.Model.MBusinessJetOrderManagementDetailsCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MBusinessJetOrderManagementDetailsCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsService.GetAllList(HS.VIP.Management.Model.MBusinessJetOrderManagementDetailsCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsService.Export(HS.VIP.Management.Model.MBusinessJetOrderManagementDetailsCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementDetailsService.CheckInfo(HS.VIP.Management.Model.MBusinessJetOrderManagementDetails,HS.VIP.Management.Model.MBusinessJetOrderManagementDetails)">
            <summary>
            检查BusinessJetOrderManagementDetails数据有效性
            </summary>
            <param name="model">待检查BusinessJetOrderManagementDetails数据模型</param>
            <param name="model">待检查BusinessJetOrderManagementDetails已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.BusinessJetOrderManagementService">
            <summary>
            BusinessJetOrderManagement相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementService.#ctor(HS.VIP.Management.Repository.BusinessJetOrderManagementRepository)">
            <summary>
            构造函数，通过依赖注入 BusinessJetOrderManagement 仓储操作类
            </summary>
            <param name="businessJetOrderManagementRepository">BusinessJetOrderManagement仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementService.AddBusinessJetOrder(HS.VIP.Management.Model.MBusinessJetOrderManagement)">
            <summary>
            新增一条BusinessJetOrderManagement记录,包含订单详情
            </summary>
            <param name="model">BusinessJetOrderManagement数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementService.AddOne(HS.VIP.Management.Model.MBusinessJetOrderManagement)">
            <summary>
            新增一条BusinessJetOrderManagement记录
            </summary>
            <param name="model">BusinessJetOrderManagement数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MBusinessJetOrderManagement})">
            <summary>
            批量新增BusinessJetOrderManagement数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementService.UpdateBusinessJetOrder(HS.VIP.Management.Model.MBusinessJetOrderManagement)">
            <summary>
            根据id更新数据实体，包含订单详情
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementService.UpdateById(HS.VIP.Management.Model.MBusinessJetOrderManagement)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MBusinessJetOrderManagement})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementService.UpdateStatusBusinessJetOrder(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            更新订单状态，提交，审核，取消
            </summary>
            <param name="modelJobj">需要更新的 BusinessJetOrderManagement 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 BusinessJetOrderManagement 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementService.GetOneModel(HS.VIP.Management.Model.MBusinessJetOrderManagementCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MBusinessJetOrderManagementCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementService.GetAllList(HS.VIP.Management.Model.MBusinessJetOrderManagementCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementService.Export(HS.VIP.Management.Model.MBusinessJetOrderManagementCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.BusinessJetOrderManagementService.CheckInfo(HS.VIP.Management.Model.MBusinessJetOrderManagement,HS.VIP.Management.Model.MBusinessJetOrderManagement)">
            <summary>
            检查BusinessJetOrderManagement数据有效性
            </summary>
            <param name="model">待检查BusinessJetOrderManagement数据模型</param>
            <param name="model">待检查BusinessJetOrderManagement已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.CardManagementService">
            <summary>
            CardManagement相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.#ctor(HS.VIP.Management.Repository.CardManagementRepository)">
            <summary>
            构造函数，通过依赖注入 CardManagement 仓储操作类
            </summary>
            <param name="cardManagementRepository">CardManagement仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.AddOne(HS.VIP.Management.Model.MCardManagement)">
            <summary>
            新增一条CardManagement记录
            </summary>
            <param name="model">CardManagement数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MCardManagement})">
            <summary>
            批量新增CardManagement数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.UpdateById(HS.VIP.Management.Model.MCardManagement)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MCardManagement})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 CardManagement 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.GetOneModel(HS.VIP.Management.Model.MCardManagementCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MCardManagementCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.GetAllList(HS.VIP.Management.Model.MCardManagementCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.Export(HS.VIP.Management.Model.MCardManagementCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardManagementService.CheckInfo(HS.VIP.Management.Model.MCardManagement,HS.VIP.Management.Model.MCardManagement)">
            <summary>
            检查CardManagement数据有效性
            </summary>
            <param name="model">待检查CardManagement数据模型</param>
            <param name="model">待检查CardManagement已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.CardSalesRecordService">
            <summary>
            CardSalesRecord相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CardSalesRecordService.#ctor(HS.VIP.Management.Repository.CardSalesRecordRepository)">
            <summary>
            构造函数，通过依赖注入 CardSalesRecord 仓储操作类
            </summary>
            <param name="cardSalesRecordRepository">CardSalesRecord仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.CardSalesRecordService.AddOne(HS.VIP.Management.Model.MCardSalesRecord)">
            <summary>
            新增一条CardSalesRecord记录
            </summary>
            <param name="model">CardSalesRecord数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardSalesRecordService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MCardSalesRecord})">
            <summary>
            批量新增CardSalesRecord数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardSalesRecordService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardSalesRecordService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardSalesRecordService.UpdateById(HS.VIP.Management.Model.MCardSalesRecord)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardSalesRecordService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MCardSalesRecord})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardSalesRecordService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 CardSalesRecord 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardSalesRecordService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardSalesRecordService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardSalesRecordService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardSalesRecordService.GetOneModel(HS.VIP.Management.Model.MCardSalesRecordCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardSalesRecordService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardSalesRecordService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MCardSalesRecordCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardSalesRecordService.GetAllList(HS.VIP.Management.Model.MCardSalesRecordCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardSalesRecordService.Export(HS.VIP.Management.Model.MCardSalesRecordCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardSalesRecordService.CheckInfo(HS.VIP.Management.Model.MCardSalesRecord,HS.VIP.Management.Model.MCardSalesRecord)">
            <summary>
            检查CardSalesRecord数据有效性
            </summary>
            <param name="model">待检查CardSalesRecord数据模型</param>
            <param name="model">待检查CardSalesRecord已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.CardTransactionService">
            <summary>
            CardTransaction相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CardTransactionService.#ctor(HS.VIP.Management.Repository.CardTransactionRepository)">
            <summary>
            构造函数，通过依赖注入 CardTransaction 仓储操作类
            </summary>
            <param name="cardTransactionRepository">CardTransaction仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.CardTransactionService.AddOne(HS.VIP.Management.Model.MCardTransaction)">
            <summary>
            新增一条CardTransaction记录
            </summary>
            <param name="model">CardTransaction数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardTransactionService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MCardTransaction})">
            <summary>
            批量新增CardTransaction数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardTransactionService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardTransactionService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardTransactionService.UpdateById(HS.VIP.Management.Model.MCardTransaction)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardTransactionService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MCardTransaction})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardTransactionService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 CardTransaction 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardTransactionService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardTransactionService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardTransactionService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardTransactionService.GetOneModel(HS.VIP.Management.Model.MCardTransactionCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardTransactionService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardTransactionService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MCardTransactionCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardTransactionService.GetAllList(HS.VIP.Management.Model.MCardTransactionCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardTransactionService.Export(HS.VIP.Management.Model.MCardTransactionCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CardTransactionService.CheckInfo(HS.VIP.Management.Model.MCardTransaction,HS.VIP.Management.Model.MCardTransaction)">
            <summary>
            检查CardTransaction数据有效性
            </summary>
            <param name="model">待检查CardTransaction数据模型</param>
            <param name="model">待检查CardTransaction已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.ConsumableInformationService">
            <summary>
            ConsumableInformation相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationService.#ctor(HS.VIP.Management.Repository.ConsumableInformationRepository)">
            <summary>
            构造函数，通过依赖注入 ConsumableInformation 仓储操作类
            </summary>
            <param name="consumableInformationRepository">ConsumableInformation仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationService.AddOne(HS.VIP.Management.Model.MConsumableInformation)">
            <summary>
            新增一条ConsumableInformation记录
            </summary>
            <param name="model">ConsumableInformation数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MConsumableInformation})">
            <summary>
            批量新增ConsumableInformation数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationService.UpdateById(HS.VIP.Management.Model.MConsumableInformation)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MConsumableInformation})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 ConsumableInformation 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationService.GetOneModel(HS.VIP.Management.Model.MConsumableInformationCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MConsumableInformationCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationService.GetAllList(HS.VIP.Management.Model.MConsumableInformationCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationService.Export(HS.VIP.Management.Model.MConsumableInformationCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationService.CheckInfo(HS.VIP.Management.Model.MConsumableInformation,HS.VIP.Management.Model.MConsumableInformation)">
            <summary>
            检查ConsumableInformation数据有效性
            </summary>
            <param name="model">待检查ConsumableInformation数据模型</param>
            <param name="model">待检查ConsumableInformation已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.ConsumableInformationTypeService">
            <summary>
            ConsumableInformationType相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationTypeService.#ctor(HS.VIP.Management.Repository.ConsumableInformationTypeRepository)">
            <summary>
            构造函数，通过依赖注入 ConsumableInformationType 仓储操作类
            </summary>
            <param name="consumableInformationTypeRepository">ConsumableInformationType仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationTypeService.AddOne(HS.VIP.Management.Model.MConsumableInformationType)">
            <summary>
            新增一条ConsumableInformationType记录
            </summary>
            <param name="model">ConsumableInformationType数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationTypeService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MConsumableInformationType})">
            <summary>
            批量新增ConsumableInformationType数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationTypeService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationTypeService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationTypeService.UpdateById(HS.VIP.Management.Model.MConsumableInformationType)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationTypeService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MConsumableInformationType})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationTypeService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 ConsumableInformationType 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationTypeService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationTypeService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationTypeService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationTypeService.GetOneModel(HS.VIP.Management.Model.MConsumableInformationTypeCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationTypeService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationTypeService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MConsumableInformationTypeCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationTypeService.GetAllList(HS.VIP.Management.Model.MConsumableInformationTypeCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationTypeService.Export(HS.VIP.Management.Model.MConsumableInformationTypeCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ConsumableInformationTypeService.CheckInfo(HS.VIP.Management.Model.MConsumableInformationType,HS.VIP.Management.Model.MConsumableInformationType)">
            <summary>
            检查ConsumableInformationType数据有效性
            </summary>
            <param name="model">待检查ConsumableInformationType数据模型</param>
            <param name="model">待检查ConsumableInformationType已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.ContractDetailsService">
            <summary>
            ContractDetails相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractDetailsService.#ctor(HS.VIP.Management.Repository.ContractDetailsRepository)">
            <summary>
            构造函数，通过依赖注入 ContractDetails 仓储操作类
            </summary>
            <param name="contractDetailsRepository">ContractDetails仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractDetailsService.AddOne(HS.VIP.Management.Model.MContractDetails)">
            <summary>
            新增一条ContractDetails记录
            </summary>
            <param name="model">ContractDetails数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractDetailsService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MContractDetails})">
            <summary>
            批量新增ContractDetails数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractDetailsService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractDetailsService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractDetailsService.UpdateById(HS.VIP.Management.Model.MContractDetails)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractDetailsService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MContractDetails})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractDetailsService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 ContractDetails 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractDetailsService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractDetailsService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractDetailsService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractDetailsService.GetOneModel(HS.VIP.Management.Model.MContractDetailsCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractDetailsService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractDetailsService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MContractDetailsCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractDetailsService.GetAllList(HS.VIP.Management.Model.MContractDetailsCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractDetailsService.Export(HS.VIP.Management.Model.MContractDetailsCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractDetailsService.CheckInfo(HS.VIP.Management.Model.MContractDetails,HS.VIP.Management.Model.MContractDetails)">
            <summary>
            检查ContractDetails数据有效性
            </summary>
            <param name="model">待检查ContractDetails数据模型</param>
            <param name="model">待检查ContractDetails已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.ContractService">
            <summary>
            Contract相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractService.#ctor(HS.VIP.Management.Repository.ContractRepository)">
            <summary>
            构造函数，通过依赖注入 Contract 仓储操作类
            </summary>
            <param name="contractRepository">Contract仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractService.AddOne(HS.VIP.Management.Model.MContract)">
            <summary>
            新增一条Contract记录
            </summary>
            <param name="model">Contract数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MContract})">
            <summary>
            批量新增Contract数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractService.UpdateById(HS.VIP.Management.Model.MContract)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MContract})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 Contract 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractService.GetOneModel(HS.VIP.Management.Model.MContractCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MContractCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractService.GetAllList(HS.VIP.Management.Model.MContractCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractService.GetAllListNonOrdering(HS.VIP.Management.Model.MContractCondtion)">
            <summary>
            获取所有未下单的合同
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractService.Export(HS.VIP.Management.Model.MContractCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ContractService.CheckInfo(HS.VIP.Management.Model.MContract,HS.VIP.Management.Model.MContract)">
            <summary>
            检查Contract数据有效性
            </summary>
            <param name="model">待检查Contract数据模型</param>
            <param name="model">待检查Contract已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.CorporationService">
            <summary>
            Corporation相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.#ctor(HS.VIP.Management.Repository.CorporationRepository)">
            <summary>
            构造函数，通过依赖注入 Corporation 仓储操作类
            </summary>
            <param name="corporationRepository">Corporation仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.AddOne(HS.VIP.Management.Model.MCorporation)">
            <summary>
            新增一条Corporation记录
            </summary>
            <param name="model">Corporation数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MCorporation})">
            <summary>
            批量新增Corporation数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.UpdateById(HS.VIP.Management.Model.MCorporation)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MCorporation})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 Corporation 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.GetOneModel(HS.VIP.Management.Model.MCorporationCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MCorporationCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.GetAllList(HS.VIP.Management.Model.MCorporationCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.Export(HS.VIP.Management.Model.MCorporationCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CorporationService.CheckInfo(HS.VIP.Management.Model.MCorporation,HS.VIP.Management.Model.MCorporation)">
            <summary>
            检查Corporation数据有效性
            </summary>
            <param name="model">待检查Corporation数据模型</param>
            <param name="model">待检查Corporation已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.CustomerContractManagementService">
            <summary>
            CustomerContractManagement相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.#ctor(HS.VIP.Management.Repository.CustomerContractManagementRepository)">
            <summary>
            构造函数，通过依赖注入 CustomerContractManagement 仓储操作类
            </summary>
            <param name="customerContractManagementRepository">CustomerContractManagement仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.AddOne(HS.VIP.Management.Model.MCustomerContractManagement)">
            <summary>
            新增一条CustomerContractManagement记录
            </summary>
            <param name="model">CustomerContractManagement数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MCustomerContractManagement})">
            <summary>
            批量新增CustomerContractManagement数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.UpdateById(HS.VIP.Management.Model.MCustomerContractManagement)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MCustomerContractManagement})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 CustomerContractManagement 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.GetOneModel(HS.VIP.Management.Model.MCustomerContractManagementCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MCustomerContractManagementCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.GetAllList(HS.VIP.Management.Model.MCustomerContractManagementCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.Export(HS.VIP.Management.Model.MCustomerContractManagementCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.CheckInfo(HS.VIP.Management.Model.MCustomerContractManagement,HS.VIP.Management.Model.MCustomerContractManagement)">
            <summary>
            检查CustomerContractManagement数据有效性
            </summary>
            <param name="model">待检查CustomerContractManagement数据模型</param>
            <param name="model">待检查CustomerContractManagement已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.GetDeadlineContractPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MCustomerContractManagementCondtion})">
            <summary>
            分页获取临期合同数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractManagementService.RemindContractExpiration(System.Collections.Generic.List{System.String})">
            <summary>
            提醒合同即将到期
            </summary>
            <param name="idList"></param>
            <returns></returns>
        </member>
        <member name="T:HS.VIP.Management.Service.CustomerContractStepDiscountService">
            <summary>
            CustomerContractStepDiscount相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractStepDiscountService.#ctor(HS.VIP.Management.Repository.CustomerContractStepDiscountRepository)">
            <summary>
            构造函数，通过依赖注入 CustomerContractStepDiscount 仓储操作类
            </summary>
            <param name="customerContractStepDiscountRepository">CustomerContractStepDiscount仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractStepDiscountService.AddOne(HS.VIP.Management.Model.MCustomerContractStepDiscount)">
            <summary>
            新增一条CustomerContractStepDiscount记录
            </summary>
            <param name="model">CustomerContractStepDiscount数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractStepDiscountService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MCustomerContractStepDiscount})">
            <summary>
            批量新增CustomerContractStepDiscount数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractStepDiscountService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractStepDiscountService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractStepDiscountService.UpdateById(HS.VIP.Management.Model.MCustomerContractStepDiscount)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractStepDiscountService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MCustomerContractStepDiscount})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractStepDiscountService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 CustomerContractStepDiscount 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractStepDiscountService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractStepDiscountService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractStepDiscountService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractStepDiscountService.GetOneModel(HS.VIP.Management.Model.MCustomerContractStepDiscountCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractStepDiscountService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractStepDiscountService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MCustomerContractStepDiscountCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractStepDiscountService.GetAllList(HS.VIP.Management.Model.MCustomerContractStepDiscountCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractStepDiscountService.Export(HS.VIP.Management.Model.MCustomerContractStepDiscountCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerContractStepDiscountService.CheckInfo(HS.VIP.Management.Model.MCustomerContractStepDiscount,HS.VIP.Management.Model.MCustomerContractStepDiscount)">
            <summary>
            检查CustomerContractStepDiscount数据有效性
            </summary>
            <param name="model">待检查CustomerContractStepDiscount数据模型</param>
            <param name="model">待检查CustomerContractStepDiscount已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.CustomerInformationRegistrationService">
            <summary>
            CustomerInformationRegistration相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.#ctor(HS.VIP.Management.Repository.CustomerInformationRegistrationRepository)">
            <summary>
            构造函数，通过依赖注入 CustomerInformationRegistration 仓储操作类
            </summary>
            <param name="customerInformationRegistrationRepository">CustomerInformationRegistration仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.AddOne(HS.VIP.Management.Model.MCustomerInformationRegistration)">
            <summary>
            新增一条CustomerInformationRegistration记录
            </summary>
            <param name="model">CustomerInformationRegistration数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MCustomerInformationRegistration})">
            <summary>
            批量新增CustomerInformationRegistration数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.UpdateById(HS.VIP.Management.Model.MCustomerInformationRegistration)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MCustomerInformationRegistration})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 CustomerInformationRegistration 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.GetOneModel(HS.VIP.Management.Model.MCustomerInformationRegistrationCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MCustomerInformationRegistrationCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.GetAllList(HS.VIP.Management.Model.MCustomerInformationRegistrationCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.Export(HS.VIP.Management.Model.MCustomerInformationRegistrationCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.CustomerInformationRegistrationService.CheckInfo(HS.VIP.Management.Model.MCustomerInformationRegistration,HS.VIP.Management.Model.MCustomerInformationRegistration)">
            <summary>
            检查CustomerInformationRegistration数据有效性
            </summary>
            <param name="model">待检查CustomerInformationRegistration数据模型</param>
            <param name="model">待检查CustomerInformationRegistration已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.DictionaryService">
            <summary>
            Dictionary相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.#ctor(HS.VIP.Management.Repository.DictionaryRepository)">
            <summary>
            构造函数，通过依赖注入 Dictionary 仓储操作类
            </summary>
            <param name="dictionaryRepository">Dictionary仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.AddOne(HS.VIP.Management.Model.MDictionary)">
            <summary>
            新增一条Dictionary记录
            </summary>
            <param name="model">Dictionary数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MDictionary})">
            <summary>
            批量新增Dictionary数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.UpdateById(HS.VIP.Management.Model.MDictionary)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MDictionary})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 Dictionary 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.GetOneModel(HS.VIP.Management.Model.MDictionaryCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MDictionaryCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.GetAllList(HS.VIP.Management.Model.MDictionaryCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.Export(HS.VIP.Management.Model.MDictionaryCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.CheckInfo(HS.VIP.Management.Model.MDictionary,HS.VIP.Management.Model.MDictionary)">
            <summary>
            检查Dictionary数据有效性
            </summary>
            <param name="model">待检查Dictionary数据模型</param>
            <param name="model">待检查Dictionary已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.DictionaryService.GetDictItemsByTypeKey(System.Collections.Generic.List{System.String})">
            <summary>
            根据字典类型名获取字典子项
            </summary>
            <param name="typeKeys"></param>
            <returns></returns>
        </member>
        <member name="T:HS.VIP.Management.Service.FilesManagementService">
            <summary>
            FilesManagement相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.FilesManagementService.#ctor(HS.VIP.Management.Repository.FilesManagementRepository)">
            <summary>
            构造函数，通过依赖注入 FilesManagement 仓储操作类
            </summary>
            <param name="filesManagementRepository">FilesManagement仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.FilesManagementService.AddOne(HS.VIP.Management.Model.MFilesManagement)">
            <summary>
            新增一条FilesManagement记录
            </summary>
            <param name="model">FilesManagement数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FilesManagementService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MFilesManagement})">
            <summary>
            批量新增FilesManagement数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FilesManagementService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FilesManagementService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FilesManagementService.UpdateById(HS.VIP.Management.Model.MFilesManagement)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FilesManagementService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MFilesManagement})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FilesManagementService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 FilesManagement 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FilesManagementService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FilesManagementService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FilesManagementService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FilesManagementService.GetOneModel(HS.VIP.Management.Model.MFilesManagementCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FilesManagementService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FilesManagementService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MFilesManagementCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FilesManagementService.GetAllList(HS.VIP.Management.Model.MFilesManagementCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FilesManagementService.Export(HS.VIP.Management.Model.MFilesManagementCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FilesManagementService.CheckInfo(HS.VIP.Management.Model.MFilesManagement,HS.VIP.Management.Model.MFilesManagement)">
            <summary>
            检查FilesManagement数据有效性
            </summary>
            <param name="model">待检查FilesManagement数据模型</param>
            <param name="model">待检查FilesManagement已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.FlightInquiryAndTrackingService">
            <summary>
            FlightInquiryAndTracking相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightInquiryAndTrackingService.#ctor(HS.VIP.Management.Repository.FlightInquiryAndTrackingRepository)">
            <summary>
            构造函数，通过依赖注入 FlightInquiryAndTracking 仓储操作类
            </summary>
            <param name="flightInquiryAndTrackingRepository">FlightInquiryAndTracking仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightInquiryAndTrackingService.AddOne(HS.VIP.Management.Model.MFlightInquiryAndTracking)">
            <summary>
            新增一条FlightInquiryAndTracking记录
            </summary>
            <param name="model">FlightInquiryAndTracking数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightInquiryAndTrackingService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MFlightInquiryAndTracking})">
            <summary>
            批量新增FlightInquiryAndTracking数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightInquiryAndTrackingService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightInquiryAndTrackingService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightInquiryAndTrackingService.UpdateById(HS.VIP.Management.Model.MFlightInquiryAndTracking)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightInquiryAndTrackingService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MFlightInquiryAndTracking})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightInquiryAndTrackingService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 FlightInquiryAndTracking 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightInquiryAndTrackingService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightInquiryAndTrackingService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightInquiryAndTrackingService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightInquiryAndTrackingService.GetOneModel(HS.VIP.Management.Model.MFlightInquiryAndTrackingCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightInquiryAndTrackingService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightInquiryAndTrackingService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MFlightInquiryAndTrackingCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightInquiryAndTrackingService.GetAllList(HS.VIP.Management.Model.MFlightInquiryAndTrackingCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightInquiryAndTrackingService.Export(HS.VIP.Management.Model.MFlightInquiryAndTrackingCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightInquiryAndTrackingService.CheckInfo(HS.VIP.Management.Model.MFlightInquiryAndTracking,HS.VIP.Management.Model.MFlightInquiryAndTracking)">
            <summary>
            检查FlightInquiryAndTracking数据有效性
            </summary>
            <param name="model">待检查FlightInquiryAndTracking数据模型</param>
            <param name="model">待检查FlightInquiryAndTracking已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.FlightScheduleInquiryService">
            <summary>
            FlightScheduleInquiry相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightScheduleInquiryService.#ctor(HS.VIP.Management.Repository.FlightScheduleInquiryRepository)">
            <summary>
            构造函数，通过依赖注入 FlightScheduleInquiry 仓储操作类
            </summary>
            <param name="flightScheduleInquiryRepository">FlightScheduleInquiry仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightScheduleInquiryService.AddOne(HS.VIP.Management.Model.MFlightScheduleInquiry)">
            <summary>
            新增一条FlightScheduleInquiry记录
            </summary>
            <param name="model">FlightScheduleInquiry数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightScheduleInquiryService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MFlightScheduleInquiry})">
            <summary>
            批量新增FlightScheduleInquiry数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightScheduleInquiryService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightScheduleInquiryService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightScheduleInquiryService.UpdateById(HS.VIP.Management.Model.MFlightScheduleInquiry)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightScheduleInquiryService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MFlightScheduleInquiry})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightScheduleInquiryService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 FlightScheduleInquiry 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightScheduleInquiryService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightScheduleInquiryService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightScheduleInquiryService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightScheduleInquiryService.GetOneModel(HS.VIP.Management.Model.MFlightScheduleInquiryCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightScheduleInquiryService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightScheduleInquiryService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MFlightScheduleInquiryCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightScheduleInquiryService.GetAllList(HS.VIP.Management.Model.MFlightScheduleInquiryCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightScheduleInquiryService.Export(HS.VIP.Management.Model.MFlightScheduleInquiryCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FlightScheduleInquiryService.CheckInfo(HS.VIP.Management.Model.MFlightScheduleInquiry,HS.VIP.Management.Model.MFlightScheduleInquiry)">
            <summary>
            检查FlightScheduleInquiry数据有效性
            </summary>
            <param name="model">待检查FlightScheduleInquiry数据模型</param>
            <param name="model">待检查FlightScheduleInquiry已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.FrequentFlyerRecordService">
            <summary>
            FrequentFlyerRecord相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.FrequentFlyerRecordService.#ctor(HS.VIP.Management.Repository.FrequentFlyerRecordRepository)">
            <summary>
            构造函数，通过依赖注入 FrequentFlyerRecord 仓储操作类
            </summary>
            <param name="frequentFlyerRecordRepository">FrequentFlyerRecord仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.FrequentFlyerRecordService.AddOne(HS.VIP.Management.Model.MFrequentFlyerRecord)">
            <summary>
            新增一条FrequentFlyerRecord记录
            </summary>
            <param name="model">FrequentFlyerRecord数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FrequentFlyerRecordService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MFrequentFlyerRecord})">
            <summary>
            批量新增FrequentFlyerRecord数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FrequentFlyerRecordService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FrequentFlyerRecordService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FrequentFlyerRecordService.UpdateById(HS.VIP.Management.Model.MFrequentFlyerRecord)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FrequentFlyerRecordService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MFrequentFlyerRecord})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FrequentFlyerRecordService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 FrequentFlyerRecord 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FrequentFlyerRecordService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FrequentFlyerRecordService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FrequentFlyerRecordService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FrequentFlyerRecordService.GetOneModel(HS.VIP.Management.Model.MFrequentFlyerRecordCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FrequentFlyerRecordService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FrequentFlyerRecordService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MFrequentFlyerRecordCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FrequentFlyerRecordService.GetAllList(HS.VIP.Management.Model.MFrequentFlyerRecordCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FrequentFlyerRecordService.Export(HS.VIP.Management.Model.MFrequentFlyerRecordCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.FrequentFlyerRecordService.CheckInfo(HS.VIP.Management.Model.MFrequentFlyerRecord,HS.VIP.Management.Model.MFrequentFlyerRecord)">
            <summary>
            检查FrequentFlyerRecord数据有效性
            </summary>
            <param name="model">待检查FrequentFlyerRecord数据模型</param>
            <param name="model">待检查FrequentFlyerRecord已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.GuestPreferenceTipsService">
            <summary>
            GuestPreferenceTips相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.GuestPreferenceTipsService.#ctor(HS.VIP.Management.Repository.GuestPreferenceTipsRepository)">
            <summary>
            构造函数，通过依赖注入 GuestPreferenceTips 仓储操作类
            </summary>
            <param name="guestPreferenceTipsRepository">GuestPreferenceTips仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.GuestPreferenceTipsService.AddOne(HS.VIP.Management.Model.MGuestPreferenceTips)">
            <summary>
            新增一条GuestPreferenceTips记录
            </summary>
            <param name="model">GuestPreferenceTips数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.GuestPreferenceTipsService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MGuestPreferenceTips})">
            <summary>
            批量新增GuestPreferenceTips数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.GuestPreferenceTipsService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.GuestPreferenceTipsService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.GuestPreferenceTipsService.UpdateById(HS.VIP.Management.Model.MGuestPreferenceTips)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.GuestPreferenceTipsService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MGuestPreferenceTips})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.GuestPreferenceTipsService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 GuestPreferenceTips 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.GuestPreferenceTipsService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.GuestPreferenceTipsService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.GuestPreferenceTipsService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.GuestPreferenceTipsService.GetOneModel(HS.VIP.Management.Model.MGuestPreferenceTipsCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.GuestPreferenceTipsService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.GuestPreferenceTipsService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MGuestPreferenceTipsCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.GuestPreferenceTipsService.GetAllList(HS.VIP.Management.Model.MGuestPreferenceTipsCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.GuestPreferenceTipsService.Export(HS.VIP.Management.Model.MGuestPreferenceTipsCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.GuestPreferenceTipsService.CheckInfo(HS.VIP.Management.Model.MGuestPreferenceTips,HS.VIP.Management.Model.MGuestPreferenceTips)">
            <summary>
            检查GuestPreferenceTips数据有效性
            </summary>
            <param name="model">待检查GuestPreferenceTips数据模型</param>
            <param name="model">待检查GuestPreferenceTips已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationService">
            <summary>
            HallAndRoomInspectionManagementConfiguration相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationService.#ctor(HS.VIP.Management.Repository.HallAndRoomInspectionManagementConfigurationRepository)">
            <summary>
            构造函数，通过依赖注入 HallAndRoomInspectionManagementConfiguration 仓储操作类
            </summary>
            <param name="hallAndRoomInspectionManagementConfigurationRepository">HallAndRoomInspectionManagementConfiguration仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationService.AddOne(HS.VIP.Management.Model.MHallAndRoomInspectionManagementConfiguration)">
            <summary>
            新增一条HallAndRoomInspectionManagementConfiguration记录
            </summary>
            <param name="model">HallAndRoomInspectionManagementConfiguration数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MHallAndRoomInspectionManagementConfiguration})">
            <summary>
            批量新增HallAndRoomInspectionManagementConfiguration数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationService.UpdateById(HS.VIP.Management.Model.MHallAndRoomInspectionManagementConfiguration)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MHallAndRoomInspectionManagementConfiguration})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 HallAndRoomInspectionManagementConfiguration 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationService.GetOneModel(HS.VIP.Management.Model.MHallAndRoomInspectionManagementConfigurationCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MHallAndRoomInspectionManagementConfigurationCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationService.GetAllList(HS.VIP.Management.Model.MHallAndRoomInspectionManagementConfigurationCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationService.Export(HS.VIP.Management.Model.MHallAndRoomInspectionManagementConfigurationCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HallAndRoomInspectionManagementConfigurationService.CheckInfo(HS.VIP.Management.Model.MHallAndRoomInspectionManagementConfiguration,HS.VIP.Management.Model.MHallAndRoomInspectionManagementConfiguration)">
            <summary>
            检查HallAndRoomInspectionManagementConfiguration数据有效性
            </summary>
            <param name="model">待检查HallAndRoomInspectionManagementConfiguration数据模型</param>
            <param name="model">待检查HallAndRoomInspectionManagementConfiguration已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.HistoricalReservationInquiryService">
            <summary>
            HistoricalReservationInquiry相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.HistoricalReservationInquiryService.#ctor(HS.VIP.Management.Repository.HistoricalReservationInquiryRepository)">
            <summary>
            构造函数，通过依赖注入 HistoricalReservationInquiry 仓储操作类
            </summary>
            <param name="historicalReservationInquiryRepository">HistoricalReservationInquiry仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.HistoricalReservationInquiryService.AddOne(HS.VIP.Management.Model.MHistoricalReservationInquiry)">
            <summary>
            新增一条HistoricalReservationInquiry记录
            </summary>
            <param name="model">HistoricalReservationInquiry数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HistoricalReservationInquiryService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MHistoricalReservationInquiry})">
            <summary>
            批量新增HistoricalReservationInquiry数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HistoricalReservationInquiryService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HistoricalReservationInquiryService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HistoricalReservationInquiryService.UpdateById(HS.VIP.Management.Model.MHistoricalReservationInquiry)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HistoricalReservationInquiryService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MHistoricalReservationInquiry})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HistoricalReservationInquiryService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 HistoricalReservationInquiry 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HistoricalReservationInquiryService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HistoricalReservationInquiryService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HistoricalReservationInquiryService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HistoricalReservationInquiryService.GetOneModel(HS.VIP.Management.Model.MHistoricalReservationInquiryCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HistoricalReservationInquiryService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HistoricalReservationInquiryService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MHistoricalReservationInquiryCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HistoricalReservationInquiryService.GetAllList(HS.VIP.Management.Model.MHistoricalReservationInquiryCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HistoricalReservationInquiryService.Export(HS.VIP.Management.Model.MHistoricalReservationInquiryCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.HistoricalReservationInquiryService.CheckInfo(HS.VIP.Management.Model.MHistoricalReservationInquiry,HS.VIP.Management.Model.MHistoricalReservationInquiry)">
            <summary>
            检查HistoricalReservationInquiry数据有效性
            </summary>
            <param name="model">待检查HistoricalReservationInquiry数据模型</param>
            <param name="model">待检查HistoricalReservationInquiry已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.InventoryOrderDetailsService">
            <summary>
            InventoryOrderDetails相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderDetailsService.#ctor(HS.VIP.Management.Repository.InventoryOrderDetailsRepository)">
            <summary>
            构造函数，通过依赖注入 InventoryOrderDetails 仓储操作类
            </summary>
            <param name="inventoryOrderDetailsRepository">InventoryOrderDetails仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderDetailsService.AddOne(HS.VIP.Management.Model.MInventoryOrderDetails)">
            <summary>
            新增一条InventoryOrderDetails记录
            </summary>
            <param name="model">InventoryOrderDetails数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderDetailsService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MInventoryOrderDetails})">
            <summary>
            批量新增InventoryOrderDetails数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderDetailsService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderDetailsService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderDetailsService.UpdateById(HS.VIP.Management.Model.MInventoryOrderDetails)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderDetailsService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MInventoryOrderDetails})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderDetailsService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 InventoryOrderDetails 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderDetailsService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderDetailsService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderDetailsService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderDetailsService.GetOneModel(HS.VIP.Management.Model.MInventoryOrderDetailsCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderDetailsService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderDetailsService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MInventoryOrderDetailsCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderDetailsService.GetAllList(HS.VIP.Management.Model.MInventoryOrderDetailsCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderDetailsService.Export(HS.VIP.Management.Model.MInventoryOrderDetailsCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderDetailsService.CheckInfo(HS.VIP.Management.Model.MInventoryOrderDetails,HS.VIP.Management.Model.MInventoryOrderDetails)">
            <summary>
            检查InventoryOrderDetails数据有效性
            </summary>
            <param name="model">待检查InventoryOrderDetails数据模型</param>
            <param name="model">待检查InventoryOrderDetails已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.InventoryOrderService">
            <summary>
            InventoryOrder相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderService.#ctor(HS.VIP.Management.Repository.InventoryOrderRepository)">
            <summary>
            构造函数，通过依赖注入 InventoryOrder 仓储操作类
            </summary>
            <param name="inventoryOrderRepository">InventoryOrder仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderService.AddOne(HS.VIP.Management.Model.MInventoryOrder)">
            <summary>
            新增一条InventoryOrder记录
            </summary>
            <param name="model">InventoryOrder数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MInventoryOrder})">
            <summary>
            批量新增InventoryOrder数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderService.UpdateById(HS.VIP.Management.Model.MInventoryOrder)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MInventoryOrder})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 InventoryOrder 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderService.GetOneModel(HS.VIP.Management.Model.MInventoryOrderCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MInventoryOrderCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderService.GetAllList(HS.VIP.Management.Model.MInventoryOrderCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderService.Export(HS.VIP.Management.Model.MInventoryOrderCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.InventoryOrderService.CheckInfo(HS.VIP.Management.Model.MInventoryOrder,HS.VIP.Management.Model.MInventoryOrder)">
            <summary>
            检查InventoryOrder数据有效性
            </summary>
            <param name="model">待检查InventoryOrder数据模型</param>
            <param name="model">待检查InventoryOrder已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.MaterialsRequisitionDetailsService">
            <summary>
            MaterialsRequisitionDetails相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionDetailsService.#ctor(HS.VIP.Management.Repository.MaterialsRequisitionDetailsRepository)">
            <summary>
            构造函数，通过依赖注入 MaterialsRequisitionDetails 仓储操作类
            </summary>
            <param name="materialsRequisitionDetailsRepository">MaterialsRequisitionDetails仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionDetailsService.AddOne(HS.VIP.Management.Model.MMaterialsRequisitionDetails)">
            <summary>
            新增一条MaterialsRequisitionDetails记录
            </summary>
            <param name="model">MaterialsRequisitionDetails数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionDetailsService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MMaterialsRequisitionDetails})">
            <summary>
            批量新增MaterialsRequisitionDetails数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionDetailsService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionDetailsService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionDetailsService.UpdateById(HS.VIP.Management.Model.MMaterialsRequisitionDetails)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionDetailsService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MMaterialsRequisitionDetails})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionDetailsService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 MaterialsRequisitionDetails 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionDetailsService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionDetailsService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionDetailsService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionDetailsService.GetOneModel(HS.VIP.Management.Model.MMaterialsRequisitionDetailsCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionDetailsService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionDetailsService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MMaterialsRequisitionDetailsCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionDetailsService.GetAllList(HS.VIP.Management.Model.MMaterialsRequisitionDetailsCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionDetailsService.Export(HS.VIP.Management.Model.MMaterialsRequisitionDetailsCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionDetailsService.CheckInfo(HS.VIP.Management.Model.MMaterialsRequisitionDetails,HS.VIP.Management.Model.MMaterialsRequisitionDetails)">
            <summary>
            检查MaterialsRequisitionDetails数据有效性
            </summary>
            <param name="model">待检查MaterialsRequisitionDetails数据模型</param>
            <param name="model">待检查MaterialsRequisitionDetails已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.MaterialsRequisitionService">
            <summary>
            MaterialsRequisition相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionService.#ctor(HS.VIP.Management.Repository.MaterialsRequisitionRepository)">
            <summary>
            构造函数，通过依赖注入 MaterialsRequisition 仓储操作类
            </summary>
            <param name="materialsRequisitionRepository">MaterialsRequisition仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionService.AddOne(HS.VIP.Management.Model.MMaterialsRequisition)">
            <summary>
            新增一条MaterialsRequisition记录
            </summary>
            <param name="model">MaterialsRequisition数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MMaterialsRequisition})">
            <summary>
            批量新增MaterialsRequisition数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionService.UpdateById(HS.VIP.Management.Model.MMaterialsRequisition)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MMaterialsRequisition})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 MaterialsRequisition 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionService.GetOneModel(HS.VIP.Management.Model.MMaterialsRequisitionCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MMaterialsRequisitionCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionService.GetAllList(HS.VIP.Management.Model.MMaterialsRequisitionCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionService.Export(HS.VIP.Management.Model.MMaterialsRequisitionCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionService.CheckInfo(HS.VIP.Management.Model.MMaterialsRequisition,HS.VIP.Management.Model.MMaterialsRequisition)">
            <summary>
            检查MaterialsRequisition数据有效性
            </summary>
            <param name="model">待检查MaterialsRequisition数据模型</param>
            <param name="model">待检查MaterialsRequisition已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionService.SubmitById(System.String)">
            <summary>
            根据Id提交申领单
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionService.ApprovalById(HS.VIP.Management.Model.MApprovalReq)">
            <summary>
            根据Id审核申领单 agree 同意，refuse拒绝
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.MaterialsRequisitionService.GetPageListByInventoryId(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MMaterialsRequisitionCondtion})">
            <summary>
            根据库存id获取入库单分页数据
            </summary>
            <param name="pageQueryCondition"></param>
            <returns></returns>
        </member>
        <member name="T:HS.VIP.Management.Service.OfficeInspectionManagementDetailsService">
            <summary>
            OfficeInspectionManagementDetails相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementDetailsService.#ctor(HS.VIP.Management.Repository.OfficeInspectionManagementDetailsRepository)">
            <summary>
            构造函数，通过依赖注入 OfficeInspectionManagementDetails 仓储操作类
            </summary>
            <param name="officeInspectionManagementDetailsRepository">OfficeInspectionManagementDetails仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementDetailsService.AddOne(HS.VIP.Management.Model.MOfficeInspectionManagementDetails)">
            <summary>
            新增一条OfficeInspectionManagementDetails记录
            </summary>
            <param name="model">OfficeInspectionManagementDetails数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementDetailsService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MOfficeInspectionManagementDetails})">
            <summary>
            批量新增OfficeInspectionManagementDetails数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementDetailsService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementDetailsService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementDetailsService.UpdateById(HS.VIP.Management.Model.MOfficeInspectionManagementDetails)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementDetailsService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MOfficeInspectionManagementDetails})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementDetailsService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 OfficeInspectionManagementDetails 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementDetailsService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementDetailsService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementDetailsService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementDetailsService.GetOneModel(HS.VIP.Management.Model.MOfficeInspectionManagementDetailsCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementDetailsService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementDetailsService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MOfficeInspectionManagementDetailsCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementDetailsService.GetAllList(HS.VIP.Management.Model.MOfficeInspectionManagementDetailsCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementDetailsService.Export(HS.VIP.Management.Model.MOfficeInspectionManagementDetailsCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementDetailsService.CheckInfo(HS.VIP.Management.Model.MOfficeInspectionManagementDetails,HS.VIP.Management.Model.MOfficeInspectionManagementDetails)">
            <summary>
            检查OfficeInspectionManagementDetails数据有效性
            </summary>
            <param name="model">待检查OfficeInspectionManagementDetails数据模型</param>
            <param name="model">待检查OfficeInspectionManagementDetails已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementDetailsService.GetItemAbnormalityTotalList(HS.VIP.Management.Model.MChartReq)">
            <summary>
            根据时间查询项目检修异常统计
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="T:HS.VIP.Management.Service.OfficeInspectionManagementService">
            <summary>
            OfficeInspectionManagement相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementService.#ctor(HS.VIP.Management.Repository.OfficeInspectionManagementRepository)">
            <summary>
            构造函数，通过依赖注入 OfficeInspectionManagement 仓储操作类
            </summary>
            <param name="officeInspectionManagementRepository">OfficeInspectionManagement仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementService.AddOne(HS.VIP.Management.Model.MOfficeInspectionManagement)">
            <summary>
            新增一条OfficeInspectionManagement记录
            </summary>
            <param name="model">OfficeInspectionManagement数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MOfficeInspectionManagement})">
            <summary>
            批量新增OfficeInspectionManagement数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementService.UpdateById(HS.VIP.Management.Model.MOfficeInspectionManagement)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MOfficeInspectionManagement})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 OfficeInspectionManagement 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementService.GetOneModel(HS.VIP.Management.Model.MOfficeInspectionManagementCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MOfficeInspectionManagementCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementService.GetAllList(HS.VIP.Management.Model.MOfficeInspectionManagementCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementService.Export(HS.VIP.Management.Model.MOfficeInspectionManagementCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OfficeInspectionManagementService.CheckInfo(HS.VIP.Management.Model.MOfficeInspectionManagement,HS.VIP.Management.Model.MOfficeInspectionManagement)">
            <summary>
            检查OfficeInspectionManagement数据有效性
            </summary>
            <param name="model">待检查OfficeInspectionManagement数据模型</param>
            <param name="model">待检查OfficeInspectionManagement已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.OrderingManagementDetailsService">
            <summary>
            OrderingManagementDetails相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementDetailsService.#ctor(HS.VIP.Management.Repository.OrderingManagementDetailsRepository)">
            <summary>
            构造函数，通过依赖注入 OrderingManagementDetails 仓储操作类
            </summary>
            <param name="orderingManagementDetailsRepository">OrderingManagementDetails仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementDetailsService.AddOne(HS.VIP.Management.Model.MOrderingManagementDetails)">
            <summary>
            新增一条OrderingManagementDetails记录
            </summary>
            <param name="model">OrderingManagementDetails数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementDetailsService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MOrderingManagementDetails})">
            <summary>
            批量新增OrderingManagementDetails数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementDetailsService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementDetailsService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementDetailsService.UpdateById(HS.VIP.Management.Model.MOrderingManagementDetails)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementDetailsService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MOrderingManagementDetails})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementDetailsService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 OrderingManagementDetails 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementDetailsService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementDetailsService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementDetailsService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementDetailsService.GetOneModel(HS.VIP.Management.Model.MOrderingManagementDetailsCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementDetailsService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementDetailsService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MOrderingManagementDetailsCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementDetailsService.GetAllList(HS.VIP.Management.Model.MOrderingManagementDetailsCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementDetailsService.Export(HS.VIP.Management.Model.MOrderingManagementDetailsCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementDetailsService.GetAllSpendCollect(HS.VIP.Management.Model.condtion.MGuestSpendingCondition)">
            <summary>
            获取所有消费商品汇总
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementDetailsService.CheckInfo(HS.VIP.Management.Model.MOrderingManagementDetails,HS.VIP.Management.Model.MOrderingManagementDetails)">
            <summary>
            检查OrderingManagementDetails数据有效性
            </summary>
            <param name="model">待检查OrderingManagementDetails数据模型</param>
            <param name="model">待检查OrderingManagementDetails已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.OrderingManagementService">
            <summary>
            OrderingManagement相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementService.#ctor(HS.VIP.Management.Repository.OrderingManagementRepository,HS.VIP.Management.Repository.OrderingManagementDetailsRepository)">
            <summary>
            构造函数，通过依赖注入 OrderingManagement 仓储操作类
            </summary>
            <param name="orderingManagementRepositoryOpert"></param>
            <param name="orderingManagementDetailsRepository"></param>
            <param name="orderingManagementRepository">OrderingManagement仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementService.AddOne(HS.VIP.Management.Model.MOrderingManagement)">
            <summary>
            新增一条OrderingManagement记录
            </summary>
            <param name="model">OrderingManagement数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MOrderingManagement})">
            <summary>
            批量新增OrderingManagement数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementService.UpdateById(HS.VIP.Management.Model.MOrderingManagement)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MOrderingManagement})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 OrderingManagement 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementService.GetOneModel(HS.VIP.Management.Model.MOrderingManagementCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MOrderingManagementCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementService.GetAllList(HS.VIP.Management.Model.MOrderingManagementCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementService.Export(HS.VIP.Management.Model.MOrderingManagementCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrderingManagementService.CheckInfo(HS.VIP.Management.Model.MOrderingManagement,HS.VIP.Management.Model.MOrderingManagement)">
            <summary>
            检查OrderingManagement数据有效性
            </summary>
            <param name="model">待检查OrderingManagement数据模型</param>
            <param name="model">待检查OrderingManagement已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.OrdersService">
            <summary>
            Orders相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.OrdersService.#ctor(HS.VIP.Management.Repository.OrdersRepository)">
            <summary>
            构造函数，通过依赖注入 Orders 仓储操作类
            </summary>
            <param name="ordersRepository">Orders仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.OrdersService.AddOne(HS.VIP.Management.Model.MOrders)">
            <summary>
            新增一条Orders记录
            </summary>
            <param name="model">Orders数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrdersService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MOrders})">
            <summary>
            批量新增Orders数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrdersService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrdersService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrdersService.UpdateById(HS.VIP.Management.Model.MOrders)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrdersService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MOrders})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrdersService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 Orders 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrdersService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrdersService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrdersService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrdersService.GetOneModel(HS.VIP.Management.Model.MOrdersCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrdersService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrdersService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MOrdersCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrdersService.GetAllList(HS.VIP.Management.Model.MOrdersCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrdersService.Export(HS.VIP.Management.Model.MOrdersCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.OrdersService.CheckInfo(HS.VIP.Management.Model.MOrders,HS.VIP.Management.Model.MOrders)">
            <summary>
            检查Orders数据有效性
            </summary>
            <param name="model">待检查Orders数据模型</param>
            <param name="model">待检查Orders已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.ParkingPositionRecommendationRulesService">
            <summary>
            ParkingPositionRecommendationRules相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ParkingPositionRecommendationRulesService.#ctor(HS.VIP.Management.Repository.ParkingPositionRecommendationRulesRepository)">
            <summary>
            构造函数，通过依赖注入 ParkingPositionRecommendationRules 仓储操作类
            </summary>
            <param name="parkingPositionRecommendationRulesRepository">ParkingPositionRecommendationRules仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.ParkingPositionRecommendationRulesService.AddOne(HS.VIP.Management.Model.MParkingPositionRecommendationRules)">
            <summary>
            新增一条ParkingPositionRecommendationRules记录
            </summary>
            <param name="model">ParkingPositionRecommendationRules数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ParkingPositionRecommendationRulesService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MParkingPositionRecommendationRules})">
            <summary>
            批量新增ParkingPositionRecommendationRules数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ParkingPositionRecommendationRulesService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ParkingPositionRecommendationRulesService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ParkingPositionRecommendationRulesService.UpdateById(HS.VIP.Management.Model.MParkingPositionRecommendationRules)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ParkingPositionRecommendationRulesService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MParkingPositionRecommendationRules})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ParkingPositionRecommendationRulesService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 ParkingPositionRecommendationRules 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ParkingPositionRecommendationRulesService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ParkingPositionRecommendationRulesService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ParkingPositionRecommendationRulesService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ParkingPositionRecommendationRulesService.GetOneModel(HS.VIP.Management.Model.MParkingPositionRecommendationRulesCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ParkingPositionRecommendationRulesService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ParkingPositionRecommendationRulesService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MParkingPositionRecommendationRulesCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ParkingPositionRecommendationRulesService.GetAllList(HS.VIP.Management.Model.MParkingPositionRecommendationRulesCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ParkingPositionRecommendationRulesService.Export(HS.VIP.Management.Model.MParkingPositionRecommendationRulesCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ParkingPositionRecommendationRulesService.CheckInfo(HS.VIP.Management.Model.MParkingPositionRecommendationRules,HS.VIP.Management.Model.MParkingPositionRecommendationRules)">
            <summary>
            检查ParkingPositionRecommendationRules数据有效性
            </summary>
            <param name="model">待检查ParkingPositionRecommendationRules数据模型</param>
            <param name="model">待检查ParkingPositionRecommendationRules已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.PersonnelAndCarAllocationService">
            <summary>
            PersonnelAndCarAllocation相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationService.#ctor(HS.VIP.Management.Repository.PersonnelAndCarAllocationRepository)">
            <summary>
            构造函数，通过依赖注入 PersonnelAndCarAllocation 仓储操作类
            </summary>
            <param name="personnelAndCarAllocationRepository">PersonnelAndCarAllocation仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationService.AddOne(HS.VIP.Management.Model.MPersonnelAndCarAllocation)">
            <summary>
            新增一条PersonnelAndCarAllocation记录
            </summary>
            <param name="model">PersonnelAndCarAllocation数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MPersonnelAndCarAllocation})">
            <summary>
            批量新增PersonnelAndCarAllocation数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationService.UpdateById(HS.VIP.Management.Model.MPersonnelAndCarAllocation)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MPersonnelAndCarAllocation})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 PersonnelAndCarAllocation 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationService.GetOneModel(HS.VIP.Management.Model.MPersonnelAndCarAllocationCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MPersonnelAndCarAllocationCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationService.GetAllList(HS.VIP.Management.Model.MPersonnelAndCarAllocationCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationService.Export(HS.VIP.Management.Model.MPersonnelAndCarAllocationCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationService.CheckInfo(HS.VIP.Management.Model.MPersonnelAndCarAllocation,HS.VIP.Management.Model.MPersonnelAndCarAllocation)">
            <summary>
            检查PersonnelAndCarAllocation数据有效性
            </summary>
            <param name="model">待检查PersonnelAndCarAllocation数据模型</param>
            <param name="model">待检查PersonnelAndCarAllocation已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationService.SaveAllocation(HS.VIP.Management.Model.MPersonnelAndCarAllocation)">
             <summary>
            保存 房间/车辆/人员分配
             </summary>
             <param name="model">数据模型</param>
             <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PersonnelAndCarAllocationService.GetAllocatedIdsList(HS.VIP.Management.Model.MPersonnelAndCarAllocation)">
            <summary>
            获取已分配房间/人员/车辆
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:HS.VIP.Management.Service.PurchaseSettlementService">
            <summary>
            PurchaseSettlement相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchaseSettlementService.#ctor(HS.VIP.Management.Repository.PurchaseSettlementRepository)">
            <summary>
            构造函数，通过依赖注入 PurchaseSettlement 仓储操作类
            </summary>
            <param name="purchaseSettlementRepository">PurchaseSettlement仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchaseSettlementService.AddOne(HS.VIP.Management.Model.MPurchaseSettlement)">
            <summary>
            新增一条PurchaseSettlement记录
            </summary>
            <param name="model">PurchaseSettlement数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchaseSettlementService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MPurchaseSettlement})">
            <summary>
            批量新增PurchaseSettlement数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchaseSettlementService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchaseSettlementService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchaseSettlementService.UpdateById(HS.VIP.Management.Model.MPurchaseSettlement)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchaseSettlementService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MPurchaseSettlement})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchaseSettlementService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 PurchaseSettlement 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchaseSettlementService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchaseSettlementService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchaseSettlementService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchaseSettlementService.GetOneModel(HS.VIP.Management.Model.MPurchaseSettlementCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchaseSettlementService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchaseSettlementService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MPurchaseSettlementCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchaseSettlementService.GetAllList(HS.VIP.Management.Model.MPurchaseSettlementCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchaseSettlementService.Export(HS.VIP.Management.Model.MPurchaseSettlementCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchaseSettlementService.CheckInfo(HS.VIP.Management.Model.MPurchaseSettlement,HS.VIP.Management.Model.MPurchaseSettlement)">
            <summary>
            检查PurchaseSettlement数据有效性
            </summary>
            <param name="model">待检查PurchaseSettlement数据模型</param>
            <param name="model">待检查PurchaseSettlement已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.PurchasingPlanDetailsService">
            <summary>
            PurchasingPlanDetails相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanDetailsService.#ctor(HS.VIP.Management.Repository.PurchasingPlanDetailsRepository)">
            <summary>
            构造函数，通过依赖注入 PurchasingPlanDetails 仓储操作类
            </summary>
            <param name="purchasingPlanDetailsRepository">PurchasingPlanDetails仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanDetailsService.AddOne(HS.VIP.Management.Model.MPurchasingPlanDetails)">
            <summary>
            新增一条PurchasingPlanDetails记录
            </summary>
            <param name="model">PurchasingPlanDetails数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanDetailsService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MPurchasingPlanDetails})">
            <summary>
            批量新增PurchasingPlanDetails数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanDetailsService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanDetailsService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanDetailsService.UpdateById(HS.VIP.Management.Model.MPurchasingPlanDetails)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanDetailsService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MPurchasingPlanDetails})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanDetailsService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 PurchasingPlanDetails 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanDetailsService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanDetailsService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanDetailsService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanDetailsService.GetOneModel(HS.VIP.Management.Model.MPurchasingPlanDetailsCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanDetailsService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanDetailsService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MPurchasingPlanDetailsCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanDetailsService.GetAllList(HS.VIP.Management.Model.MPurchasingPlanDetailsCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanDetailsService.Export(HS.VIP.Management.Model.MPurchasingPlanDetailsCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanDetailsService.CheckInfo(HS.VIP.Management.Model.MPurchasingPlanDetails,HS.VIP.Management.Model.MPurchasingPlanDetails)">
            <summary>
            检查PurchasingPlanDetails数据有效性
            </summary>
            <param name="model">待检查PurchasingPlanDetails数据模型</param>
            <param name="model">待检查PurchasingPlanDetails已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.PurchasingPlanService">
            <summary>
            PurchasingPlan相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanService.#ctor(HS.VIP.Management.Repository.PurchasingPlanRepository)">
            <summary>
            构造函数，通过依赖注入 PurchasingPlan 仓储操作类
            </summary>
            <param name="purchasingPlanRepository">PurchasingPlan仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanService.AddOne(HS.VIP.Management.Model.MPurchasingPlan)">
            <summary>
            新增一条PurchasingPlan记录
            </summary>
            <param name="model">PurchasingPlan数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MPurchasingPlan})">
            <summary>
            批量新增PurchasingPlan数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanService.UpdateById(HS.VIP.Management.Model.MPurchasingPlan)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MPurchasingPlan})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 PurchasingPlan 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanService.GetOneModel(HS.VIP.Management.Model.MPurchasingPlanCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MPurchasingPlanCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanService.GetAllList(HS.VIP.Management.Model.MPurchasingPlanCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanService.Export(HS.VIP.Management.Model.MPurchasingPlanCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.PurchasingPlanService.CheckInfo(HS.VIP.Management.Model.MPurchasingPlan,HS.VIP.Management.Model.MPurchasingPlan)">
            <summary>
            检查PurchasingPlan数据有效性
            </summary>
            <param name="model">待检查PurchasingPlan数据模型</param>
            <param name="model">待检查PurchasingPlan已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.ReminderListOfPersonnelService">
            <summary>
            ReminderListOfPersonnel相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ReminderListOfPersonnelService.#ctor(HS.VIP.Management.Repository.ReminderListOfPersonnelRepository)">
            <summary>
            构造函数，通过依赖注入 ReminderListOfPersonnel 仓储操作类
            </summary>
            <param name="reminderListOfPersonnelRepository">ReminderListOfPersonnel仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.ReminderListOfPersonnelService.AddOne(HS.VIP.Management.Model.MReminderListOfPersonnel)">
            <summary>
            新增一条ReminderListOfPersonnel记录
            </summary>
            <param name="model">ReminderListOfPersonnel数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReminderListOfPersonnelService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MReminderListOfPersonnel})">
            <summary>
            批量新增ReminderListOfPersonnel数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReminderListOfPersonnelService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReminderListOfPersonnelService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReminderListOfPersonnelService.UpdateById(HS.VIP.Management.Model.MReminderListOfPersonnel)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReminderListOfPersonnelService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MReminderListOfPersonnel})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReminderListOfPersonnelService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 ReminderListOfPersonnel 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReminderListOfPersonnelService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReminderListOfPersonnelService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReminderListOfPersonnelService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReminderListOfPersonnelService.GetOneModel(HS.VIP.Management.Model.MReminderListOfPersonnelCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReminderListOfPersonnelService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReminderListOfPersonnelService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MReminderListOfPersonnelCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReminderListOfPersonnelService.GetAllList(HS.VIP.Management.Model.MReminderListOfPersonnelCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReminderListOfPersonnelService.Export(HS.VIP.Management.Model.MReminderListOfPersonnelCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReminderListOfPersonnelService.CheckInfo(HS.VIP.Management.Model.MReminderListOfPersonnel,HS.VIP.Management.Model.MReminderListOfPersonnel)">
            <summary>
            检查ReminderListOfPersonnel数据有效性
            </summary>
            <param name="model">待检查ReminderListOfPersonnel数据模型</param>
            <param name="model">待检查ReminderListOfPersonnel已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.ReturnOrderDetailsService">
            <summary>
            ReturnOrderDetails相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderDetailsService.#ctor(HS.VIP.Management.Repository.ReturnOrderDetailsRepository)">
            <summary>
            构造函数，通过依赖注入 ReturnOrderDetails 仓储操作类
            </summary>
            <param name="returnOrderDetailsRepository">ReturnOrderDetails仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderDetailsService.AddOne(HS.VIP.Management.Model.MReturnOrderDetails)">
            <summary>
            新增一条ReturnOrderDetails记录
            </summary>
            <param name="model">ReturnOrderDetails数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderDetailsService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MReturnOrderDetails})">
            <summary>
            批量新增ReturnOrderDetails数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderDetailsService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderDetailsService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderDetailsService.UpdateById(HS.VIP.Management.Model.MReturnOrderDetails)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderDetailsService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MReturnOrderDetails})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderDetailsService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 ReturnOrderDetails 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderDetailsService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderDetailsService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderDetailsService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderDetailsService.GetOneModel(HS.VIP.Management.Model.MReturnOrderDetailsCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderDetailsService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderDetailsService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MReturnOrderDetailsCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderDetailsService.GetAllList(HS.VIP.Management.Model.MReturnOrderDetailsCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderDetailsService.Export(HS.VIP.Management.Model.MReturnOrderDetailsCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderDetailsService.CheckInfo(HS.VIP.Management.Model.MReturnOrderDetails,HS.VIP.Management.Model.MReturnOrderDetails)">
            <summary>
            检查ReturnOrderDetails数据有效性
            </summary>
            <param name="model">待检查ReturnOrderDetails数据模型</param>
            <param name="model">待检查ReturnOrderDetails已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.ReturnOrderService">
            <summary>
            ReturnOrder相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderService.#ctor(HS.VIP.Management.Repository.ReturnOrderRepository)">
            <summary>
            构造函数，通过依赖注入 ReturnOrder 仓储操作类
            </summary>
            <param name="returnOrderRepository">ReturnOrder仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderService.AddOne(HS.VIP.Management.Model.MReturnOrder)">
            <summary>
            新增一条ReturnOrder记录
            </summary>
            <param name="model">ReturnOrder数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MReturnOrder})">
            <summary>
            批量新增ReturnOrder数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderService.UpdateById(HS.VIP.Management.Model.MReturnOrder)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MReturnOrder})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 ReturnOrder 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderService.GetOneModel(HS.VIP.Management.Model.MReturnOrderCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MReturnOrderCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderService.GetAllList(HS.VIP.Management.Model.MReturnOrderCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderService.Export(HS.VIP.Management.Model.MReturnOrderCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderService.CheckInfo(HS.VIP.Management.Model.MReturnOrder,HS.VIP.Management.Model.MReturnOrder)">
            <summary>
            检查ReturnOrder数据有效性
            </summary>
            <param name="model">待检查ReturnOrder数据模型</param>
            <param name="model">待检查ReturnOrder已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderService.ApprovalById(HS.VIP.Management.Model.MApprovalReq)">
            <summary>
            根据Id审核退货单 agree 同意，refuse拒绝
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ReturnOrderService.GetPageListByInventoryId(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MReturnOrderCondtion})">
            <summary>
            根据库存id获取退货单分页数据
            </summary>
            <param name="pageQueryCondition"></param>
            <returns></returns>
        </member>
        <member name="T:HS.VIP.Management.Service.RoomMaintRecordsService">
            <summary>
            RoomMaintRecords相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomMaintRecordsService.#ctor(HS.VIP.Management.Repository.RoomMaintRecordsRepository)">
            <summary>
            构造函数，通过依赖注入 RoomMaintRecords 仓储操作类
            </summary>
            <param name="roomMaintRecordsRepository">RoomMaintRecords仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomMaintRecordsService.AddOne(HS.VIP.Management.Model.MRoomMaintRecords)">
            <summary>
            新增一条RoomMaintRecords记录
            </summary>
            <param name="model">RoomMaintRecords数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomMaintRecordsService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MRoomMaintRecords})">
            <summary>
            批量新增RoomMaintRecords数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomMaintRecordsService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomMaintRecordsService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomMaintRecordsService.UpdateById(HS.VIP.Management.Model.MRoomMaintRecords)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomMaintRecordsService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MRoomMaintRecords})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomMaintRecordsService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 RoomMaintRecords 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomMaintRecordsService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomMaintRecordsService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomMaintRecordsService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomMaintRecordsService.GetOneModel(HS.VIP.Management.Model.MRoomMaintRecordsCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomMaintRecordsService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomMaintRecordsService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MRoomMaintRecordsCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomMaintRecordsService.GetAllList(HS.VIP.Management.Model.MRoomMaintRecordsCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomMaintRecordsService.Export(HS.VIP.Management.Model.MRoomMaintRecordsCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomMaintRecordsService.CheckInfo(HS.VIP.Management.Model.MRoomMaintRecords,HS.VIP.Management.Model.MRoomMaintRecords)">
            <summary>
            检查RoomMaintRecords数据有效性
            </summary>
            <param name="model">待检查RoomMaintRecords数据模型</param>
            <param name="model">待检查RoomMaintRecords已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.RoomSchedulingManagementService">
            <summary>
            RoomSchedulingManagement相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementService.#ctor(HS.VIP.Management.Repository.RoomSchedulingManagementRepository)">
            <summary>
            构造函数，通过依赖注入 RoomSchedulingManagement 仓储操作类
            </summary>
            <param name="roomSchedulingManagementRepository">RoomSchedulingManagement仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementService.AddOne(HS.VIP.Management.Model.MRoomSchedulingManagement)">
            <summary>
            新增一条RoomSchedulingManagement记录
            </summary>
            <param name="model">RoomSchedulingManagement数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MRoomSchedulingManagement})">
            <summary>
            批量新增RoomSchedulingManagement数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementService.UpdateById(HS.VIP.Management.Model.MRoomSchedulingManagement)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MRoomSchedulingManagement})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 RoomSchedulingManagement 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementService.GetOneModel(HS.VIP.Management.Model.MRoomSchedulingManagementCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MRoomSchedulingManagementCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementService.GetAllList(HS.VIP.Management.Model.MRoomSchedulingManagementCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementService.Export(HS.VIP.Management.Model.MRoomSchedulingManagementCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementService.CheckInfo(HS.VIP.Management.Model.MRoomSchedulingManagement,HS.VIP.Management.Model.MRoomSchedulingManagement)">
            <summary>
            检查RoomSchedulingManagement数据有效性
            </summary>
            <param name="model">待检查RoomSchedulingManagement数据模型</param>
            <param name="model">待检查RoomSchedulingManagement已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementService.GetVipInfoByRoomId(System.String)">
            <summary>
            根据房间id获取当前正在使用房间的贵宾信息
            </summary>
            <param name="id">id</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.RoomSchedulingManagementService.GetAllocatableRoomList(HS.VIP.Management.Model.MRoomSchedulingManagementCondtion)">
            <summary>
            获取可分配房间
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的全部数据集合</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.SalesOrderDetailsService">
            <summary>
            SalesOrderDetails相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderDetailsService.#ctor(HS.VIP.Management.Repository.SalesOrderDetailsRepository)">
            <summary>
            构造函数，通过依赖注入 SalesOrderDetails 仓储操作类
            </summary>
            <param name="salesOrderDetailsRepository">SalesOrderDetails仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderDetailsService.AddOne(HS.VIP.Management.Model.MSalesOrderDetails)">
            <summary>
            新增一条SalesOrderDetails记录
            </summary>
            <param name="model">SalesOrderDetails数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderDetailsService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MSalesOrderDetails})">
            <summary>
            批量新增SalesOrderDetails数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderDetailsService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderDetailsService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderDetailsService.UpdateById(HS.VIP.Management.Model.MSalesOrderDetails)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderDetailsService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MSalesOrderDetails})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderDetailsService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 SalesOrderDetails 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderDetailsService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderDetailsService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderDetailsService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderDetailsService.GetOneModel(HS.VIP.Management.Model.MSalesOrderDetailsCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderDetailsService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderDetailsService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MSalesOrderDetailsCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderDetailsService.GetAllList(HS.VIP.Management.Model.MSalesOrderDetailsCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderDetailsService.Export(HS.VIP.Management.Model.MSalesOrderDetailsCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderDetailsService.CheckInfo(HS.VIP.Management.Model.MSalesOrderDetails,HS.VIP.Management.Model.MSalesOrderDetails)">
            <summary>
            检查SalesOrderDetails数据有效性
            </summary>
            <param name="model">待检查SalesOrderDetails数据模型</param>
            <param name="model">待检查SalesOrderDetails已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.SalesOrderService">
            <summary>
            SalesOrder相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderService.#ctor(HS.VIP.Management.Repository.SalesOrderRepository)">
            <summary>
            构造函数，通过依赖注入 SalesOrder 仓储操作类
            </summary>
            <param name="salesOrderRepository">SalesOrder仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderService.AddOne(HS.VIP.Management.Model.MSalesOrder)">
            <summary>
            新增一条SalesOrder记录
            </summary>
            <param name="model">SalesOrder数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MSalesOrder})">
            <summary>
            批量新增SalesOrder数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderService.UpdateById(HS.VIP.Management.Model.MSalesOrder)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MSalesOrder})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 SalesOrder 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderService.GetOneModel(HS.VIP.Management.Model.MSalesOrderCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MSalesOrderCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderService.GetAllList(HS.VIP.Management.Model.MSalesOrderCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderService.Export(HS.VIP.Management.Model.MSalesOrderCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SalesOrderService.CheckInfo(HS.VIP.Management.Model.MSalesOrder,HS.VIP.Management.Model.MSalesOrder)">
            <summary>
            检查SalesOrder数据有效性
            </summary>
            <param name="model">待检查SalesOrder数据模型</param>
            <param name="model">待检查SalesOrder已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.SchedulingPlanService">
            <summary>
            SchedulingPlan相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.SchedulingPlanService.#ctor(HS.VIP.Management.Repository.SchedulingPlanRepository)">
            <summary>
            构造函数，通过依赖注入 SchedulingPlan 仓储操作类
            </summary>
            <param name="schedulingPlanRepository">SchedulingPlan仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.SchedulingPlanService.AddOne(HS.VIP.Management.Model.MSchedulingPlan)">
            <summary>
            新增一条SchedulingPlan记录
            </summary>
            <param name="model">SchedulingPlan数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SchedulingPlanService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MSchedulingPlan})">
            <summary>
            批量新增SchedulingPlan数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SchedulingPlanService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SchedulingPlanService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SchedulingPlanService.UpdateById(HS.VIP.Management.Model.MSchedulingPlan)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SchedulingPlanService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MSchedulingPlan})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SchedulingPlanService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 SchedulingPlan 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SchedulingPlanService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SchedulingPlanService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SchedulingPlanService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SchedulingPlanService.GetOneModel(HS.VIP.Management.Model.MSchedulingPlanCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SchedulingPlanService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SchedulingPlanService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MSchedulingPlanCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SchedulingPlanService.GetAllList(HS.VIP.Management.Model.MSchedulingPlanCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SchedulingPlanService.Export(HS.VIP.Management.Model.MSchedulingPlanCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SchedulingPlanService.CheckInfo(HS.VIP.Management.Model.MSchedulingPlan,HS.VIP.Management.Model.MSchedulingPlan)">
            <summary>
            检查SchedulingPlan数据有效性
            </summary>
            <param name="model">待检查SchedulingPlan数据模型</param>
            <param name="model">待检查SchedulingPlan已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.ServiceContentManagementService">
            <summary>
            ServiceContentManagement相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceContentManagementService.#ctor(HS.VIP.Management.Repository.ServiceContentManagementRepository)">
            <summary>
            构造函数，通过依赖注入 ServiceContentManagement 仓储操作类
            </summary>
            <param name="serviceContentManagementRepository">ServiceContentManagement仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceContentManagementService.AddOne(HS.VIP.Management.Model.MServiceContentManagement)">
            <summary>
            新增一条ServiceContentManagement记录
            </summary>
            <param name="model">ServiceContentManagement数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceContentManagementService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MServiceContentManagement})">
            <summary>
            批量新增ServiceContentManagement数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceContentManagementService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceContentManagementService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceContentManagementService.UpdateById(HS.VIP.Management.Model.MServiceContentManagement)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceContentManagementService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MServiceContentManagement})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceContentManagementService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 ServiceContentManagement 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceContentManagementService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceContentManagementService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceContentManagementService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceContentManagementService.GetOneModel(HS.VIP.Management.Model.MServiceContentManagementCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceContentManagementService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceContentManagementService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MServiceContentManagementCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceContentManagementService.GetAllList(HS.VIP.Management.Model.MServiceContentManagementCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceContentManagementService.Export(HS.VIP.Management.Model.MServiceContentManagementCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceContentManagementService.CheckInfo(HS.VIP.Management.Model.MServiceContentManagement,HS.VIP.Management.Model.MServiceContentManagement)">
            <summary>
            检查ServiceContentManagement数据有效性
            </summary>
            <param name="model">待检查ServiceContentManagement数据模型</param>
            <param name="model">待检查ServiceContentManagement已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.ServiceSchedulingManagementService">
            <summary>
            ServiceSchedulingManagement相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceSchedulingManagementService.#ctor(HS.VIP.Management.Repository.ServiceSchedulingManagementRepository)">
            <summary>
            构造函数，通过依赖注入 ServiceSchedulingManagement 仓储操作类
            </summary>
            <param name="serviceSchedulingManagementRepository">ServiceSchedulingManagement仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceSchedulingManagementService.AddOne(HS.VIP.Management.Model.MServiceSchedulingManagement)">
            <summary>
            新增一条ServiceSchedulingManagement记录
            </summary>
            <param name="model">ServiceSchedulingManagement数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceSchedulingManagementService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MServiceSchedulingManagement})">
            <summary>
            批量新增ServiceSchedulingManagement数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceSchedulingManagementService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceSchedulingManagementService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceSchedulingManagementService.UpdateById(HS.VIP.Management.Model.MServiceSchedulingManagement)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceSchedulingManagementService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MServiceSchedulingManagement})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceSchedulingManagementService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 ServiceSchedulingManagement 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceSchedulingManagementService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceSchedulingManagementService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceSchedulingManagementService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceSchedulingManagementService.GetOneModel(HS.VIP.Management.Model.MServiceSchedulingManagementCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceSchedulingManagementService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceSchedulingManagementService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MServiceSchedulingManagementCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceSchedulingManagementService.GetAllList(HS.VIP.Management.Model.MServiceSchedulingManagementCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceSchedulingManagementService.Export(HS.VIP.Management.Model.MServiceSchedulingManagementCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.ServiceSchedulingManagementService.CheckInfo(HS.VIP.Management.Model.MServiceSchedulingManagement,HS.VIP.Management.Model.MServiceSchedulingManagement)">
            <summary>
            检查ServiceSchedulingManagement数据有效性
            </summary>
            <param name="model">待检查ServiceSchedulingManagement数据模型</param>
            <param name="model">待检查ServiceSchedulingManagement已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.SlotReservationService">
            <summary>
            SlotReservation相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationService.#ctor(HS.VIP.Management.Repository.SlotReservationRepository)">
            <summary>
            构造函数，通过依赖注入 SlotReservation 仓储操作类
            </summary>
            <param name="slotReservationRepository">SlotReservation仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationService.AddOne(HS.VIP.Management.Model.MSlotReservation)">
            <summary>
            新增一条SlotReservation记录
            </summary>
            <param name="model">SlotReservation数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MSlotReservation})">
            <summary>
            批量新增SlotReservation数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationService.SlotReservationPushById(System.String)">
            <summary>
            根据Id推送机位预定
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationService.UpdateSlotReservation(HS.VIP.Management.Model.MSlotReservation)">
            <summary>
            根据id更新机位预定
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationService.UpdateById(HS.VIP.Management.Model.MSlotReservation)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MSlotReservation})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationService.ApprovalSlotReservation(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            审核机位预定 状态，通过，驳回
            </summary>
            <param name="modelJobj">需要更新的 SlotReservation 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 SlotReservation 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationService.GetOneModel(HS.VIP.Management.Model.MSlotReservationCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MSlotReservationCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationService.GetAllList(HS.VIP.Management.Model.MSlotReservationCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationService.Export(HS.VIP.Management.Model.MSlotReservationCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotReservationService.CheckInfo(HS.VIP.Management.Model.MSlotReservation,HS.VIP.Management.Model.MSlotReservation)">
            <summary>
            检查SlotReservation数据有效性
            </summary>
            <param name="model">待检查SlotReservation数据模型</param>
            <param name="model">待检查SlotReservation已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.SlotResourceManagementService">
            <summary>
            SlotResourceManagement相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotResourceManagementService.#ctor(HS.VIP.Management.Repository.SlotResourceManagementRepository)">
            <summary>
            构造函数，通过依赖注入 SlotResourceManagement 仓储操作类
            </summary>
            <param name="slotResourceManagementRepository">SlotResourceManagement仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotResourceManagementService.AddOne(HS.VIP.Management.Model.MSlotResourceManagement)">
            <summary>
            新增一条SlotResourceManagement记录
            </summary>
            <param name="model">SlotResourceManagement数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotResourceManagementService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MSlotResourceManagement})">
            <summary>
            批量新增SlotResourceManagement数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotResourceManagementService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotResourceManagementService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotResourceManagementService.UpdateById(HS.VIP.Management.Model.MSlotResourceManagement)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotResourceManagementService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MSlotResourceManagement})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotResourceManagementService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 SlotResourceManagement 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotResourceManagementService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotResourceManagementService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotResourceManagementService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotResourceManagementService.GetOneModel(HS.VIP.Management.Model.MSlotResourceManagementCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotResourceManagementService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotResourceManagementService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MSlotResourceManagementCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotResourceManagementService.GetAllList(HS.VIP.Management.Model.MSlotResourceManagementCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotResourceManagementService.Export(HS.VIP.Management.Model.MSlotResourceManagementCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotResourceManagementService.CheckInfo(HS.VIP.Management.Model.MSlotResourceManagement,HS.VIP.Management.Model.MSlotResourceManagement)">
            <summary>
            检查SlotResourceManagement数据有效性
            </summary>
            <param name="model">待检查SlotResourceManagement数据模型</param>
            <param name="model">待检查SlotResourceManagement已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SlotResourceManagementService.GetBookableList(HS.VIP.Management.Model.MSlotResourceManagementCondtion)">
            <summary>
            传入时间段获取可预定机位
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.StorageRacksService">
            <summary>
            StorageRacks相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.StorageRacksService.#ctor(HS.VIP.Management.Repository.StorageRacksRepository)">
            <summary>
            构造函数，通过依赖注入 StorageRacks 仓储操作类
            </summary>
            <param name="storageRacksRepository">StorageRacks仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.StorageRacksService.AddOne(HS.VIP.Management.Model.MStorageRacks)">
            <summary>
            新增一条StorageRacks记录
            </summary>
            <param name="model">StorageRacks数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.StorageRacksService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MStorageRacks})">
            <summary>
            批量新增StorageRacks数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.StorageRacksService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.StorageRacksService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.StorageRacksService.UpdateById(HS.VIP.Management.Model.MStorageRacks)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.StorageRacksService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MStorageRacks})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.StorageRacksService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 StorageRacks 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.StorageRacksService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.StorageRacksService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.StorageRacksService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.StorageRacksService.GetOneModel(HS.VIP.Management.Model.MStorageRacksCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.StorageRacksService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.StorageRacksService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MStorageRacksCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.StorageRacksService.GetAllList(HS.VIP.Management.Model.MStorageRacksCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.StorageRacksService.Export(HS.VIP.Management.Model.MStorageRacksCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.StorageRacksService.CheckInfo(HS.VIP.Management.Model.MStorageRacks,HS.VIP.Management.Model.MStorageRacks)">
            <summary>
            检查StorageRacks数据有效性
            </summary>
            <param name="model">待检查StorageRacks数据模型</param>
            <param name="model">待检查StorageRacks已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.SupplierService">
            <summary>
            Supplier相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.SupplierService.#ctor(HS.VIP.Management.Repository.SupplierRepository)">
            <summary>
            构造函数，通过依赖注入 Supplier 仓储操作类
            </summary>
            <param name="supplierRepository">Supplier仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.SupplierService.AddOne(HS.VIP.Management.Model.MSupplier)">
            <summary>
            新增一条Supplier记录
            </summary>
            <param name="model">Supplier数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SupplierService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MSupplier})">
            <summary>
            批量新增Supplier数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SupplierService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SupplierService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SupplierService.UpdateById(HS.VIP.Management.Model.MSupplier)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SupplierService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MSupplier})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SupplierService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 Supplier 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SupplierService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SupplierService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SupplierService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SupplierService.GetOneModel(HS.VIP.Management.Model.MSupplierCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SupplierService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SupplierService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MSupplierCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SupplierService.GetAllList(HS.VIP.Management.Model.MSupplierCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SupplierService.Export(HS.VIP.Management.Model.MSupplierCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.SupplierService.CheckInfo(HS.VIP.Management.Model.MSupplier,HS.VIP.Management.Model.MSupplier)">
            <summary>
            检查Supplier数据有效性
            </summary>
            <param name="model">待检查Supplier数据模型</param>
            <param name="model">待检查Supplier已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.TrafficRecordService">
            <summary>
            TrafficRecord相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.TrafficRecordService.#ctor(HS.VIP.Management.Repository.TrafficRecordRepository)">
            <summary>
            构造函数，通过依赖注入 TrafficRecord 仓储操作类
            </summary>
            <param name="trafficRecordRepository">TrafficRecord仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.TrafficRecordService.AddOne(HS.VIP.Management.Model.MTrafficRecord)">
            <summary>
            新增一条TrafficRecord记录
            </summary>
            <param name="model">TrafficRecord数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.TrafficRecordService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MTrafficRecord})">
            <summary>
            批量新增TrafficRecord数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.TrafficRecordService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.TrafficRecordService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.TrafficRecordService.UpdateById(HS.VIP.Management.Model.MTrafficRecord)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.TrafficRecordService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MTrafficRecord})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.TrafficRecordService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 TrafficRecord 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.TrafficRecordService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.TrafficRecordService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.TrafficRecordService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.TrafficRecordService.GetOneModel(HS.VIP.Management.Model.MTrafficRecordCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.TrafficRecordService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.TrafficRecordService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MTrafficRecordCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.TrafficRecordService.GetAllList(HS.VIP.Management.Model.MTrafficRecordCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.TrafficRecordService.Export(HS.VIP.Management.Model.MTrafficRecordCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.TrafficRecordService.CheckInfo(HS.VIP.Management.Model.MTrafficRecord,HS.VIP.Management.Model.MTrafficRecord)">
            <summary>
            检查TrafficRecord数据有效性
            </summary>
            <param name="model">待检查TrafficRecord数据模型</param>
            <param name="model">待检查TrafficRecord已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.VehicleArrivalReminderService">
            <summary>
            VehicleArrivalReminder相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleArrivalReminderService.#ctor(HS.VIP.Management.Repository.VehicleArrivalReminderRepository)">
            <summary>
            构造函数，通过依赖注入 VehicleArrivalReminder 仓储操作类
            </summary>
            <param name="vehicleArrivalReminderRepository">VehicleArrivalReminder仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleArrivalReminderService.AddOne(HS.VIP.Management.Model.MVehicleArrivalReminder)">
            <summary>
            新增一条VehicleArrivalReminder记录
            </summary>
            <param name="model">VehicleArrivalReminder数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleArrivalReminderService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MVehicleArrivalReminder})">
            <summary>
            批量新增VehicleArrivalReminder数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleArrivalReminderService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleArrivalReminderService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleArrivalReminderService.UpdateById(HS.VIP.Management.Model.MVehicleArrivalReminder)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleArrivalReminderService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MVehicleArrivalReminder})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleArrivalReminderService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 VehicleArrivalReminder 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleArrivalReminderService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleArrivalReminderService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleArrivalReminderService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleArrivalReminderService.GetOneModel(HS.VIP.Management.Model.MVehicleArrivalReminderCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleArrivalReminderService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleArrivalReminderService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MVehicleArrivalReminderCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleArrivalReminderService.GetAllList(HS.VIP.Management.Model.MVehicleArrivalReminderCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleArrivalReminderService.Export(HS.VIP.Management.Model.MVehicleArrivalReminderCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleArrivalReminderService.CheckInfo(HS.VIP.Management.Model.MVehicleArrivalReminder,HS.VIP.Management.Model.MVehicleArrivalReminder)">
            <summary>
            检查VehicleArrivalReminder数据有效性
            </summary>
            <param name="model">待检查VehicleArrivalReminder数据模型</param>
            <param name="model">待检查VehicleArrivalReminder已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.VehicleInformationManagementService">
            <summary>
            VehicleInformationManagement相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleInformationManagementService.#ctor(HS.VIP.Management.Repository.VehicleInformationManagementRepository)">
            <summary>
            构造函数，通过依赖注入 VehicleInformationManagement 仓储操作类
            </summary>
            <param name="vehicleInformationManagementRepository">VehicleInformationManagement仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleInformationManagementService.AddOne(HS.VIP.Management.Model.MVehicleInformationManagement)">
            <summary>
            新增一条VehicleInformationManagement记录
            </summary>
            <param name="model">VehicleInformationManagement数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleInformationManagementService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MVehicleInformationManagement})">
            <summary>
            批量新增VehicleInformationManagement数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleInformationManagementService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleInformationManagementService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleInformationManagementService.UpdateById(HS.VIP.Management.Model.MVehicleInformationManagement)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleInformationManagementService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MVehicleInformationManagement})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleInformationManagementService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 VehicleInformationManagement 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleInformationManagementService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleInformationManagementService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleInformationManagementService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleInformationManagementService.GetOneModel(HS.VIP.Management.Model.MVehicleInformationManagementCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleInformationManagementService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleInformationManagementService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MVehicleInformationManagementCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleInformationManagementService.GetAllList(HS.VIP.Management.Model.MVehicleInformationManagementCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleInformationManagementService.Export(HS.VIP.Management.Model.MVehicleInformationManagementCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleInformationManagementService.CheckInfo(HS.VIP.Management.Model.MVehicleInformationManagement,HS.VIP.Management.Model.MVehicleInformationManagement)">
            <summary>
            检查VehicleInformationManagement数据有效性
            </summary>
            <param name="model">待检查VehicleInformationManagement数据模型</param>
            <param name="model">待检查VehicleInformationManagement已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.VehicleSchedulingManagementService">
            <summary>
            VehicleSchedulingManagement相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleSchedulingManagementService.#ctor(HS.VIP.Management.Repository.VehicleSchedulingManagementRepository)">
            <summary>
            构造函数，通过依赖注入 VehicleSchedulingManagement 仓储操作类
            </summary>
            <param name="vehicleSchedulingManagementRepository">VehicleSchedulingManagement仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleSchedulingManagementService.AddOne(HS.VIP.Management.Model.MVehicleSchedulingManagement)">
            <summary>
            新增一条VehicleSchedulingManagement记录
            </summary>
            <param name="model">VehicleSchedulingManagement数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleSchedulingManagementService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MVehicleSchedulingManagement})">
            <summary>
            批量新增VehicleSchedulingManagement数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleSchedulingManagementService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleSchedulingManagementService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleSchedulingManagementService.UpdateById(HS.VIP.Management.Model.MVehicleSchedulingManagement)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleSchedulingManagementService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MVehicleSchedulingManagement})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleSchedulingManagementService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 VehicleSchedulingManagement 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleSchedulingManagementService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleSchedulingManagementService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleSchedulingManagementService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleSchedulingManagementService.GetOneModel(HS.VIP.Management.Model.MVehicleSchedulingManagementCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleSchedulingManagementService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleSchedulingManagementService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MVehicleSchedulingManagementCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleSchedulingManagementService.GetAllList(HS.VIP.Management.Model.MVehicleSchedulingManagementCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleSchedulingManagementService.Export(HS.VIP.Management.Model.MVehicleSchedulingManagementCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleSchedulingManagementService.CheckInfo(HS.VIP.Management.Model.MVehicleSchedulingManagement,HS.VIP.Management.Model.MVehicleSchedulingManagement)">
            <summary>
            检查VehicleSchedulingManagement数据有效性
            </summary>
            <param name="model">待检查VehicleSchedulingManagement数据模型</param>
            <param name="model">待检查VehicleSchedulingManagement已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VehicleSchedulingManagementService.GetAllocatableVehicleList(HS.VIP.Management.Model.MVehicleSchedulingManagementCondtion)">
            <summary>
            获取所有可分配车辆
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的全部数据集合</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.VIPCheckInService">
            <summary>
            VIPCheckIn相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPCheckInService.#ctor(HS.VIP.Management.Repository.VIPCheckInRepository)">
            <summary>
            构造函数，通过依赖注入 VIPCheckIn 仓储操作类
            </summary>
            <param name="vIPCheckInRepository">VIPCheckIn仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPCheckInService.AddOne(HS.VIP.Management.Model.MVIPCheckIn)">
            <summary>
            新增一条VIPCheckIn记录
            </summary>
            <param name="model">VIPCheckIn数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPCheckInService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MVIPCheckIn})">
            <summary>
            批量新增VIPCheckIn数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPCheckInService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPCheckInService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPCheckInService.UpdateById(HS.VIP.Management.Model.MVIPCheckIn)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPCheckInService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MVIPCheckIn})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPCheckInService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 VIPCheckIn 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPCheckInService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPCheckInService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPCheckInService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPCheckInService.GetOneModel(HS.VIP.Management.Model.MVIPCheckInCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPCheckInService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPCheckInService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MVIPCheckInCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPCheckInService.GetAllList(HS.VIP.Management.Model.MVIPCheckInCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPCheckInService.Export(HS.VIP.Management.Model.MVIPCheckInCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPCheckInService.CheckInfo(HS.VIP.Management.Model.MVIPCheckIn,HS.VIP.Management.Model.MVIPCheckIn)">
            <summary>
            检查VIPCheckIn数据有效性
            </summary>
            <param name="model">待检查VIPCheckIn数据模型</param>
            <param name="model">待检查VIPCheckIn已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.VIPReservationRegistrationService">
            <summary>
            VIPReservationRegistration相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationService.#ctor(HS.VIP.Management.Repository.VIPReservationRegistrationRepository)">
            <summary>
            构造函数，通过依赖注入 VIPReservationRegistration 仓储操作类
            </summary>
            <param name="vIPReservationRegistrationRepositoryOpert"></param>
            <param name="vehicleInformationManagementRepositoryOpert"></param>
            <param name="vIPReservationRegistrationRepository">VIPReservationRegistration仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationService.AddVIPReservationRegistration(HS.VIP.Management.Model.MVIPReservationRegistration)">
            <summary>
            新增一条VIPReservationRegistration记录
            </summary>
            <param name="model">VIPReservationRegistration数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationService.AddOne(HS.VIP.Management.Model.MVIPReservationRegistration)">
            <summary>
            新增一条VIPReservationRegistration记录
            </summary>
            <param name="model">VIPReservationRegistration数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MVIPReservationRegistration})">
            <summary>
            批量新增VIPReservationRegistration数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationService.UpdateVIPReservationRegistration(HS.VIP.Management.Model.MVIPReservationRegistration)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationService.UpdateById(HS.VIP.Management.Model.MVIPReservationRegistration)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MVIPReservationRegistration})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 VIPReservationRegistration 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationService.GetOneModel(HS.VIP.Management.Model.MVIPReservationRegistrationCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MVIPReservationRegistrationCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationService.GetAllList(HS.VIP.Management.Model.MVIPReservationRegistrationCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationService.Export(HS.VIP.Management.Model.MVIPReservationRegistrationCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationService.ApprovalCallback(System.String)">
            <summary>
            审批回调
            </summary>
            <param name="id">客户预约id</param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.VIPReservationRegistrationService.CheckInfo(HS.VIP.Management.Model.MVIPReservationRegistration,HS.VIP.Management.Model.MVIPReservationRegistration)">
            <summary>
            检查VIPReservationRegistration数据有效性
            </summary>
            <param name="model">待检查VIPReservationRegistration数据模型</param>
            <param name="model">待检查VIPReservationRegistration已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.WarehousingDetailsService">
            <summary>
            WarehousingDetails相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingDetailsService.#ctor(HS.VIP.Management.Repository.WarehousingDetailsRepository)">
            <summary>
            构造函数，通过依赖注入 WarehousingDetails 仓储操作类
            </summary>
            <param name="warehousingDetailsRepository">WarehousingDetails仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingDetailsService.AddOne(HS.VIP.Management.Model.MWarehousingDetails)">
            <summary>
            新增一条WarehousingDetails记录
            </summary>
            <param name="model">WarehousingDetails数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingDetailsService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MWarehousingDetails})">
            <summary>
            批量新增WarehousingDetails数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingDetailsService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingDetailsService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingDetailsService.UpdateById(HS.VIP.Management.Model.MWarehousingDetails)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingDetailsService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MWarehousingDetails})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingDetailsService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 WarehousingDetails 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingDetailsService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingDetailsService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingDetailsService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingDetailsService.GetOneModel(HS.VIP.Management.Model.MWarehousingDetailsCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingDetailsService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingDetailsService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MWarehousingDetailsCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingDetailsService.GetAllList(HS.VIP.Management.Model.MWarehousingDetailsCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingDetailsService.Export(HS.VIP.Management.Model.MWarehousingDetailsCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingDetailsService.CheckInfo(HS.VIP.Management.Model.MWarehousingDetails,HS.VIP.Management.Model.MWarehousingDetails)">
            <summary>
            检查WarehousingDetails数据有效性
            </summary>
            <param name="model">待检查WarehousingDetails数据模型</param>
            <param name="model">待检查WarehousingDetails已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:HS.VIP.Management.Service.WarehousingService">
            <summary>
            Warehousing相关服务
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingService.#ctor(HS.VIP.Management.Repository.WarehousingRepository)">
            <summary>
            构造函数，通过依赖注入 Warehousing 仓储操作类
            </summary>
            <param name="warehousingRepository">Warehousing仓储操作</param>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingService.AddOne(HS.VIP.Management.Model.MWarehousing)">
            <summary>
            新增一条Warehousing记录
            </summary>
            <param name="model">Warehousing数据模型</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingService.BactchAdd(System.Collections.Generic.List{HS.VIP.Management.Model.MWarehousing})">
            <summary>
            批量新增Warehousing数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingService.DeleteById(System.String)">
            <summary>
            根据Id删除数据
            </summary>
            <param name="id">id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingService.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据Id集合批量删除数据
            </summary>
            <param name="idList">Id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingService.UpdateById(HS.VIP.Management.Model.MWarehousing)">
            <summary>
            根据id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingService.BactchUpdateById(System.Collections.Generic.List{HS.VIP.Management.Model.MWarehousing})">
            <summary>
            根据id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingService.UpdateDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息
            </summary>
            <param name="modelJobj">需要更新的 Warehousing 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingService.BactchUpdateDynamic(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            动态更新，根据实际需要，传递什么字段就更新什么字段信息（批量更新）
            </summary>
            <param name="modelJobjList">需要更新的 auth 数据Jobject实例</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingService.BactchUpdateSpecifyFieldsById(HS.Public.Tools.Model.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="bactchUpdateSpecifyFields">id集合</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingService.GetModelById(System.String,System.String)">
            <summary>
            根据id获取一个模型数据
            </summary>
            <param name="id">id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingService.GetOneModel(HS.VIP.Management.Model.MWarehousingCondtion)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingService.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingService.GetPageList(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MWarehousingCondtion})">
            <summary>
            分页获取数据
            </summary>
            <param name="mPageQueryCondition">查询条件</param>
            <param name="islike">是否进行liek查询，默认是false</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingService.GetPageListUnsettlement(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MWarehousingCondtion})">
            <summary>
            分页获取数据（未结算）
            </summary>
            <param name="pageQueryCondition"></param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingService.GetAllList(HS.VIP.Management.Model.MWarehousingCondtion)">
            <summary>
            获取全部数据
            </summary>
            <param name="condition">查询条件</param>
            <returns>符合要求的数据集合</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingService.Export(HS.VIP.Management.Model.MWarehousingCondtion,System.String@)">
            <summary>
            导出excel
            </summary>
            <param name="condtion">导出条件</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingService.CheckInfo(HS.VIP.Management.Model.MWarehousing,HS.VIP.Management.Model.MWarehousing)">
            <summary>
            检查Warehousing数据有效性
            </summary>
            <param name="model">待检查Warehousing数据模型</param>
            <param name="model">待检查Warehousing已有数据模型</param>
            <returns>检查结果</returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingService.ApprovalById(HS.VIP.Management.Model.MApprovalReq)">
            <summary>
            根据Id审核入库单 agree 同意，refuse拒绝
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Service.WarehousingService.GetPageListByInventoryId(HS.Public.Tools.Model.MPageQueryCondition{HS.VIP.Management.Model.MWarehousingCondtion})">
            <summary>
            根据库存id获取入库单分页数据
            </summary>
            <param name="pageQueryCondition"></param>
            <returns></returns>
        </member>
        <member name="T:HS.API.Service.OpertService">
            <summary>
            帮助类
            </summary>
        </member>
        <member name="M:HS.API.Service.OpertService.TypeAllAutoFillFieldDataSource">
            <summary>
            初始化自动填充字段数据源
            </summary>
        </member>
        <member name="T:HS.API.Service.ServiceBase">
            <summary>
            业务服务基类
            </summary>
        </member>
        <member name="F:HS.API.Service.ServiceBase.accessor">
            <summary>
            请求上下文
            </summary>
        </member>
        <member name="F:HS.API.Service.ServiceBase.mSystemLog">
            <summary>
            审计日志对象
            </summary>
        </member>
        <member name="M:HS.API.Service.ServiceBase.#ctor">
            <summary>
            构造函数，通过依赖注入 Flight仓储操作类
            </summary>
        </member>
        <member name="M:HS.API.Service.ServiceBase.AddOneSystemLog">
            <summary>
            记录日志 在具体实现上，可以根据自己项目实际情况做自定义实现
            </summary>
        </member>
    </members>
</doc>
