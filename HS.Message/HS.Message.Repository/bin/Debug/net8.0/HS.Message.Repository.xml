<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HS.Message.Repository</name>
    </assembly>
    <members>
        <member name="M:HS.Message.Repository.database.core.BaseRepository`1.FormattingTableName(System.String)">
            <summary>
            格式化数据库名称
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.database.core.BaseRepository`1.FormattingInSql``1(System.String,System.Collections.Generic.List{``0})">
            <summary>
            格式化in sql 语句
            </summary>
            <typeparam name="T2"></typeparam>
            <param name="field"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.database.core.MysqlRepository`1.FormattingTableName(System.String)">
            <summary>
            格式化数据库名称
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.database.core.MysqlRepository`1.FormattingInSql``1(System.String,System.Collections.Generic.List{``0})">
            <summary>
            格式化in sql 语句
            </summary>
            <typeparam name="T2"></typeparam>
            <param name="field"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.database.core.PGSqlRepository`1.FormattingTableName(System.String)">
            <summary>
            格式化数据库名称
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.database.core.PGSqlRepository`1.FormattingInSql``1(System.String,System.Collections.Generic.List{``0})">
            <summary>
            使用Dapper时，PostgreSQL IN关键字不支持把数组作为参数，可以使用any关键字进行此项操作
            </summary>
            <param name="field"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.#ctor(HS.Message.Share.CommonObject.IRepositoryInjectedObjects,System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.AddOne(`0)">
            <summary>
            新增一条记录
            </summary>
            <param name="model">数据模型</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.AddOneAsync(`0)">
            <summary>
            新增一条记录
            </summary>
            <param name="model">数据模型</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.BactchAdd(System.Collections.Generic.List{`0})">
            <summary>
            批量新增数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.BactchAddAsync(System.Collections.Generic.List{`0})">
            <summary>
            批量新增数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.DeleteById(System.String)">
            <summary>
            根据logical_id删除数据
            </summary>
            <param name="logical_id">logical_id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.DeleteByIdAsync(System.String)">
            <summary>
            根据logical_id删除数据
            </summary>
            <param name="logical_id">logical_id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据logical_id集合批量删除数据
            </summary>
            <param name="idList">logical_id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.BactchDeleteByIdListAsync(System.Collections.Generic.List{System.String})">
            <summary>
            根据logical_id集合批量删除数据
            </summary>
            <param name="idList">logical_id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.LogicDeleteById(System.String)">
            <summary>
            根据logical_id删除数据
            </summary>
            <param name="logical_id">logical_id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.LogicDeleteByIdAsync(System.String)">
            <summary>
            根据logical_id删除数据
            </summary>
            <param name="logical_id">logical_id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.BactchLogicDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据logical_id集合批量删除数据
            </summary>
            <param name="idList">logical_id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.BactchLogicDeleteByIdListAsync(System.Collections.Generic.List{System.String})">
            <summary>
            根据logical_id集合批量删除数据
            </summary>
            <param name="idList">logical_id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.UpdateById(`0)">
            <summary>
            根据logical_id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.UpdateByIdAsync(`0)">
            <summary>
            根据logical_id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.BactchUpdateById(System.Collections.Generic.List{`0})">
            <summary>
            根据logical_id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.BactchUpdateByIdAsync(System.Collections.Generic.List{`0})">
            <summary>
            根据logical_id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.BactchUpdateSpecifyFieldsById(HS.Message.Share.BaseModel.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="updateFieldsValue">跟新字段键值对</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.BactchUpdateSpecifyFieldsByIdAsync(HS.Message.Share.BaseModel.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="updateFieldsValue">跟新字段键值对</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetTotalCount(`1)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetTotalCountAsync(`1)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetModelById(System.String,System.String)">
            <summary>
            根据logical_id获取一个模型数据
            </summary>
            <param name="logical_id">logical_id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetModelByIdAsync(System.String,System.String)">
            <summary>
            根据logical_id获取一个模型数据
            </summary>
            <param name="logical_id">logical_id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetModelById``1(System.String,System.String)">
            <summary>
            根据logical_id获取一个模型数据
            </summary>
            <param name="logical_id">logical_id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetModelByIdAsync``1(System.String,System.String)">
            <summary>
            根据logical_id获取一个模型数据
            </summary>
            <param name="logical_id">logical_id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetOneModel(`1)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetOneModelAsync(`1)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetAllListByIdListAsync(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetAllListByIdList``1(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetAllListByIdListAsync``1(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetPageList(HS.Message.Share.BaseModel.MPageQueryCondition{`1})">
            <summary>
            分页获取数据
            </summary>
            <param name="pageQueryCondition">查询条件</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetPageListAsync(HS.Message.Share.BaseModel.MPageQueryCondition{`1})">
            <summary>
            分页获取数据
            </summary>
            <param name="pageQueryCondition">查询条件</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetAllList(`1,System.Int32)">
            <summary>
            获取所有数据集合(根据条件)
            </summary>
            <param name="model">查询条件</param>
            <param name="limitNum">限制查询条数 0 代表查询全部数据</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetAllListAsync(`1,System.Int32)">
            <summary>
            获取所有数据集合(根据条件)
            </summary>
            <param name="model">查询条件</param>
            <param name="limitNum">限制查询条数 0 代表查询全部数据</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.SqlWhereIgnoreLikeFields">
            <summary>
            构建查询条件时，忽略使用like的字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetSqlWhereByModel(`1,System.String)">
            <summary>
            根据model构建查询条件
            </summary>
            <param name="model"></param>
            <param name="table">表名</param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetAllFields(System.String[])">
            <summary>
            获取表全部字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetAllFieldForSql(System.String)">
            <summary>
            获取表全部字段(不包含id)
            </summary>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetAllFieldForParams">
            <summary>
            获取表全部字段，并标记为@参数(不包含id)
            </summary>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetInsertSql">
            <summary>
            获取表的插入语句 
            </summary>
            <returns>插入语句</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetUpdateSql">
            <summary>
            获取更新sql
            </summary>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.FormattingTableName(System.String)">
            <summary>
            格式化数据库名称
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.FormattingSql(System.String)">
            <summary>
            根据数据库类型格式化sql语句
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetBaseSqlWhere(System.String,System.Boolean)">
            <summary>
            构建最基本的查询条件
            包含机场三字码、是否删除=2
            </summary>
            <param name="table">表的别名</param>
            <param name="hasOtherConditionInFront">前面是否有其他查询条件</param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetBelongAirportThreeSqlWhere(System.String,System.Boolean)">
            <summary>
            构建机场三字码的查询条件（只包含三字码）
            </summary>
            <param name="table">表的别名</param>
            <param name="hasOtherConditionInFront">前面是否有其他查询条件</param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.BizRepositoryAdapter`2.GetBelongAirportThree">
            <summary>
            获取机场三字码
            </summary>
            <param name="table"></param>
            <param name="hasOtherConditionInFront"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.AddOne(`0)">
            <summary>
            新增一条记录
            </summary>
            <param name="model">数据模型</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.AddOneAsync(`0)">
            <summary>
            新增一条记录
            </summary>
            <param name="model">数据模型</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.BactchAdd(System.Collections.Generic.List{`0})">
            <summary>
            批量新增数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.BactchAddAsync(System.Collections.Generic.List{`0})">
            <summary>
            批量新增数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.DeleteById(System.String)">
            <summary>
            根据logical_id删除数据
            </summary>
            <param name="logical_id">logical_id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.DeleteByIdAsync(System.String)">
            <summary>
            根据logical_id删除数据
            </summary>
            <param name="logical_id">logical_id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据logical_id集合批量删除数据
            </summary>
            <param name="idList">logical_id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.BactchDeleteByIdListAsync(System.Collections.Generic.List{System.String})">
            <summary>
            根据logical_id集合批量删除数据
            </summary>
            <param name="idList">logical_id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.LogicDeleteById(System.String)">
            <summary>
            根据logical_id删除数据
            </summary>
            <param name="logical_id">logical_id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.LogicDeleteByIdAsync(System.String)">
            <summary>
            根据logical_id删除数据
            </summary>
            <param name="logical_id">logical_id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.BactchLogicDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据logical_id集合批量删除数据
            </summary>
            <param name="idList">logical_id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.BactchLogicDeleteByIdListAsync(System.Collections.Generic.List{System.String})">
            <summary>
            根据logical_id集合批量删除数据
            </summary>
            <param name="idList">logical_id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.UpdateById(`0)">
            <summary>
            根据logical_id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.UpdateByIdAsync(`0)">
            <summary>
            根据logical_id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.BactchUpdateById(System.Collections.Generic.List{`0})">
            <summary>
            根据logical_id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.BactchUpdateByIdAsync(System.Collections.Generic.List{`0})">
            <summary>
            根据logical_id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.BactchUpdateSpecifyFieldsById(HS.Message.Share.BaseModel.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="updateFieldsValue">跟新字段键值对</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.BactchUpdateSpecifyFieldsByIdAsync(HS.Message.Share.BaseModel.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="updateFieldsValue">跟新字段键值对</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.GetTotalCount(`1)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.GetTotalCountAsync(`1)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.GetModelById(System.String,System.String)">
            <summary>
            根据logical_id获取一个模型数据
            </summary>
            <param name="logical_id">logical_id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.GetModelByIdAsync(System.String,System.String)">
            <summary>
            根据logical_id获取一个模型数据
            </summary>
            <param name="logical_id">logical_id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.GetModelById``1(System.String,System.String)">
            <summary>
            根据logical_id获取一个模型数据
            </summary>
            <param name="logical_id">logical_id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.GetModelByIdAsync``1(System.String,System.String)">
            <summary>
            根据logical_id获取一个模型数据
            </summary>
            <param name="logical_id">logical_id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.GetOneModel(`1)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.GetOneModelAsync(`1)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.GetAllListByIdListAsync(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.GetAllListByIdList``1(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.GetAllListByIdListAsync``1(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.GetPageList(HS.Message.Share.BaseModel.MPageQueryCondition{`1})">
            <summary>
            分页获取数据
            </summary>
            <param name="pageQueryCondition">查询条件</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.GetPageListAsync(HS.Message.Share.BaseModel.MPageQueryCondition{`1})">
            <summary>
            分页获取数据
            </summary>
            <param name="pageQueryCondition">查询条件</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.GetAllList(`1,System.Int32)">
            <summary>
            获取所有数据集合(根据条件)
            </summary>
            <param name="model">查询条件</param>
            <param name="limitNum">限制查询条数 0 代表查询全部数据</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.GetAllListAsync(`1,System.Int32)">
            <summary>
            获取所有数据集合(根据条件)
            </summary>
            <param name="model">查询条件</param>
            <param name="limitNum">限制查询条数 0 代表查询全部数据</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.GetSqlWhereByModel(`1)">
            <summary>
            根据model构建查询条件
            </summary>
            <param name="model">实体model</param>
            <returns>条件集合</returns>
        </member>
        <member name="P:HS.Message.Repository.repository.base.core.IBizRepository`2.GetSqlWhereByModelFunc">
            <summary>
            根据model构建查询条件
            </summary>
            <param name="model">实体model</param>
            <returns>条件集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.GetAllField(System.String)">
            <summary>
            获取表全部字段
            </summary>
            <returns></returns>
        </member>
        <member name="P:HS.Message.Repository.repository.base.core.IBizRepository`2.GetAllFieldFunc">
            <summary>
            获取表全部字段(不包含id)
            </summary>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.GetInsertSql">
            <summary>
            获取表\的插入语句 
            </summary>
            <returns>插入语句</returns>
        </member>
        <member name="P:HS.Message.Repository.repository.base.core.IBizRepository`2.GetInsertSqlFunc">
            <summary>
            获取表的插入语句 
            </summary>
            <returns>插入语句</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.GetUpdateSql">
            <summary>
            获取表的更新语句 
            </summary>
            <returns>插入语句</returns>
        </member>
        <member name="P:HS.Message.Repository.repository.base.core.IBizRepository`2.GetUpdateSqlFunc">
            <summary>
            获取更新sql
            </summary>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.FormattingTableName(System.String)">
            <summary>
            格式化数据库名称
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IBizRepository`2.FormattingInSql``1(System.String,System.Collections.Generic.List{``0})">
            <summary>
            拼接in sql语句
            </summary>
            <param name="field"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.AddOne(`0)">
            <summary>
            新增一条记录
            </summary>
            <param name="model">数据模型</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.AddOneAsync(`0)">
            <summary>
            新增一条记录
            </summary>
            <param name="model">数据模型</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.BactchAdd(System.Collections.Generic.List{`0})">
            <summary>
            批量新增数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.BactchAddAsync(System.Collections.Generic.List{`0})">
            <summary>
            批量新增数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.DeleteById(System.String)">
            <summary>
            根据logical_id删除数据
            </summary>
            <param name="logical_id">logical_id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.DeleteByIdAsync(System.String)">
            <summary>
            根据logical_id删除数据
            </summary>
            <param name="logical_id">logical_id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据logical_id集合批量删除数据
            </summary>
            <param name="idList">logical_id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.BactchDeleteByIdListAsync(System.Collections.Generic.List{System.String})">
            <summary>
            根据logical_id集合批量删除数据
            </summary>
            <param name="idList">logical_id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.LogicDeleteById(System.String)">
            <summary>
            根据logical_id删除数据
            </summary>
            <param name="logical_id">logical_id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.LogicDeleteByIdAsync(System.String)">
            <summary>
            根据logical_id删除数据
            </summary>
            <param name="logical_id">logical_id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.BactchLogicDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据logical_id集合批量删除数据
            </summary>
            <param name="idList">logical_id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.BactchLogicDeleteByIdListAsync(System.Collections.Generic.List{System.String})">
            <summary>
            根据logical_id集合批量删除数据
            </summary>
            <param name="idList">logical_id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.UpdateById(`0)">
            <summary>
            根据logical_id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.UpdateByIdAsync(`0)">
            <summary>
            根据logical_id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.BactchUpdateById(System.Collections.Generic.List{`0})">
            <summary>
            根据logical_id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.BactchUpdateByIdAsync(System.Collections.Generic.List{`0})">
            <summary>
            根据logical_id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.BactchUpdateSpecifyFieldsById(HS.Message.Share.BaseModel.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="updateFieldsValue">跟新字段键值对</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.BactchUpdateSpecifyFieldsByIdAsync(HS.Message.Share.BaseModel.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="updateFieldsValue">跟新字段键值对</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.GetTotalCount(`1)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.GetTotalCountAsync(`1)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.GetModelById(System.String,System.String)">
            <summary>
            根据logical_id获取一个模型数据
            </summary>
            <param name="logical_id">logical_id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.GetModelByIdAsync(System.String,System.String)">
            <summary>
            根据logical_id获取一个模型数据
            </summary>
            <param name="logical_id">logical_id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.GetOneModel(`1)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.GetOneModelAsync(`1)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.GetAllListByIdListAsync(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.GetPageList(HS.Message.Share.BaseModel.MPageQueryCondition{`1})">
            <summary>
            分页获取数据
            </summary>
            <param name="pageQueryCondition">查询条件</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.GetPageListAsync(HS.Message.Share.BaseModel.MPageQueryCondition{`1})">
            <summary>
            分页获取数据
            </summary>
            <param name="pageQueryCondition">查询条件</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.GetAllList(`1,System.Int32)">
            <summary>
            获取所有数据集合(根据条件)
            </summary>
            <param name="model">查询条件</param>
            <param name="limitNum">限制查询条数 0 代表查询全部数据</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.IRepository`2.GetAllListAsync(`1,System.Int32)">
            <summary>
            获取所有数据集合(根据条件)
            </summary>
            <param name="model">查询条件</param>
            <param name="limitNum">限制查询条数 0 代表查询全部数据</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.#ctor(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.AddOne(`0)">
            <summary>
            新增一条记录
            </summary>
            <param name="model">数据模型</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.AddOneAsync(`0)">
            <summary>
            新增一条记录
            </summary>
            <param name="model">数据模型</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.BactchAdd(System.Collections.Generic.List{`0})">
            <summary>
            批量新增数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.BactchAddAsync(System.Collections.Generic.List{`0})">
            <summary>
            批量新增数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.DeleteById(System.String)">
            <summary>
            根据logical_id删除数据
            </summary>
            <param name="logical_id">logical_id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.DeleteByIdAsync(System.String)">
            <summary>
            根据logical_id删除数据
            </summary>
            <param name="logical_id">logical_id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据logical_id集合批量删除数据
            </summary>
            <param name="idList">logical_id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.BactchDeleteByIdListAsync(System.Collections.Generic.List{System.String})">
            <summary>
            根据logical_id集合批量删除数据
            </summary>
            <param name="idList">logical_id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.LogicDeleteById(System.String)">
            <summary>
            根据logical_id删除数据
            </summary>
            <param name="logical_id">logical_id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.LogicDeleteByIdAsync(System.String)">
            <summary>
            根据logical_id删除数据
            </summary>
            <param name="logical_id">logical_id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.BactchLogicDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据logical_id集合批量删除数据
            </summary>
            <param name="idList">logical_id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.BactchLogicDeleteByIdListAsync(System.Collections.Generic.List{System.String})">
            <summary>
            根据logical_id集合批量删除数据
            </summary>
            <param name="idList">logical_id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.UpdateById(`0)">
            <summary>
            根据logical_id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.UpdateByIdAsync(`0)">
            <summary>
            根据logical_id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.BactchUpdateById(System.Collections.Generic.List{`0})">
            <summary>
            根据logical_id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.BactchUpdateByIdAsync(System.Collections.Generic.List{`0})">
            <summary>
            根据logical_id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.BactchUpdateSpecifyFieldsById(HS.Message.Share.BaseModel.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="updateFieldsValue">跟新字段键值对</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.BactchUpdateSpecifyFieldsByIdAsync(HS.Message.Share.BaseModel.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="updateFieldsValue">跟新字段键值对</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetTotalCount(`1)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetTotalCountAsync(`1)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetModelById(System.String,System.String)">
            <summary>
            根据logical_id获取一个模型数据
            </summary>
            <param name="logical_id">logical_id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetModelByIdAsync(System.String,System.String)">
            <summary>
            根据logical_id获取一个模型数据
            </summary>
            <param name="logical_id">logical_id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetModelById``1(System.String,System.String)">
            <summary>
            根据logical_id获取一个模型数据
            </summary>
            <param name="logical_id">logical_id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetModelByIdAsync``1(System.String,System.String)">
            <summary>
            根据logical_id获取一个模型数据
            </summary>
            <param name="logical_id">logical_id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetOneModel(`1)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetOneModelAsync(`1)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetAllListByIdListAsync(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetAllListByIdList``1(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetAllListByIdListAsync``1(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetPageList(HS.Message.Share.BaseModel.MPageQueryCondition{`1})">
            <summary>
            分页获取数据
            </summary>
            <param name="pageQueryCondition">查询条件</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetPageListAsync(HS.Message.Share.BaseModel.MPageQueryCondition{`1})">
            <summary>
            分页获取数据
            </summary>
            <param name="pageQueryCondition">查询条件</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetAllList(`1,System.Int32)">
            <summary>
            获取所有数据集合(根据条件)
            </summary>
            <param name="model">查询条件</param>
            <param name="limitNum">限制查询条数 0 代表查询全部数据</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetAllListAsync(`1,System.Int32)">
            <summary>
            获取所有数据集合(根据条件)
            </summary>
            <param name="model">查询条件</param>
            <param name="limitNum">限制查询条数 0 代表查询全部数据</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetSqlWhereByModel(`1)">
            <summary>
            根据model构建查询条件
            </summary>
            <param name="model">实体model</param>
            <returns>条件集合</returns>
        </member>
        <member name="P:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetSqlWhereByModelFunc">
            <summary>
            根据model构建查询条件
            </summary>
            <param name="model">实体model</param>
            <returns>条件集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetAllField(System.String)">
            <summary>
            获取表全部字段
            </summary>
            <returns></returns>
        </member>
        <member name="P:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetAllFieldFunc">
            <summary>
            获取表全部字段(不包含id)
            </summary>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetInsertSql">
            <summary>
            获取表\的插入语句 
            </summary>
            <returns>插入语句</returns>
        </member>
        <member name="P:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetInsertSqlFunc">
            <summary>
            获取表的插入语句 
            </summary>
            <returns>插入语句</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetUpdateSql">
            <summary>
            获取表的更新语句 
            </summary>
            <returns>插入语句</returns>
        </member>
        <member name="P:HS.Message.Repository.repository.base.core.MySqlBizRepository`2.GetUpdateSqlFunc">
            <summary>
            获取更新sql
            </summary>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.#ctor(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.AddOne(`0)">
            <summary>
            新增一条记录
            </summary>
            <param name="model">数据模型</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.AddOneAsync(`0)">
            <summary>
            新增一条记录
            </summary>
            <param name="model">数据模型</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.BactchAdd(System.Collections.Generic.List{`0})">
            <summary>
            批量新增数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.BactchAddAsync(System.Collections.Generic.List{`0})">
            <summary>
            批量新增数据记录
            </summary>
            <param name="modelList">数据模型集合</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.DeleteById(System.String)">
            <summary>
            根据logical_id删除数据
            </summary>
            <param name="logical_id">logical_id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.DeleteByIdAsync(System.String)">
            <summary>
            根据logical_id删除数据
            </summary>
            <param name="logical_id">logical_id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.BactchDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据logical_id集合批量删除数据
            </summary>
            <param name="idList">logical_id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.BactchDeleteByIdListAsync(System.Collections.Generic.List{System.String})">
            <summary>
            根据logical_id集合批量删除数据
            </summary>
            <param name="idList">logical_id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.LogicDeleteById(System.String)">
            <summary>
            根据logical_id删除数据
            </summary>
            <param name="logical_id">logical_id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.LogicDeleteByIdAsync(System.String)">
            <summary>
            根据logical_id删除数据
            </summary>
            <param name="logical_id">logical_id</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.BactchLogicDeleteByIdList(System.Collections.Generic.List{System.String})">
            <summary>
            根据logical_id集合批量删除数据
            </summary>
            <param name="idList">logical_id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.BactchLogicDeleteByIdListAsync(System.Collections.Generic.List{System.String})">
            <summary>
            根据logical_id集合批量删除数据
            </summary>
            <param name="idList">logical_id集合</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.UpdateById(`0)">
            <summary>
            根据logical_id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.UpdateByIdAsync(`0)">
            <summary>
            根据logical_id更新数据实体
            </summary>
            <param name="model">实体模型</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.BactchUpdateById(System.Collections.Generic.List{`0})">
            <summary>
            根据logical_id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.BactchUpdateByIdAsync(System.Collections.Generic.List{`0})">
            <summary>
            根据logical_id更新数据实体(批量更新)
            </summary>
            <param name="modelList">实体模型集合</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.BactchUpdateSpecifyFieldsById(HS.Message.Share.BaseModel.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="updateFieldsValue">跟新字段键值对</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.BactchUpdateSpecifyFieldsByIdAsync(HS.Message.Share.BaseModel.MBactchUpdateSpecifyFields{System.String})">
            <summary>
            批量更新指定字段的值(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="updateFieldsValue">跟新字段键值对</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetTotalCount(`1)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetTotalCountAsync(`1)">
            <summary>
            根据条件获取总条数
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetModelById(System.String,System.String)">
            <summary>
            根据logical_id获取一个模型数据
            </summary>
            <param name="logical_id">logical_id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetModelByIdAsync(System.String,System.String)">
            <summary>
            根据logical_id获取一个模型数据
            </summary>
            <param name="logical_id">logical_id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetModelById``1(System.String,System.String)">
            <summary>
            根据logical_id获取一个模型数据
            </summary>
            <param name="logical_id">logical_id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetModelByIdAsync``1(System.String,System.String)">
            <summary>
            根据logical_id获取一个模型数据
            </summary>
            <param name="logical_id">logical_id</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetOneModel(`1)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetOneModelAsync(`1)">
            <summary>
            根据条件获取一个模型数据
            </summary>
            <param name="condition">condition</param>
            <returns>模型数据</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetAllListByIdList(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetAllListByIdListAsync(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetAllListByIdList``1(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetAllListByIdListAsync``1(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取所有数据集合(根据主键集合)
            </summary>
            <param name="idList">logical_id集合</param>
            <param name="queryFields">需要查询的字段，空代表获取全部，默认为空</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetPageList(HS.Message.Share.BaseModel.MPageQueryCondition{`1})">
            <summary>
            分页获取数据
            </summary>
            <param name="pageQueryCondition">查询条件</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetPageListAsync(HS.Message.Share.BaseModel.MPageQueryCondition{`1})">
            <summary>
            分页获取数据
            </summary>
            <param name="pageQueryCondition">查询条件</param>
            <returns>符合要求的分页数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetAllList(`1,System.Int32)">
            <summary>
            获取所有数据集合(根据条件)
            </summary>
            <param name="model">查询条件</param>
            <param name="limitNum">限制查询条数 0 代表查询全部数据</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetAllListAsync(`1,System.Int32)">
            <summary>
            获取所有数据集合(根据条件)
            </summary>
            <param name="model">查询条件</param>
            <param name="limitNum">限制查询条数 0 代表查询全部数据</param>
            <returns>所有数据集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetSqlWhereByModel(`1)">
            <summary>
            根据model构建查询条件
            </summary>
            <param name="model">实体model</param>
            <returns>条件集合</returns>
        </member>
        <member name="P:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetSqlWhereByModelFunc">
            <summary>
            根据model构建查询条件
            </summary>
            <param name="model">实体model</param>
            <returns>条件集合</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetAllField(System.String)">
            <summary>
            获取表全部字段
            </summary>
            <returns></returns>
        </member>
        <member name="P:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetAllFieldFunc">
            <summary>
            获取表全部字段(不包含id)
            </summary>
            <returns></returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetInsertSql">
            <summary>
            获取表\的插入语句 
            </summary>
            <returns>插入语句</returns>
        </member>
        <member name="P:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetInsertSqlFunc">
            <summary>
            获取表的插入语句 
            </summary>
            <returns>插入语句</returns>
        </member>
        <member name="M:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetUpdateSql">
            <summary>
            获取表的更新语句 
            </summary>
            <returns>更新语句</returns>
        </member>
        <member name="P:HS.Message.Repository.repository.base.core.PGSqlBizRepository`2.GetUpdateSqlFunc">
            <summary>
            获取更新sql
            </summary>
            <returns></returns>
        </member>
        <member name="T:HS.Message.Repository.repository.core.imp.MailConfigureRepository">
            <summary>
            邮件配置仓储
            </summary>
        </member>
        <member name="M:HS.Message.Repository.repository.core.imp.MailConfigureRepository.#ctor(HS.Message.Share.CommonObject.IRepositoryInjectedObjects)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:HS.Message.Repository.repository.core.imp.MailMessageRepository">
            <summary>
            邮件消息仓储
            </summary>
        </member>
        <member name="M:HS.Message.Repository.repository.core.imp.MailMessageRepository.#ctor(HS.Message.Share.CommonObject.IRepositoryInjectedObjects)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:HS.Message.Repository.repository.core.imp.MailSendLogsRepository">
            <summary>
            邮件发送日志仓储
            </summary>
        </member>
        <member name="M:HS.Message.Repository.repository.core.imp.MailSendLogsRepository.#ctor(HS.Message.Share.CommonObject.IRepositoryInjectedObjects)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:HS.Message.Repository.repository.core.imp.MailTemplateRepository">
            <summary>
            邮件模板仓储
            </summary>
        </member>
        <member name="M:HS.Message.Repository.repository.core.imp.MailTemplateRepository.#ctor(HS.Message.Share.CommonObject.IRepositoryInjectedObjects)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:HS.Message.Repository.repository.core.imp.MessageReceiverRepository">
            <summary>
            消息接收人仓储
            </summary>
        </member>
        <member name="M:HS.Message.Repository.repository.core.imp.MessageReceiverRepository.#ctor(HS.Message.Share.CommonObject.IRepositoryInjectedObjects)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:HS.Message.Repository.repository.core.imp.MessageRepository">
            <summary>
            消息仓储
            </summary>
        </member>
        <member name="M:HS.Message.Repository.repository.core.imp.MessageRepository.#ctor(HS.Message.Share.CommonObject.IRepositoryInjectedObjects)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:HS.Message.Repository.repository.core.imp.SmsConfigureRepository">
            <summary>
            短信配置仓储
            </summary>
        </member>
        <member name="M:HS.Message.Repository.repository.core.imp.SmsConfigureRepository.#ctor(HS.Message.Share.CommonObject.IRepositoryInjectedObjects)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:HS.Message.Repository.repository.core.imp.SmsMessageDetailsRepository">
            <summary>
            短信详情仓储
            </summary>
        </member>
        <member name="M:HS.Message.Repository.repository.core.imp.SmsMessageDetailsRepository.#ctor(HS.Message.Share.CommonObject.IRepositoryInjectedObjects)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:HS.Message.Repository.repository.core.imp.SmsMessageRepository">
            <summary>
            短信仓储
            </summary>
        </member>
        <member name="M:HS.Message.Repository.repository.core.imp.SmsMessageRepository.#ctor(HS.Message.Share.CommonObject.IRepositoryInjectedObjects)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:HS.Message.Repository.repository.core.imp.SmsTemplateRepository">
            <summary>
            短信模板仓储
            </summary>
        </member>
        <member name="M:HS.Message.Repository.repository.core.imp.SmsTemplateRepository.#ctor(HS.Message.Share.CommonObject.IRepositoryInjectedObjects)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:HS.Message.Share.CommonObject.IRepositoryInjectedObjects">
            <summary>
            公告注入对象包
            </summary>
        </member>
        <member name="P:HS.Message.Share.CommonObject.IRepositoryInjectedObjects.Configuration">
            <summary>
            配置文件
            </summary>
        </member>
        <member name="P:HS.Message.Share.CommonObject.IRepositoryInjectedObjects.Accessor">
            <summary>
            请求上下文
            </summary>
        </member>
        <member name="P:HS.Message.Share.CommonObject.IRepositoryInjectedObjects.HttpContextInfo">
            <summary>
            请求上下文信息（用户信息）
            </summary>
        </member>
        <member name="T:HS.Message.Share.CommonObject.RepositoryInjectedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="P:HS.Message.Share.CommonObject.RepositoryInjectedObjects.Configuration">
            <summary>
            配置文件
            </summary>
        </member>
        <member name="P:HS.Message.Share.CommonObject.RepositoryInjectedObjects.Accessor">
            <summary>
            请求上下文
            </summary>
        </member>
        <member name="P:HS.Message.Share.CommonObject.RepositoryInjectedObjects.HttpContextInfo">
            <summary>
            请求上下文信息（用户信息）
            </summary>
        </member>
        <member name="M:HS.Message.Share.CommonObject.RepositoryInjectedObjects.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor,HS.Message.Share.Http.HttpContextInfo)">
            <summary>
            
            </summary>
            <param name="configuration"></param>
            <param name="accessor"></param>
            <param name="httpContextInfo"></param>
        </member>
    </members>
</doc>
