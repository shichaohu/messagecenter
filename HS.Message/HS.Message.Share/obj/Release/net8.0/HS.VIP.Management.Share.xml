<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HS.VIP.Management.Share</name>
    </assembly>
    <members>
        <member name="T:HS.VIP.Management.Share.CommonObject.IInjectedObjects">
            <summary>
            公告注入对象包
            </summary>
        </member>
        <member name="P:HS.VIP.Management.Share.CommonObject.IInjectedObjects.Mediator">
            <summary>
            _mediator 领域事件操作对象
            </summary>
        </member>
        <member name="P:HS.VIP.Management.Share.CommonObject.IInjectedObjects.Accessor">
            <summary>
            请求上下文
            </summary>
        </member>
        <member name="P:HS.VIP.Management.Share.CommonObject.IInjectedObjects.HttpContextInfo">
            <summary>
            请求上下文信息（用户信息）
            </summary>
        </member>
        <member name="T:HS.VIP.Management.Share.CommonObject.InjectedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="P:HS.VIP.Management.Share.CommonObject.InjectedObjects.Mediator">
            <summary>
            _mediator 领域事件操作对象
            </summary>
        </member>
        <member name="P:HS.VIP.Management.Share.CommonObject.InjectedObjects.Accessor">
            <summary>
            请求上下文
            </summary>
        </member>
        <member name="P:HS.VIP.Management.Share.CommonObject.InjectedObjects.HttpContextInfo">
            <summary>
            请求上下文信息（用户信息）
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Share.CommonObject.InjectedObjects.#ctor(MediatR.IMediator,Microsoft.AspNetCore.Http.IHttpContextAccessor,HS.VIP.Management.Share.http.HttpContextInfo)">
            <summary>
            
            </summary>
            <param name="mediator"></param>
            <param name="accessor"></param>
            <param name="httpContextInfo"></param>
        </member>
        <member name="T:HS.VIP.Management.Share.Enums.BillOperation">
            <summary>
            单据操作
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Share.Enums.BillOperation.commit">
            <summary>
            提交
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Share.Enums.BillOperation.approved">
            <summary>
            审核通过
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Share.Enums.BillOperation.rejected">
            <summary>
            驳回
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Share.Enums.BillOperation.done">
            <summary>
            完成
            </summary>
        </member>
        <member name="T:HS.VIP.Management.Share.Enums.BillStatus">
            <summary>
            单据状态（流转）
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Share.Enums.BillStatus.uncommitted">
            <summary>
            未提交
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Share.Enums.BillStatus.unaudited">
            <summary>
            未审核
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Share.Enums.BillStatus.approved">
            <summary>
            审核通过
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Share.Enums.BillStatus.rejected">
            <summary>
            驳回
            </summary>
        </member>
        <member name="F:HS.VIP.Management.Share.Enums.BillStatus.completed">
            <summary>
            完成
            </summary>
        </member>
        <member name="T:HS.VIP.Management.Share.http.HttpContextInfo">
            <summary>
            http请求信息
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Share.http.HttpContextInfo.GetTokenValuByKey(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.http.HttpContextInfo.GetTokenNumValuByKey(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.http.HttpContextInfo.GetUserId">
            <summary>
            user id
            </summary>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.http.HttpContextInfo.GetUserName">
            <summary>
            user name
            </summary>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.http.HttpContextInfo.GetRequestIp">
            <summary>
            request ip
            </summary>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.http.HttpContextInfo.GetBelongAirportThree">
            <summary>
            机场三字码
            </summary>
            <returns></returns>
        </member>
        <member name="T:HS.VIP.Management.Share.Redis.IDistributedCache">
            <summary>
            缓存接口
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.IDistributedCache.SetCache(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">值</param>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.IDistributedCache.SetCacheAsync(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">值</param>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.IDistributedCache.SetCache(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">值</param>
            <param name="expiry">过期时间</param>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.IDistributedCache.SetCacheAsync(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">值</param>
            <param name="expiry">过期时间</param>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.IDistributedCache.GetCache(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.IDistributedCache.GetCacheAsync(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.IDistributedCache.GetCache``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.IDistributedCache.GetCacheAsync``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.IDistributedCache.GetOrAddAsync(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
            获取缓存,没有则添加
            </summary>
            <param name="key"></param>
            <param name="value">实际值</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.IDistributedCache.GetOrAddAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan})">
            <summary>
            获取泛型缓存,没有则添加
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="valueFactory">获取实际值的委托</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.IDistributedCache.GetOrAddListAsync``1(System.String,System.Func{System.Threading.Tasks.Task{System.Collections.Generic.List{``0}}},System.Nullable{System.TimeSpan})">
            <summary>
            获取泛型集合缓存,没有则添加
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="valueFactory">获取实际值的委托</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.IDistributedCache.LockAndRelease(System.Action,System.String,System.TimeSpan,System.Int64)">
            <summary>
            加分布式锁，并自动释放锁
            </summary>
            <param name="action"></param>
            <param name="lockKey">锁key</param>
            <param name="lockExpiry">锁自动过期时间[默认10]（s）</param>
            <param name="waitLockSeconds">等待锁时间（ms）</param>
            <returns>LockId</returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.IDistributedCache.TakeLock(System.String,System.TimeSpan,System.Int64)">
            <summary>
            加分布式锁
            必须调用ReleaseLock()手动解锁
            </summary>
            <param name="lockKey">锁key</param>
            <param name="lockExpiry">锁自动过期时间[默认10]（s）</param>
            <param name="waitLockSeconds">等待锁时间（ms）</param>
            <returns>LockId</returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.IDistributedCache.ReleaseLock">
            <summary>
            释放锁
            使用TakeLock方法加锁后，才需调用此方法
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.IDistributedCache.RemoveCache(System.String)">
            <summary>
            清除缓存
            </summary>
            <param name="key">缓存Key</param>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.IDistributedCache.RemoveCacheAsync(System.String)">
            <summary>
            清除缓存
            </summary>
            <param name="key">缓存Key</param>
        </member>
        <member name="T:HS.VIP.Management.Share.Redis.RedisCache">
            <summary>
            redis
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCache.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            redis
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCache.BuildKey(System.String)">
            <summary>
            创建key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCache.SetCache(System.String,System.Object)">
            <summary>
            设置值
            Set key to hold the string value. If key already holds a value, it is overwritten, regardless of its type.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCache.SetCacheAsync(System.String,System.Object)">
            <summary>
            设置值
            Set key to hold the string value. If key already holds a value, it is overwritten, regardless of its type.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCache.SetCache(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置值
            Set key to hold the string value. If key already holds a value, it is overwritten, regardless of its type.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiry">过期时间</param>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCache.SetCacheAsync(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置值
            Set key to hold the string value. If key already holds a value, it is overwritten, regardless of its type.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCache.GetCache(System.String)">
            <summary>
            获取值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCache.GetCacheAsync(System.String)">
            <summary>
            获取值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCache.GetCache``1(System.String)">
            <summary>
            获取值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCache.GetCacheAsync``1(System.String)">
            <summary>
            获取值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCache.GetOrAddAsync(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
            获取值
            如果值不存在，则新增，如果值已存在，则返回值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCache.GetOrAddAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan})">
            <summary>
            获取值
            如果值不存在，则新增，如果值已存在，则返回值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="valueFactory">缓存不存在时，值的获取方式</param>
            <param name="expiry"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCache.GetOrAddListAsync``1(System.String,System.Func{System.Threading.Tasks.Task{System.Collections.Generic.List{``0}}},System.Nullable{System.TimeSpan})">
            <summary>
            获取值
            如果值不存在，则新增，如果值已存在，则返回值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="valueFactory">缓存不存在时，值的获取方式</param>
            <param name="expiry"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCache.RemoveCache(System.String)">
            <summary>
            删除缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCache.RemoveCacheAsync(System.String)">
            <summary>
            删除缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCache.LockAndRelease(System.Action,System.String,System.TimeSpan,System.Int64)">
            <summary>
            加分布式锁,自动解锁
            </summary>
            <param name="action"></param>
            <param name="lockKey">锁key</param>
            <param name="lockExpiry">锁自动过期时间[默认10]（s）</param>
            <param name="waitLockSeconds">等待锁时间（ms）</param>
            <returns>LockId</returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCache.TakeLock(System.String,System.TimeSpan,System.Int64)">
            <summary>
            加分布式锁，必须调用ReleaseLock()手动解锁
            </summary>
            <param name="lockKey">锁key</param>
            <param name="lockExpiry">锁自动过期时间[默认10]（s）</param>
            <param name="waitLockSeconds">等待锁时间（ms）</param>
            <returns>LockId</returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCache.ReleaseLock">
            <summary>
            释放锁
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCache.Dispose">
            <summary>
            Dispose redis connection
            </summary>
        </member>
        <member name="T:HS.VIP.Management.Share.Redis.RedisCacheService">
            <summary>
            Redis通用存储类
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCacheService.SetAsync(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            异步新增或修改键值对
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCacheService.Set(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            同步新增或修改键值对
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCacheService.GetAsync(System.String)">
            <summary>
            异步获取值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCacheService.Get(System.String)">
            <summary>
            同步获取值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCacheService.DeleteAsync(System.String)">
             <summary>
            异步 删除键值对
             </summary>
             <param name="key"></param>
             <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCacheService.Delete(System.String)">
            <summary>
            同步删除键值对
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCacheService.ExistsAsync(System.String)">
            <summary>
            异步检查键是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Redis.RedisCacheService.Exists(System.String)">
            <summary>
            同步检查键是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:HS.VIP.Management.Share.Redis.RedisSettings">
            <summary>
            redis配置类
            </summary>
        </member>
        <member name="P:HS.VIP.Management.Share.Redis.RedisSettings.EndPoints">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:HS.VIP.Management.Share.Redis.RedisSettings.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="T:HS.VIP.Management.Share.Utils.ValueToObjectUtil">
            <summary>
            
            </summary>
        </member>
        <member name="M:HS.VIP.Management.Share.Utils.ValueToObjectUtil.ToObject``1(System.String)">
            <summary>
            将Json字符串反序列化为对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="jsonStr">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:HS.VIP.Management.Share.Utils.ValueToObjectUtil.ToJson(System.Object)">
            <summary>
            将字符串序列化为json
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
    </members>
</doc>
